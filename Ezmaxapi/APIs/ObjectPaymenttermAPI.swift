//
// ObjectPaymenttermAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectPaymenttermAPI {

    /**
     Create a new Paymentterm
     
     - parameter paymenttermCreateObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func paymenttermCreateObjectV1(paymenttermCreateObjectV1Request: PaymenttermCreateObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaymenttermCreateObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return paymenttermCreateObjectV1WithRequestBuilder(paymenttermCreateObjectV1Request: paymenttermCreateObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Paymentterm
     - POST /1/object/paymentterm
     - The endpoint allows to create one or many elements at once.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter paymenttermCreateObjectV1Request: (body)  
     - returns: RequestBuilder<PaymenttermCreateObjectV1Response> 
     */
    open class func paymenttermCreateObjectV1WithRequestBuilder(paymenttermCreateObjectV1Request: PaymenttermCreateObjectV1Request) -> RequestBuilder<PaymenttermCreateObjectV1Response> {
        let localVariablePath = "/1/object/paymentterm"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymenttermCreateObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymenttermCreateObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit an existing Paymentterm
     
     - parameter pkiPaymenttermID: (path)  
     - parameter paymenttermEditObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func paymenttermEditObjectV1(pkiPaymenttermID: Int, paymenttermEditObjectV1Request: PaymenttermEditObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaymenttermEditObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return paymenttermEditObjectV1WithRequestBuilder(pkiPaymenttermID: pkiPaymenttermID, paymenttermEditObjectV1Request: paymenttermEditObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit an existing Paymentterm
     - PUT /1/object/paymentterm/{pkiPaymenttermID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiPaymenttermID: (path)  
     - parameter paymenttermEditObjectV1Request: (body)  
     - returns: RequestBuilder<PaymenttermEditObjectV1Response> 
     */
    open class func paymenttermEditObjectV1WithRequestBuilder(pkiPaymenttermID: Int, paymenttermEditObjectV1Request: PaymenttermEditObjectV1Request) -> RequestBuilder<PaymenttermEditObjectV1Response> {
        var localVariablePath = "/1/object/paymentterm/{pkiPaymenttermID}"
        let pkiPaymenttermIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiPaymenttermID))"
        let pkiPaymenttermIDPostEscape = pkiPaymenttermIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiPaymenttermID}", with: pkiPaymenttermIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymenttermEditObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymenttermEditObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sSelector
     */
    public enum SSelector_paymenttermGetAutocompleteV2: String, CaseIterable {
        case all = "All"
    }

    /**
     * enum for parameter eFilterActive
     */
    public enum EFilterActive_paymenttermGetAutocompleteV2: String, CaseIterable {
        case all = "All"
        case active = "Active"
        case inactive = "Inactive"
    }

    /**
     Retrieve Paymentterms and IDs
     
     - parameter sSelector: (path) The type of Paymentterms to return 
     - parameter eFilterActive: (query) Specify which results we want to display. (optional, default to .active)
     - parameter sQuery: (query) Allow to filter the returned results (optional)
     - parameter acceptLanguage: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func paymenttermGetAutocompleteV2(sSelector: SSelector_paymenttermGetAutocompleteV2, eFilterActive: EFilterActive_paymenttermGetAutocompleteV2? = nil, sQuery: String? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaymenttermGetAutocompleteV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return paymenttermGetAutocompleteV2WithRequestBuilder(sSelector: sSelector, eFilterActive: eFilterActive, sQuery: sQuery, acceptLanguage: acceptLanguage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Paymentterms and IDs
     - GET /2/object/paymentterm/getAutocomplete/{sSelector}
     - Get the list of Paymentterm to be used in a dropdown or autocomplete control.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter sSelector: (path) The type of Paymentterms to return 
     - parameter eFilterActive: (query) Specify which results we want to display. (optional, default to .active)
     - parameter sQuery: (query) Allow to filter the returned results (optional)
     - parameter acceptLanguage: (header)  (optional)
     - returns: RequestBuilder<PaymenttermGetAutocompleteV2Response> 
     */
    open class func paymenttermGetAutocompleteV2WithRequestBuilder(sSelector: SSelector_paymenttermGetAutocompleteV2, eFilterActive: EFilterActive_paymenttermGetAutocompleteV2? = nil, sQuery: String? = nil, acceptLanguage: HeaderAcceptLanguage? = nil) -> RequestBuilder<PaymenttermGetAutocompleteV2Response> {
        var localVariablePath = "/2/object/paymentterm/getAutocomplete/{sSelector}"
        let sSelectorPreEscape = "\(sSelector.rawValue)"
        let sSelectorPostEscape = sSelectorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sSelector}", with: sSelectorPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eFilterActive": (wrappedValue: eFilterActive?.encodeToJSON(), isExplode: true),
            "sQuery": (wrappedValue: sQuery?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymenttermGetAutocompleteV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter eOrderBy
     */
    public enum EOrderBy_paymenttermGetListV1: String, CaseIterable {
        case pkipaymenttermidAsc = "pkiPaymenttermID_ASC"
        case pkipaymenttermidDesc = "pkiPaymenttermID_DESC"
        case spaymenttermcodeAsc = "sPaymenttermCode_ASC"
        case spaymenttermcodeDesc = "sPaymenttermCode_DESC"
        case epaymenttermtypeAsc = "ePaymenttermType_ASC"
        case epaymenttermtypeDesc = "ePaymenttermType_DESC"
        case ipaymenttermdayAsc = "iPaymenttermDay_ASC"
        case ipaymenttermdayDesc = "iPaymenttermDay_DESC"
        case spaymenttermdescriptionxAsc = "sPaymenttermDescriptionX_ASC"
        case spaymenttermdescriptionxDesc = "sPaymenttermDescriptionX_DESC"
        case bpaymenttermisactiveAsc = "bPaymenttermIsactive_ASC"
        case bpaymenttermisactiveDesc = "bPaymenttermIsactive_DESC"
    }

    /**
     Retrieve Paymentterm list
     
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func paymenttermGetListV1(eOrderBy: EOrderBy_paymenttermGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaymenttermGetListV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return paymenttermGetListV1WithRequestBuilder(eOrderBy: eOrderBy, iRowMax: iRowMax, iRowOffset: iRowOffset, acceptLanguage: acceptLanguage, sFilter: sFilter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Paymentterm list
     - GET /1/object/paymentterm/getList
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - returns: RequestBuilder<PaymenttermGetListV1Response> 
     */
    open class func paymenttermGetListV1WithRequestBuilder(eOrderBy: EOrderBy_paymenttermGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil) -> RequestBuilder<PaymenttermGetListV1Response> {
        let localVariablePath = "/1/object/paymentterm/getList"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eOrderBy": (wrappedValue: eOrderBy?.encodeToJSON(), isExplode: true),
            "iRowMax": (wrappedValue: iRowMax?.encodeToJSON(), isExplode: true),
            "iRowOffset": (wrappedValue: iRowOffset?.encodeToJSON(), isExplode: true),
            "sFilter": (wrappedValue: sFilter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymenttermGetListV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Paymentterm
     
     - parameter pkiPaymenttermID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func paymenttermGetObjectV2(pkiPaymenttermID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PaymenttermGetObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return paymenttermGetObjectV2WithRequestBuilder(pkiPaymenttermID: pkiPaymenttermID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Paymentterm
     - GET /2/object/paymentterm/{pkiPaymenttermID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiPaymenttermID: (path)  
     - returns: RequestBuilder<PaymenttermGetObjectV2Response> 
     */
    open class func paymenttermGetObjectV2WithRequestBuilder(pkiPaymenttermID: Int) -> RequestBuilder<PaymenttermGetObjectV2Response> {
        var localVariablePath = "/2/object/paymentterm/{pkiPaymenttermID}"
        let pkiPaymenttermIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiPaymenttermID))"
        let pkiPaymenttermIDPostEscape = pkiPaymenttermIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiPaymenttermID}", with: pkiPaymenttermIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaymenttermGetObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
