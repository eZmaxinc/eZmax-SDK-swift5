//
// ObjectEzsignannotationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectEzsignannotationAPI {

    /**
     Create a new Ezsignannotation
     
     - parameter ezsignannotationCreateObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsignannotationCreateObjectV1(ezsignannotationCreateObjectV1Request: EzsignannotationCreateObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsignannotationCreateObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsignannotationCreateObjectV1WithRequestBuilder(ezsignannotationCreateObjectV1Request: ezsignannotationCreateObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Ezsignannotation
     - POST /1/object/ezsignannotation
     - The endpoint allows to create one or many elements at once.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter ezsignannotationCreateObjectV1Request: (body)  
     - returns: RequestBuilder<EzsignannotationCreateObjectV1Response> 
     */
    open class func ezsignannotationCreateObjectV1WithRequestBuilder(ezsignannotationCreateObjectV1Request: EzsignannotationCreateObjectV1Request) -> RequestBuilder<EzsignannotationCreateObjectV1Response> {
        let localVariablePath = "/1/object/ezsignannotation"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ezsignannotationCreateObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsignannotationCreateObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an existing Ezsignannotation
     
     - parameter pkiEzsignannotationID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsignannotationDeleteObjectV1(pkiEzsignannotationID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsignannotationDeleteObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsignannotationDeleteObjectV1WithRequestBuilder(pkiEzsignannotationID: pkiEzsignannotationID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an existing Ezsignannotation
     - DELETE /1/object/ezsignannotation/{pkiEzsignannotationID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsignannotationID: (path)  
     - returns: RequestBuilder<EzsignannotationDeleteObjectV1Response> 
     */
    open class func ezsignannotationDeleteObjectV1WithRequestBuilder(pkiEzsignannotationID: Int) -> RequestBuilder<EzsignannotationDeleteObjectV1Response> {
        var localVariablePath = "/1/object/ezsignannotation/{pkiEzsignannotationID}"
        let pkiEzsignannotationIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsignannotationID))"
        let pkiEzsignannotationIDPostEscape = pkiEzsignannotationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsignannotationID}", with: pkiEzsignannotationIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsignannotationDeleteObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit an existing Ezsignannotation
     
     - parameter pkiEzsignannotationID: (path)  
     - parameter ezsignannotationEditObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsignannotationEditObjectV1(pkiEzsignannotationID: Int, ezsignannotationEditObjectV1Request: EzsignannotationEditObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsignannotationEditObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsignannotationEditObjectV1WithRequestBuilder(pkiEzsignannotationID: pkiEzsignannotationID, ezsignannotationEditObjectV1Request: ezsignannotationEditObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit an existing Ezsignannotation
     - PUT /1/object/ezsignannotation/{pkiEzsignannotationID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsignannotationID: (path)  
     - parameter ezsignannotationEditObjectV1Request: (body)  
     - returns: RequestBuilder<EzsignannotationEditObjectV1Response> 
     */
    open class func ezsignannotationEditObjectV1WithRequestBuilder(pkiEzsignannotationID: Int, ezsignannotationEditObjectV1Request: EzsignannotationEditObjectV1Request) -> RequestBuilder<EzsignannotationEditObjectV1Response> {
        var localVariablePath = "/1/object/ezsignannotation/{pkiEzsignannotationID}"
        let pkiEzsignannotationIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsignannotationID))"
        let pkiEzsignannotationIDPostEscape = pkiEzsignannotationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsignannotationID}", with: pkiEzsignannotationIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ezsignannotationEditObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsignannotationEditObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Ezsignannotation
     
     - parameter pkiEzsignannotationID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsignannotationGetObjectV2(pkiEzsignannotationID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsignannotationGetObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsignannotationGetObjectV2WithRequestBuilder(pkiEzsignannotationID: pkiEzsignannotationID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Ezsignannotation
     - GET /2/object/ezsignannotation/{pkiEzsignannotationID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsignannotationID: (path)  
     - returns: RequestBuilder<EzsignannotationGetObjectV2Response> 
     */
    open class func ezsignannotationGetObjectV2WithRequestBuilder(pkiEzsignannotationID: Int) -> RequestBuilder<EzsignannotationGetObjectV2Response> {
        var localVariablePath = "/2/object/ezsignannotation/{pkiEzsignannotationID}"
        let pkiEzsignannotationIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsignannotationID))"
        let pkiEzsignannotationIDPostEscape = pkiEzsignannotationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsignannotationID}", with: pkiEzsignannotationIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsignannotationGetObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
