//
// ObjectEzsigntemplatesignatureAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectEzsigntemplatesignatureAPI {

    /**
     Create a new Ezsigntemplatesignature
     
     - parameter ezsigntemplatesignatureCreateObjectV2Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatesignatureCreateObjectV2(ezsigntemplatesignatureCreateObjectV2Request: EzsigntemplatesignatureCreateObjectV2Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatesignatureCreateObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatesignatureCreateObjectV2WithRequestBuilder(ezsigntemplatesignatureCreateObjectV2Request: ezsigntemplatesignatureCreateObjectV2Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Ezsigntemplatesignature
     - POST /2/object/ezsigntemplatesignature
     - The endpoint allows to create one or many elements at once.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter ezsigntemplatesignatureCreateObjectV2Request: (body)  
     - returns: RequestBuilder<EzsigntemplatesignatureCreateObjectV2Response> 
     */
    open class func ezsigntemplatesignatureCreateObjectV2WithRequestBuilder(ezsigntemplatesignatureCreateObjectV2Request: EzsigntemplatesignatureCreateObjectV2Request) -> RequestBuilder<EzsigntemplatesignatureCreateObjectV2Response> {
        let localVariablePath = "/2/object/ezsigntemplatesignature"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ezsigntemplatesignatureCreateObjectV2Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatesignatureCreateObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an existing Ezsigntemplatesignature
     
     - parameter pkiEzsigntemplatesignatureID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatesignatureDeleteObjectV1(pkiEzsigntemplatesignatureID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatesignatureDeleteObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatesignatureDeleteObjectV1WithRequestBuilder(pkiEzsigntemplatesignatureID: pkiEzsigntemplatesignatureID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an existing Ezsigntemplatesignature
     - DELETE /1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatesignatureID: (path)  
     - returns: RequestBuilder<EzsigntemplatesignatureDeleteObjectV1Response> 
     */
    open class func ezsigntemplatesignatureDeleteObjectV1WithRequestBuilder(pkiEzsigntemplatesignatureID: Int) -> RequestBuilder<EzsigntemplatesignatureDeleteObjectV1Response> {
        var localVariablePath = "/1/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}"
        let pkiEzsigntemplatesignatureIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatesignatureID))"
        let pkiEzsigntemplatesignatureIDPostEscape = pkiEzsigntemplatesignatureIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatesignatureID}", with: pkiEzsigntemplatesignatureIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatesignatureDeleteObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit an existing Ezsigntemplatesignature
     
     - parameter pkiEzsigntemplatesignatureID: (path)  
     - parameter ezsigntemplatesignatureEditObjectV2Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatesignatureEditObjectV2(pkiEzsigntemplatesignatureID: Int, ezsigntemplatesignatureEditObjectV2Request: EzsigntemplatesignatureEditObjectV2Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatesignatureEditObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatesignatureEditObjectV2WithRequestBuilder(pkiEzsigntemplatesignatureID: pkiEzsigntemplatesignatureID, ezsigntemplatesignatureEditObjectV2Request: ezsigntemplatesignatureEditObjectV2Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit an existing Ezsigntemplatesignature
     - PUT /2/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatesignatureID: (path)  
     - parameter ezsigntemplatesignatureEditObjectV2Request: (body)  
     - returns: RequestBuilder<EzsigntemplatesignatureEditObjectV2Response> 
     */
    open class func ezsigntemplatesignatureEditObjectV2WithRequestBuilder(pkiEzsigntemplatesignatureID: Int, ezsigntemplatesignatureEditObjectV2Request: EzsigntemplatesignatureEditObjectV2Request) -> RequestBuilder<EzsigntemplatesignatureEditObjectV2Response> {
        var localVariablePath = "/2/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}"
        let pkiEzsigntemplatesignatureIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatesignatureID))"
        let pkiEzsigntemplatesignatureIDPostEscape = pkiEzsigntemplatesignatureIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatesignatureID}", with: pkiEzsigntemplatesignatureIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ezsigntemplatesignatureEditObjectV2Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatesignatureEditObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Ezsigntemplatesignature
     
     - parameter pkiEzsigntemplatesignatureID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatesignatureGetObjectV3(pkiEzsigntemplatesignatureID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatesignatureGetObjectV3Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatesignatureGetObjectV3WithRequestBuilder(pkiEzsigntemplatesignatureID: pkiEzsigntemplatesignatureID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Ezsigntemplatesignature
     - GET /3/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatesignatureID: (path)  
     - returns: RequestBuilder<EzsigntemplatesignatureGetObjectV3Response> 
     */
    open class func ezsigntemplatesignatureGetObjectV3WithRequestBuilder(pkiEzsigntemplatesignatureID: Int) -> RequestBuilder<EzsigntemplatesignatureGetObjectV3Response> {
        var localVariablePath = "/3/object/ezsigntemplatesignature/{pkiEzsigntemplatesignatureID}"
        let pkiEzsigntemplatesignatureIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatesignatureID))"
        let pkiEzsigntemplatesignatureIDPostEscape = pkiEzsigntemplatesignatureIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatesignatureID}", with: pkiEzsigntemplatesignatureIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatesignatureGetObjectV3Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
