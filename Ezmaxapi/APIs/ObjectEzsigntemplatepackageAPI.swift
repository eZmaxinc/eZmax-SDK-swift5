//
// ObjectEzsigntemplatepackageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectEzsigntemplatepackageAPI {

    /**
     Create a new Ezsigntemplatepackage
     
     - parameter ezsigntemplatepackageCreateObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepackageCreateObjectV1(ezsigntemplatepackageCreateObjectV1Request: EzsigntemplatepackageCreateObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepackageCreateObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepackageCreateObjectV1WithRequestBuilder(ezsigntemplatepackageCreateObjectV1Request: ezsigntemplatepackageCreateObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Ezsigntemplatepackage
     - POST /1/object/ezsigntemplatepackage
     - The endpoint allows to create one or many elements at once.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter ezsigntemplatepackageCreateObjectV1Request: (body)  
     - returns: RequestBuilder<EzsigntemplatepackageCreateObjectV1Response> 
     */
    open class func ezsigntemplatepackageCreateObjectV1WithRequestBuilder(ezsigntemplatepackageCreateObjectV1Request: EzsigntemplatepackageCreateObjectV1Request) -> RequestBuilder<EzsigntemplatepackageCreateObjectV1Response> {
        let localVariablePath = "/1/object/ezsigntemplatepackage"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ezsigntemplatepackageCreateObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepackageCreateObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an existing Ezsigntemplatepackage
     
     - parameter pkiEzsigntemplatepackageID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepackageDeleteObjectV1(pkiEzsigntemplatepackageID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepackageDeleteObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepackageDeleteObjectV1WithRequestBuilder(pkiEzsigntemplatepackageID: pkiEzsigntemplatepackageID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an existing Ezsigntemplatepackage
     - DELETE /1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatepackageID: (path)  
     - returns: RequestBuilder<EzsigntemplatepackageDeleteObjectV1Response> 
     */
    open class func ezsigntemplatepackageDeleteObjectV1WithRequestBuilder(pkiEzsigntemplatepackageID: Int) -> RequestBuilder<EzsigntemplatepackageDeleteObjectV1Response> {
        var localVariablePath = "/1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}"
        let pkiEzsigntemplatepackageIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatepackageID))"
        let pkiEzsigntemplatepackageIDPostEscape = pkiEzsigntemplatepackageIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatepackageID}", with: pkiEzsigntemplatepackageIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepackageDeleteObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit multiple Ezsigntemplatepackagesigners
     
     - parameter pkiEzsigntemplatepackageID: (path)  
     - parameter ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepackageEditEzsigntemplatepackagesignersV1(pkiEzsigntemplatepackageID: Int, ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request: EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepackageEditEzsigntemplatepackagesignersV1WithRequestBuilder(pkiEzsigntemplatepackageID: pkiEzsigntemplatepackageID, ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request: ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit multiple Ezsigntemplatepackagesigners
     - PUT /1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}/editEzsigntemplatepackagesigners
     - Using this endpoint, you can edit multiple Ezsigntemplatepackagesigners at the same time.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatepackageID: (path)  
     - parameter ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request: (body)  
     - returns: RequestBuilder<EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response> 
     */
    open class func ezsigntemplatepackageEditEzsigntemplatepackagesignersV1WithRequestBuilder(pkiEzsigntemplatepackageID: Int, ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request: EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request) -> RequestBuilder<EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response> {
        var localVariablePath = "/1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}/editEzsigntemplatepackagesigners"
        let pkiEzsigntemplatepackageIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatepackageID))"
        let pkiEzsigntemplatepackageIDPostEscape = pkiEzsigntemplatepackageIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatepackageID}", with: pkiEzsigntemplatepackageIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit an existing Ezsigntemplatepackage
     
     - parameter pkiEzsigntemplatepackageID: (path)  
     - parameter ezsigntemplatepackageEditObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepackageEditObjectV1(pkiEzsigntemplatepackageID: Int, ezsigntemplatepackageEditObjectV1Request: EzsigntemplatepackageEditObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepackageEditObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepackageEditObjectV1WithRequestBuilder(pkiEzsigntemplatepackageID: pkiEzsigntemplatepackageID, ezsigntemplatepackageEditObjectV1Request: ezsigntemplatepackageEditObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit an existing Ezsigntemplatepackage
     - PUT /1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatepackageID: (path)  
     - parameter ezsigntemplatepackageEditObjectV1Request: (body)  
     - returns: RequestBuilder<EzsigntemplatepackageEditObjectV1Response> 
     */
    open class func ezsigntemplatepackageEditObjectV1WithRequestBuilder(pkiEzsigntemplatepackageID: Int, ezsigntemplatepackageEditObjectV1Request: EzsigntemplatepackageEditObjectV1Request) -> RequestBuilder<EzsigntemplatepackageEditObjectV1Response> {
        var localVariablePath = "/1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}"
        let pkiEzsigntemplatepackageIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatepackageID))"
        let pkiEzsigntemplatepackageIDPostEscape = pkiEzsigntemplatepackageIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatepackageID}", with: pkiEzsigntemplatepackageIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ezsigntemplatepackageEditObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepackageEditObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sSelector
     */
    public enum SSelector_ezsigntemplatepackageGetAutocompleteV2: String, CaseIterable {
        case all = "All"
        case allMultipleCopiesDisabled = "AllMultipleCopiesDisabled"
    }

    /**
     * enum for parameter eFilterActive
     */
    public enum EFilterActive_ezsigntemplatepackageGetAutocompleteV2: String, CaseIterable {
        case all = "All"
        case active = "Active"
        case inactive = "Inactive"
    }

    /**
     Retrieve Ezsigntemplatepackages and IDs
     
     - parameter sSelector: (path) The type of Ezsigntemplatepackages to return 
     - parameter eFilterActive: (query) Specify which results we want to display. (optional, default to .active)
     - parameter sQuery: (query) Allow to filter the returned results (optional)
     - parameter acceptLanguage: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepackageGetAutocompleteV2(sSelector: SSelector_ezsigntemplatepackageGetAutocompleteV2, eFilterActive: EFilterActive_ezsigntemplatepackageGetAutocompleteV2? = nil, sQuery: String? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepackageGetAutocompleteV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepackageGetAutocompleteV2WithRequestBuilder(sSelector: sSelector, eFilterActive: eFilterActive, sQuery: sQuery, acceptLanguage: acceptLanguage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Ezsigntemplatepackages and IDs
     - GET /2/object/ezsigntemplatepackage/getAutocomplete/{sSelector}
     - Get the list of Ezsigntemplatepackage to be used in a dropdown or autocomplete control.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter sSelector: (path) The type of Ezsigntemplatepackages to return 
     - parameter eFilterActive: (query) Specify which results we want to display. (optional, default to .active)
     - parameter sQuery: (query) Allow to filter the returned results (optional)
     - parameter acceptLanguage: (header)  (optional)
     - returns: RequestBuilder<EzsigntemplatepackageGetAutocompleteV2Response> 
     */
    open class func ezsigntemplatepackageGetAutocompleteV2WithRequestBuilder(sSelector: SSelector_ezsigntemplatepackageGetAutocompleteV2, eFilterActive: EFilterActive_ezsigntemplatepackageGetAutocompleteV2? = nil, sQuery: String? = nil, acceptLanguage: HeaderAcceptLanguage? = nil) -> RequestBuilder<EzsigntemplatepackageGetAutocompleteV2Response> {
        var localVariablePath = "/2/object/ezsigntemplatepackage/getAutocomplete/{sSelector}"
        let sSelectorPreEscape = "\(sSelector.rawValue)"
        let sSelectorPostEscape = sSelectorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sSelector}", with: sSelectorPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eFilterActive": (wrappedValue: eFilterActive?.encodeToJSON(), isExplode: true),
            "sQuery": (wrappedValue: sQuery?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepackageGetAutocompleteV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter eOrderBy
     */
    public enum EOrderBy_ezsigntemplatepackageGetListV1: String, CaseIterable {
        case pkiezsigntemplatepackageidAsc = "pkiEzsigntemplatepackageID_ASC"
        case pkiezsigntemplatepackageidDesc = "pkiEzsigntemplatepackageID_DESC"
        case fkiteamidAsc = "fkiTeamID_ASC"
        case fkiteamidDesc = "fkiTeamID_DESC"
        case fkiezsignfoldertypeidAsc = "fkiEzsignfoldertypeID_ASC"
        case fkiezsignfoldertypeidDesc = "fkiEzsignfoldertypeID_DESC"
        case fkilanguageidAsc = "fkiLanguageID_ASC"
        case fkilanguageidDesc = "fkiLanguageID_DESC"
        case eezsigntemplatepackagetypeAsc = "eEzsigntemplatepackageType_ASC"
        case eezsigntemplatepackagetypeDesc = "eEzsigntemplatepackageType_DESC"
        case sezsigntemplatepackagetypedescriptionxAsc = "sEzsigntemplatepackageTypedescriptionX_ASC"
        case sezsigntemplatepackagetypedescriptionxDesc = "sEzsigntemplatepackageTypedescriptionX_DESC"
        case sezsigntemplatepackagedescriptionAsc = "sEzsigntemplatepackageDescription_ASC"
        case sezsigntemplatepackagedescriptionDesc = "sEzsigntemplatepackageDescription_DESC"
        case bezsigntemplatepackageneedvalidationAsc = "bEzsigntemplatepackageNeedvalidation_ASC"
        case bezsigntemplatepackageneedvalidationDesc = "bEzsigntemplatepackageNeedvalidation_DESC"
        case iezsigntemplatepackagemembershipAsc = "iEzsigntemplatepackagemembership_ASC"
        case iezsigntemplatepackagemembershipDesc = "iEzsigntemplatepackagemembership_DESC"
        case bezsigntemplatepackageisactiveAsc = "bEzsigntemplatepackageIsactive_ASC"
        case bezsigntemplatepackageisactiveDesc = "bEzsigntemplatepackageIsactive_DESC"
    }

    /**
     Retrieve Ezsigntemplatepackage list
     
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepackageGetListV1(eOrderBy: EOrderBy_ezsigntemplatepackageGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepackageGetListV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepackageGetListV1WithRequestBuilder(eOrderBy: eOrderBy, iRowMax: iRowMax, iRowOffset: iRowOffset, acceptLanguage: acceptLanguage, sFilter: sFilter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Ezsigntemplatepackage list
     - GET /1/object/ezsigntemplatepackage/getList
     - Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepackageType | Company<br>Team<br>User<br>Usergroup |
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - returns: RequestBuilder<EzsigntemplatepackageGetListV1Response> 
     */
    open class func ezsigntemplatepackageGetListV1WithRequestBuilder(eOrderBy: EOrderBy_ezsigntemplatepackageGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil) -> RequestBuilder<EzsigntemplatepackageGetListV1Response> {
        let localVariablePath = "/1/object/ezsigntemplatepackage/getList"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eOrderBy": (wrappedValue: eOrderBy?.encodeToJSON(), isExplode: true),
            "iRowMax": (wrappedValue: iRowMax?.encodeToJSON(), isExplode: true),
            "iRowOffset": (wrappedValue: iRowOffset?.encodeToJSON(), isExplode: true),
            "sFilter": (wrappedValue: sFilter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepackageGetListV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Ezsigntemplatepackage
     
     - parameter pkiEzsigntemplatepackageID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepackageGetObjectV2(pkiEzsigntemplatepackageID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepackageGetObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepackageGetObjectV2WithRequestBuilder(pkiEzsigntemplatepackageID: pkiEzsigntemplatepackageID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Ezsigntemplatepackage
     - GET /2/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatepackageID: (path)  
     - returns: RequestBuilder<EzsigntemplatepackageGetObjectV2Response> 
     */
    open class func ezsigntemplatepackageGetObjectV2WithRequestBuilder(pkiEzsigntemplatepackageID: Int) -> RequestBuilder<EzsigntemplatepackageGetObjectV2Response> {
        var localVariablePath = "/2/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}"
        let pkiEzsigntemplatepackageIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatepackageID))"
        let pkiEzsigntemplatepackageIDPostEscape = pkiEzsigntemplatepackageIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatepackageID}", with: pkiEzsigntemplatepackageIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepackageGetObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
