//
// ObjectEzsigntemplatepublicAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectEzsigntemplatepublicAPI {

    /**
     Create an Ezsignfolder
     
     - parameter ezsigntemplatepublicCreateEzsignfolderV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepublicCreateEzsignfolderV1(ezsigntemplatepublicCreateEzsignfolderV1Request: EzsigntemplatepublicCreateEzsignfolderV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepublicCreateEzsignfolderV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepublicCreateEzsignfolderV1WithRequestBuilder(ezsigntemplatepublicCreateEzsignfolderV1Request: ezsigntemplatepublicCreateEzsignfolderV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create an Ezsignfolder
     - POST /1/object/ezsigntemplatepublic/createEzsignfolder
     - Create an Ezsignfolder
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter ezsigntemplatepublicCreateEzsignfolderV1Request: (body)  
     - returns: RequestBuilder<EzsigntemplatepublicCreateEzsignfolderV1Response> 
     */
    open class func ezsigntemplatepublicCreateEzsignfolderV1WithRequestBuilder(ezsigntemplatepublicCreateEzsignfolderV1Request: EzsigntemplatepublicCreateEzsignfolderV1Request) -> RequestBuilder<EzsigntemplatepublicCreateEzsignfolderV1Response> {
        let localVariablePath = "/1/object/ezsigntemplatepublic/createEzsignfolder"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ezsigntemplatepublicCreateEzsignfolderV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepublicCreateEzsignfolderV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a new Ezsigntemplatepublic
     
     - parameter ezsigntemplatepublicCreateObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepublicCreateObjectV1(ezsigntemplatepublicCreateObjectV1Request: EzsigntemplatepublicCreateObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepublicCreateObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepublicCreateObjectV1WithRequestBuilder(ezsigntemplatepublicCreateObjectV1Request: ezsigntemplatepublicCreateObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Ezsigntemplatepublic
     - POST /1/object/ezsigntemplatepublic
     - The endpoint allows to create one or many elements at once.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter ezsigntemplatepublicCreateObjectV1Request: (body)  
     - returns: RequestBuilder<EzsigntemplatepublicCreateObjectV1Response> 
     */
    open class func ezsigntemplatepublicCreateObjectV1WithRequestBuilder(ezsigntemplatepublicCreateObjectV1Request: EzsigntemplatepublicCreateObjectV1Request) -> RequestBuilder<EzsigntemplatepublicCreateObjectV1Response> {
        let localVariablePath = "/1/object/ezsigntemplatepublic"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ezsigntemplatepublicCreateObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepublicCreateObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an existing Ezsigntemplatepublic
     
     - parameter pkiEzsigntemplatepublicID: (path) The unique ID of the Ezsigntemplatepublic 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepublicDeleteObjectV1(pkiEzsigntemplatepublicID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepublicDeleteObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepublicDeleteObjectV1WithRequestBuilder(pkiEzsigntemplatepublicID: pkiEzsigntemplatepublicID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an existing Ezsigntemplatepublic
     - DELETE /1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatepublicID: (path) The unique ID of the Ezsigntemplatepublic 
     - returns: RequestBuilder<EzsigntemplatepublicDeleteObjectV1Response> 
     */
    open class func ezsigntemplatepublicDeleteObjectV1WithRequestBuilder(pkiEzsigntemplatepublicID: Int) -> RequestBuilder<EzsigntemplatepublicDeleteObjectV1Response> {
        var localVariablePath = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}"
        let pkiEzsigntemplatepublicIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatepublicID))"
        let pkiEzsigntemplatepublicIDPostEscape = pkiEzsigntemplatepublicIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatepublicID}", with: pkiEzsigntemplatepublicIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepublicDeleteObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit an existing Ezsigntemplatepublic
     
     - parameter pkiEzsigntemplatepublicID: (path) The unique ID of the Ezsigntemplatepublic 
     - parameter ezsigntemplatepublicEditObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepublicEditObjectV1(pkiEzsigntemplatepublicID: Int, ezsigntemplatepublicEditObjectV1Request: EzsigntemplatepublicEditObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepublicEditObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepublicEditObjectV1WithRequestBuilder(pkiEzsigntemplatepublicID: pkiEzsigntemplatepublicID, ezsigntemplatepublicEditObjectV1Request: ezsigntemplatepublicEditObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit an existing Ezsigntemplatepublic
     - PUT /1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatepublicID: (path) The unique ID of the Ezsigntemplatepublic 
     - parameter ezsigntemplatepublicEditObjectV1Request: (body)  
     - returns: RequestBuilder<EzsigntemplatepublicEditObjectV1Response> 
     */
    open class func ezsigntemplatepublicEditObjectV1WithRequestBuilder(pkiEzsigntemplatepublicID: Int, ezsigntemplatepublicEditObjectV1Request: EzsigntemplatepublicEditObjectV1Request) -> RequestBuilder<EzsigntemplatepublicEditObjectV1Response> {
        var localVariablePath = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}"
        let pkiEzsigntemplatepublicIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatepublicID))"
        let pkiEzsigntemplatepublicIDPostEscape = pkiEzsigntemplatepublicIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatepublicID}", with: pkiEzsigntemplatepublicIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ezsigntemplatepublicEditObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepublicEditObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve the Ezsigntemplatepublic details
     
     - parameter ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request: EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithRequestBuilder(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request: ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve the Ezsigntemplatepublic details
     - POST /1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails
     - Retrieve the Ezsigntemplatepublic details
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request: (body)  
     - returns: RequestBuilder<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> 
     */
    open class func ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1WithRequestBuilder(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request: EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) -> RequestBuilder<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response> {
        let localVariablePath = "/1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Ezsigntemplatepublic's forms data
     
     - parameter pkiEzsigntemplatepublicID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepublicGetFormsDataV1(pkiEzsigntemplatepublicID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepublicGetFormsDataV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepublicGetFormsDataV1WithRequestBuilder(pkiEzsigntemplatepublicID: pkiEzsigntemplatepublicID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Ezsigntemplatepublic's forms data
     - GET /1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/getFormsData
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatepublicID: (path)  
     - returns: RequestBuilder<EzsigntemplatepublicGetFormsDataV1Response> 
     */
    open class func ezsigntemplatepublicGetFormsDataV1WithRequestBuilder(pkiEzsigntemplatepublicID: Int) -> RequestBuilder<EzsigntemplatepublicGetFormsDataV1Response> {
        var localVariablePath = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/getFormsData"
        let pkiEzsigntemplatepublicIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatepublicID))"
        let pkiEzsigntemplatepublicIDPostEscape = pkiEzsigntemplatepublicIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatepublicID}", with: pkiEzsigntemplatepublicIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepublicGetFormsDataV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter eOrderBy
     */
    public enum EOrderBy_ezsigntemplatepublicGetListV1: String, CaseIterable {
        case pkiezsigntemplatepublicidAsc = "pkiEzsigntemplatepublicID_ASC"
        case pkiezsigntemplatepublicidDesc = "pkiEzsigntemplatepublicID_DESC"
        case fkiezsignfoldertypeidAsc = "fkiEzsignfoldertypeID_ASC"
        case fkiezsignfoldertypeidDesc = "fkiEzsignfoldertypeID_DESC"
        case sezsignfoldertypenamexAsc = "sEzsignfoldertypeNameX_ASC"
        case sezsignfoldertypenamexDesc = "sEzsignfoldertypeNameX_DESC"
        case fkiuserlogintypeidAsc = "fkiUserlogintypeID_ASC"
        case fkiuserlogintypeidDesc = "fkiUserlogintypeID_DESC"
        case fkiezsigntemplateidAsc = "fkiEzsigntemplateID_ASC"
        case fkiezsigntemplateidDesc = "fkiEzsigntemplateID_DESC"
        case fkiezsigntemplatepackageidAsc = "fkiEzsigntemplatepackageID_ASC"
        case fkiezsigntemplatepackageidDesc = "fkiEzsigntemplatepackageID_DESC"
        case sezsigntemplatepublicdescriptionAsc = "sEzsigntemplatepublicDescription_ASC"
        case sezsigntemplatepublicdescriptionDesc = "sEzsigntemplatepublicDescription_DESC"
        case bezsigntemplatepublicisactiveAsc = "bEzsigntemplatepublicIsactive_ASC"
        case bezsigntemplatepublicisactiveDesc = "bEzsigntemplatepublicIsactive_DESC"
        case tezsigntemplatepublicnoteAsc = "tEzsigntemplatepublicNote_ASC"
        case tezsigntemplatepublicnoteDesc = "tEzsigntemplatepublicNote_DESC"
        case eezsigntemplatepubliclimittypeAsc = "eEzsigntemplatepublicLimittype_ASC"
        case eezsigntemplatepubliclimittypeDesc = "eEzsigntemplatepublicLimittype_DESC"
        case iezsigntemplatepubliclimitAsc = "iEzsigntemplatepublicLimit_ASC"
        case iezsigntemplatepubliclimitDesc = "iEzsigntemplatepublicLimit_DESC"
        case iezsigntemplatepubliclimitexceededAsc = "iEzsigntemplatepublicLimitexceeded_ASC"
        case iezsigntemplatepubliclimitexceededDesc = "iEzsigntemplatepublicLimitexceeded_DESC"
        case dtezsigntemplatepubliclimitexceededsinceAsc = "dtEzsigntemplatepublicLimitexceededsince_ASC"
        case dtezsigntemplatepubliclimitexceededsinceDesc = "dtEzsigntemplatepublicLimitexceededsince_DESC"
        case iezsignfolderAsc = "iEzsignfolder_ASC"
        case iezsignfolderDesc = "iEzsignfolder_DESC"
        case iezsigndocumentAsc = "iEzsigndocument_ASC"
        case iezsigndocumentDesc = "iEzsigndocument_DESC"
        case sezsigntemplatepublicezsigntemplatedescriptionAsc = "sEzsigntemplatepublicEzsigntemplatedescription_ASC"
        case sezsigntemplatepublicezsigntemplatedescriptionDesc = "sEzsigntemplatepublicEzsigntemplatedescription_DESC"
    }

    /**
     Retrieve Ezsigntemplatepublic list
     
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepublicGetListV1(eOrderBy: EOrderBy_ezsigntemplatepublicGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepublicGetListV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepublicGetListV1WithRequestBuilder(eOrderBy: eOrderBy, iRowMax: iRowMax, iRowOffset: iRowOffset, acceptLanguage: acceptLanguage, sFilter: sFilter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Ezsigntemplatepublic list
     - GET /1/object/ezsigntemplatepublic/getList
     - Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsigntemplatepublicLimittype | Hour<br>Day<br>Month<br>Total |
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - returns: RequestBuilder<EzsigntemplatepublicGetListV1Response> 
     */
    open class func ezsigntemplatepublicGetListV1WithRequestBuilder(eOrderBy: EOrderBy_ezsigntemplatepublicGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil) -> RequestBuilder<EzsigntemplatepublicGetListV1Response> {
        let localVariablePath = "/1/object/ezsigntemplatepublic/getList"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eOrderBy": (wrappedValue: eOrderBy?.encodeToJSON(), isExplode: true),
            "iRowMax": (wrappedValue: iRowMax?.encodeToJSON(), isExplode: true),
            "iRowOffset": (wrappedValue: iRowOffset?.encodeToJSON(), isExplode: true),
            "sFilter": (wrappedValue: sFilter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepublicGetListV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Ezsigntemplatepublic
     
     - parameter pkiEzsigntemplatepublicID: (path) The unique ID of the Ezsigntemplatepublic 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepublicGetObjectV2(pkiEzsigntemplatepublicID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepublicGetObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepublicGetObjectV2WithRequestBuilder(pkiEzsigntemplatepublicID: pkiEzsigntemplatepublicID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Ezsigntemplatepublic
     - GET /2/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatepublicID: (path) The unique ID of the Ezsigntemplatepublic 
     - returns: RequestBuilder<EzsigntemplatepublicGetObjectV2Response> 
     */
    open class func ezsigntemplatepublicGetObjectV2WithRequestBuilder(pkiEzsigntemplatepublicID: Int) -> RequestBuilder<EzsigntemplatepublicGetObjectV2Response> {
        var localVariablePath = "/2/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}"
        let pkiEzsigntemplatepublicIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatepublicID))"
        let pkiEzsigntemplatepublicIDPostEscape = pkiEzsigntemplatepublicIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatepublicID}", with: pkiEzsigntemplatepublicIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepublicGetObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reset the limit exceeded counter
     
     - parameter pkiEzsigntemplatepublicID: (path)  
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepublicResetLimitExceededCounterV1(pkiEzsigntemplatepublicID: Int, body: AnyCodable, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepublicResetLimitExceededCounterV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepublicResetLimitExceededCounterV1WithRequestBuilder(pkiEzsigntemplatepublicID: pkiEzsigntemplatepublicID, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reset the limit exceeded counter
     - POST /1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetLimitExceededCounter
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatepublicID: (path)  
     - parameter body: (body)  
     - returns: RequestBuilder<EzsigntemplatepublicResetLimitExceededCounterV1Response> 
     */
    open class func ezsigntemplatepublicResetLimitExceededCounterV1WithRequestBuilder(pkiEzsigntemplatepublicID: Int, body: AnyCodable) -> RequestBuilder<EzsigntemplatepublicResetLimitExceededCounterV1Response> {
        var localVariablePath = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetLimitExceededCounter"
        let pkiEzsigntemplatepublicIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatepublicID))"
        let pkiEzsigntemplatepublicIDPostEscape = pkiEzsigntemplatepublicIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatepublicID}", with: pkiEzsigntemplatepublicIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepublicResetLimitExceededCounterV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reset the Ezsigntemplatepublic url
     
     - parameter pkiEzsigntemplatepublicID: (path)  
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ezsigntemplatepublicResetUrlV1(pkiEzsigntemplatepublicID: Int, body: AnyCodable, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EzsigntemplatepublicResetUrlV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return ezsigntemplatepublicResetUrlV1WithRequestBuilder(pkiEzsigntemplatepublicID: pkiEzsigntemplatepublicID, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reset the Ezsigntemplatepublic url
     - POST /1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetUrl
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiEzsigntemplatepublicID: (path)  
     - parameter body: (body)  
     - returns: RequestBuilder<EzsigntemplatepublicResetUrlV1Response> 
     */
    open class func ezsigntemplatepublicResetUrlV1WithRequestBuilder(pkiEzsigntemplatepublicID: Int, body: AnyCodable) -> RequestBuilder<EzsigntemplatepublicResetUrlV1Response> {
        var localVariablePath = "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetUrl"
        let pkiEzsigntemplatepublicIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiEzsigntemplatepublicID))"
        let pkiEzsigntemplatepublicIDPostEscape = pkiEzsigntemplatepublicIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiEzsigntemplatepublicID}", with: pkiEzsigntemplatepublicIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EzsigntemplatepublicResetUrlV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
