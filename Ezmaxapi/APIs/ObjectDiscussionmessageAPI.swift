//
// ObjectDiscussionmessageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectDiscussionmessageAPI {

    /**
     Create a new Discussionmessage
     
     - parameter discussionmessageCreateObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discussionmessageCreateObjectV1(discussionmessageCreateObjectV1Request: DiscussionmessageCreateObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DiscussionmessageCreateObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return discussionmessageCreateObjectV1WithRequestBuilder(discussionmessageCreateObjectV1Request: discussionmessageCreateObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Discussionmessage
     - POST /1/object/discussionmessage
     - The endpoint allows to create one or many elements at once.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter discussionmessageCreateObjectV1Request: (body)  
     - returns: RequestBuilder<DiscussionmessageCreateObjectV1Response> 
     */
    open class func discussionmessageCreateObjectV1WithRequestBuilder(discussionmessageCreateObjectV1Request: DiscussionmessageCreateObjectV1Request) -> RequestBuilder<DiscussionmessageCreateObjectV1Response> {
        let localVariablePath = "/1/object/discussionmessage"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: discussionmessageCreateObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DiscussionmessageCreateObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an existing Discussionmessage
     
     - parameter pkiDiscussionmessageID: (path) The unique ID of the Discussionmessage 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discussionmessageDeleteObjectV1(pkiDiscussionmessageID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommonResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return discussionmessageDeleteObjectV1WithRequestBuilder(pkiDiscussionmessageID: pkiDiscussionmessageID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an existing Discussionmessage
     - DELETE /1/object/discussionmessage/{pkiDiscussionmessageID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiDiscussionmessageID: (path) The unique ID of the Discussionmessage 
     - returns: RequestBuilder<CommonResponse> 
     */
    open class func discussionmessageDeleteObjectV1WithRequestBuilder(pkiDiscussionmessageID: Int) -> RequestBuilder<CommonResponse> {
        var localVariablePath = "/1/object/discussionmessage/{pkiDiscussionmessageID}"
        let pkiDiscussionmessageIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiDiscussionmessageID))"
        let pkiDiscussionmessageIDPostEscape = pkiDiscussionmessageIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiDiscussionmessageID}", with: pkiDiscussionmessageIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommonResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patch an existing Discussionmessage
     
     - parameter pkiDiscussionmessageID: (path) The unique ID of the Discussionmessage 
     - parameter discussionmessagePatchObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discussionmessagePatchObjectV1(pkiDiscussionmessageID: Int, discussionmessagePatchObjectV1Request: DiscussionmessagePatchObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommonResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return discussionmessagePatchObjectV1WithRequestBuilder(pkiDiscussionmessageID: pkiDiscussionmessageID, discussionmessagePatchObjectV1Request: discussionmessagePatchObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patch an existing Discussionmessage
     - PATCH /1/object/discussionmessage/{pkiDiscussionmessageID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiDiscussionmessageID: (path) The unique ID of the Discussionmessage 
     - parameter discussionmessagePatchObjectV1Request: (body)  
     - returns: RequestBuilder<CommonResponse> 
     */
    open class func discussionmessagePatchObjectV1WithRequestBuilder(pkiDiscussionmessageID: Int, discussionmessagePatchObjectV1Request: DiscussionmessagePatchObjectV1Request) -> RequestBuilder<CommonResponse> {
        var localVariablePath = "/1/object/discussionmessage/{pkiDiscussionmessageID}"
        let pkiDiscussionmessageIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiDiscussionmessageID))"
        let pkiDiscussionmessageIDPostEscape = pkiDiscussionmessageIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiDiscussionmessageID}", with: pkiDiscussionmessageIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: discussionmessagePatchObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommonResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
