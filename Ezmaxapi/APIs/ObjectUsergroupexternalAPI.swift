//
// ObjectUsergroupexternalAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectUsergroupexternalAPI {

    /**
     Create a new Usergroupexternal
     
     - parameter usergroupexternalCreateObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupexternalCreateObjectV1(usergroupexternalCreateObjectV1Request: UsergroupexternalCreateObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupexternalCreateObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupexternalCreateObjectV1WithRequestBuilder(usergroupexternalCreateObjectV1Request: usergroupexternalCreateObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Usergroupexternal
     - POST /1/object/usergroupexternal
     - The endpoint allows to create one or many elements at once.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter usergroupexternalCreateObjectV1Request: (body)  
     - returns: RequestBuilder<UsergroupexternalCreateObjectV1Response> 
     */
    open class func usergroupexternalCreateObjectV1WithRequestBuilder(usergroupexternalCreateObjectV1Request: UsergroupexternalCreateObjectV1Request) -> RequestBuilder<UsergroupexternalCreateObjectV1Response> {
        let localVariablePath = "/1/object/usergroupexternal"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usergroupexternalCreateObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupexternalCreateObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an existing Usergroupexternal
     
     - parameter pkiUsergroupexternalID: (path) The unique ID of the Usergroupexternal 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupexternalDeleteObjectV1(pkiUsergroupexternalID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommonResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupexternalDeleteObjectV1WithRequestBuilder(pkiUsergroupexternalID: pkiUsergroupexternalID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an existing Usergroupexternal
     - DELETE /1/object/usergroupexternal/{pkiUsergroupexternalID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupexternalID: (path) The unique ID of the Usergroupexternal 
     - returns: RequestBuilder<CommonResponse> 
     */
    open class func usergroupexternalDeleteObjectV1WithRequestBuilder(pkiUsergroupexternalID: Int) -> RequestBuilder<CommonResponse> {
        var localVariablePath = "/1/object/usergroupexternal/{pkiUsergroupexternalID}"
        let pkiUsergroupexternalIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupexternalID))"
        let pkiUsergroupexternalIDPostEscape = pkiUsergroupexternalIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupexternalID}", with: pkiUsergroupexternalIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommonResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit an existing Usergroupexternal
     
     - parameter pkiUsergroupexternalID: (path) The unique ID of the Usergroupexternal 
     - parameter usergroupexternalEditObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupexternalEditObjectV1(pkiUsergroupexternalID: Int, usergroupexternalEditObjectV1Request: UsergroupexternalEditObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommonResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupexternalEditObjectV1WithRequestBuilder(pkiUsergroupexternalID: pkiUsergroupexternalID, usergroupexternalEditObjectV1Request: usergroupexternalEditObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit an existing Usergroupexternal
     - PUT /1/object/usergroupexternal/{pkiUsergroupexternalID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupexternalID: (path) The unique ID of the Usergroupexternal 
     - parameter usergroupexternalEditObjectV1Request: (body)  
     - returns: RequestBuilder<CommonResponse> 
     */
    open class func usergroupexternalEditObjectV1WithRequestBuilder(pkiUsergroupexternalID: Int, usergroupexternalEditObjectV1Request: UsergroupexternalEditObjectV1Request) -> RequestBuilder<CommonResponse> {
        var localVariablePath = "/1/object/usergroupexternal/{pkiUsergroupexternalID}"
        let pkiUsergroupexternalIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupexternalID))"
        let pkiUsergroupexternalIDPostEscape = pkiUsergroupexternalIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupexternalID}", with: pkiUsergroupexternalIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usergroupexternalEditObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommonResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sSelector
     */
    public enum SSelector_usergroupexternalGetAutocompleteV2: String, CaseIterable {
        case all = "All"
    }

    /**
     * enum for parameter eFilterActive
     */
    public enum EFilterActive_usergroupexternalGetAutocompleteV2: String, CaseIterable {
        case all = "All"
        case active = "Active"
        case inactive = "Inactive"
    }

    /**
     Retrieve Usergroupexternals and IDs
     
     - parameter sSelector: (path) The type of Usergroupexternals to return 
     - parameter eFilterActive: (query) Specify which results we want to display. (optional, default to .active)
     - parameter sQuery: (query) Allow to filter the returned results (optional)
     - parameter acceptLanguage: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupexternalGetAutocompleteV2(sSelector: SSelector_usergroupexternalGetAutocompleteV2, eFilterActive: EFilterActive_usergroupexternalGetAutocompleteV2? = nil, sQuery: String? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupexternalGetAutocompleteV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupexternalGetAutocompleteV2WithRequestBuilder(sSelector: sSelector, eFilterActive: eFilterActive, sQuery: sQuery, acceptLanguage: acceptLanguage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Usergroupexternals and IDs
     - GET /2/object/usergroupexternal/getAutocomplete/{sSelector}
     - Get the list of Usergroupexternal to be used in a dropdown or autocomplete control.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter sSelector: (path) The type of Usergroupexternals to return 
     - parameter eFilterActive: (query) Specify which results we want to display. (optional, default to .active)
     - parameter sQuery: (query) Allow to filter the returned results (optional)
     - parameter acceptLanguage: (header)  (optional)
     - returns: RequestBuilder<UsergroupexternalGetAutocompleteV2Response> 
     */
    open class func usergroupexternalGetAutocompleteV2WithRequestBuilder(sSelector: SSelector_usergroupexternalGetAutocompleteV2, eFilterActive: EFilterActive_usergroupexternalGetAutocompleteV2? = nil, sQuery: String? = nil, acceptLanguage: HeaderAcceptLanguage? = nil) -> RequestBuilder<UsergroupexternalGetAutocompleteV2Response> {
        var localVariablePath = "/2/object/usergroupexternal/getAutocomplete/{sSelector}"
        let sSelectorPreEscape = "\(sSelector.rawValue)"
        let sSelectorPostEscape = sSelectorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sSelector}", with: sSelectorPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eFilterActive": (wrappedValue: eFilterActive?.encodeToJSON(), isExplode: true),
            "sQuery": (wrappedValue: sQuery?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupexternalGetAutocompleteV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter eOrderBy
     */
    public enum EOrderBy_usergroupexternalGetListV1: String, CaseIterable {
        case pkiusergroupexternalidAsc = "pkiUsergroupexternalID_ASC"
        case pkiusergroupexternalidDesc = "pkiUsergroupexternalID_DESC"
        case susergroupexternalnameAsc = "sUsergroupexternalName_ASC"
        case susergroupexternalnameDesc = "sUsergroupexternalName_DESC"
        case susergroupexternalidAsc = "sUsergroupexternalID_ASC"
        case susergroupexternalidDesc = "sUsergroupexternalID_DESC"
    }

    /**
     Retrieve Usergroupexternal list
     
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupexternalGetListV1(eOrderBy: EOrderBy_usergroupexternalGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupexternalGetListV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupexternalGetListV1WithRequestBuilder(eOrderBy: eOrderBy, iRowMax: iRowMax, iRowOffset: iRowOffset, acceptLanguage: acceptLanguage, sFilter: sFilter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Usergroupexternal list
     - GET /1/object/usergroupexternal/getList
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - returns: RequestBuilder<UsergroupexternalGetListV1Response> 
     */
    open class func usergroupexternalGetListV1WithRequestBuilder(eOrderBy: EOrderBy_usergroupexternalGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil) -> RequestBuilder<UsergroupexternalGetListV1Response> {
        let localVariablePath = "/1/object/usergroupexternal/getList"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eOrderBy": (wrappedValue: eOrderBy?.encodeToJSON(), isExplode: true),
            "iRowMax": (wrappedValue: iRowMax?.encodeToJSON(), isExplode: true),
            "iRowOffset": (wrappedValue: iRowOffset?.encodeToJSON(), isExplode: true),
            "sFilter": (wrappedValue: sFilter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupexternalGetListV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Usergroupexternal
     
     - parameter pkiUsergroupexternalID: (path) The unique ID of the Usergroupexternal 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupexternalGetObjectV2(pkiUsergroupexternalID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupexternalGetObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupexternalGetObjectV2WithRequestBuilder(pkiUsergroupexternalID: pkiUsergroupexternalID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Usergroupexternal
     - GET /2/object/usergroupexternal/{pkiUsergroupexternalID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupexternalID: (path) The unique ID of the Usergroupexternal 
     - returns: RequestBuilder<UsergroupexternalGetObjectV2Response> 
     */
    open class func usergroupexternalGetObjectV2WithRequestBuilder(pkiUsergroupexternalID: Int) -> RequestBuilder<UsergroupexternalGetObjectV2Response> {
        var localVariablePath = "/2/object/usergroupexternal/{pkiUsergroupexternalID}"
        let pkiUsergroupexternalIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupexternalID))"
        let pkiUsergroupexternalIDPostEscape = pkiUsergroupexternalIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupexternalID}", with: pkiUsergroupexternalIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupexternalGetObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Usergroupexternal's Usergroupexternalmemberships
     
     - parameter pkiUsergroupexternalID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupexternalGetUsergroupexternalmembershipsV1(pkiUsergroupexternalID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupexternalGetUsergroupexternalmembershipsV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupexternalGetUsergroupexternalmembershipsV1WithRequestBuilder(pkiUsergroupexternalID: pkiUsergroupexternalID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Usergroupexternal's Usergroupexternalmemberships
     - GET /1/object/usergroupexternal/{pkiUsergroupexternalID}/getUsergroupexternalmemberships
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupexternalID: (path)  
     - returns: RequestBuilder<UsergroupexternalGetUsergroupexternalmembershipsV1Response> 
     */
    open class func usergroupexternalGetUsergroupexternalmembershipsV1WithRequestBuilder(pkiUsergroupexternalID: Int) -> RequestBuilder<UsergroupexternalGetUsergroupexternalmembershipsV1Response> {
        var localVariablePath = "/1/object/usergroupexternal/{pkiUsergroupexternalID}/getUsergroupexternalmemberships"
        let pkiUsergroupexternalIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupexternalID))"
        let pkiUsergroupexternalIDPostEscape = pkiUsergroupexternalIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupexternalID}", with: pkiUsergroupexternalIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupexternalGetUsergroupexternalmembershipsV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Usergroupexternal's Usergroups
     
     - parameter pkiUsergroupexternalID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupexternalGetUsergroupsV1(pkiUsergroupexternalID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupexternalGetUsergroupsV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupexternalGetUsergroupsV1WithRequestBuilder(pkiUsergroupexternalID: pkiUsergroupexternalID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Usergroupexternal's Usergroups
     - GET /1/object/usergroupexternal/{pkiUsergroupexternalID}/getUsergroups
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupexternalID: (path)  
     - returns: RequestBuilder<UsergroupexternalGetUsergroupsV1Response> 
     */
    open class func usergroupexternalGetUsergroupsV1WithRequestBuilder(pkiUsergroupexternalID: Int) -> RequestBuilder<UsergroupexternalGetUsergroupsV1Response> {
        var localVariablePath = "/1/object/usergroupexternal/{pkiUsergroupexternalID}/getUsergroups"
        let pkiUsergroupexternalIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupexternalID))"
        let pkiUsergroupexternalIDPostEscape = pkiUsergroupexternalIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupexternalID}", with: pkiUsergroupexternalIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupexternalGetUsergroupsV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
