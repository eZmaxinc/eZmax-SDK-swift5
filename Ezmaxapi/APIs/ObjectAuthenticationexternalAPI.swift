//
// ObjectAuthenticationexternalAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectAuthenticationexternalAPI {

    /**
     Create a new Authenticationexternal
     
     - parameter authenticationexternalCreateObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticationexternalCreateObjectV1(authenticationexternalCreateObjectV1Request: AuthenticationexternalCreateObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticationexternalCreateObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticationexternalCreateObjectV1WithRequestBuilder(authenticationexternalCreateObjectV1Request: authenticationexternalCreateObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Authenticationexternal
     - POST /1/object/authenticationexternal
     - The endpoint allows to create one or many elements at once.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter authenticationexternalCreateObjectV1Request: (body)  
     - returns: RequestBuilder<AuthenticationexternalCreateObjectV1Response> 
     */
    open class func authenticationexternalCreateObjectV1WithRequestBuilder(authenticationexternalCreateObjectV1Request: AuthenticationexternalCreateObjectV1Request) -> RequestBuilder<AuthenticationexternalCreateObjectV1Response> {
        let localVariablePath = "/1/object/authenticationexternal"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticationexternalCreateObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticationexternalCreateObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an existing Authenticationexternal
     
     - parameter pkiAuthenticationexternalID: (path) The unique ID of the Authenticationexternal 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticationexternalDeleteObjectV1(pkiAuthenticationexternalID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommonResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticationexternalDeleteObjectV1WithRequestBuilder(pkiAuthenticationexternalID: pkiAuthenticationexternalID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an existing Authenticationexternal
     - DELETE /1/object/authenticationexternal/{pkiAuthenticationexternalID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiAuthenticationexternalID: (path) The unique ID of the Authenticationexternal 
     - returns: RequestBuilder<CommonResponse> 
     */
    open class func authenticationexternalDeleteObjectV1WithRequestBuilder(pkiAuthenticationexternalID: Int) -> RequestBuilder<CommonResponse> {
        var localVariablePath = "/1/object/authenticationexternal/{pkiAuthenticationexternalID}"
        let pkiAuthenticationexternalIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiAuthenticationexternalID))"
        let pkiAuthenticationexternalIDPostEscape = pkiAuthenticationexternalIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiAuthenticationexternalID}", with: pkiAuthenticationexternalIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommonResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit an existing Authenticationexternal
     
     - parameter pkiAuthenticationexternalID: (path) The unique ID of the Authenticationexternal 
     - parameter authenticationexternalEditObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticationexternalEditObjectV1(pkiAuthenticationexternalID: Int, authenticationexternalEditObjectV1Request: AuthenticationexternalEditObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommonResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticationexternalEditObjectV1WithRequestBuilder(pkiAuthenticationexternalID: pkiAuthenticationexternalID, authenticationexternalEditObjectV1Request: authenticationexternalEditObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit an existing Authenticationexternal
     - PUT /1/object/authenticationexternal/{pkiAuthenticationexternalID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiAuthenticationexternalID: (path) The unique ID of the Authenticationexternal 
     - parameter authenticationexternalEditObjectV1Request: (body)  
     - returns: RequestBuilder<CommonResponse> 
     */
    open class func authenticationexternalEditObjectV1WithRequestBuilder(pkiAuthenticationexternalID: Int, authenticationexternalEditObjectV1Request: AuthenticationexternalEditObjectV1Request) -> RequestBuilder<CommonResponse> {
        var localVariablePath = "/1/object/authenticationexternal/{pkiAuthenticationexternalID}"
        let pkiAuthenticationexternalIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiAuthenticationexternalID))"
        let pkiAuthenticationexternalIDPostEscape = pkiAuthenticationexternalIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiAuthenticationexternalID}", with: pkiAuthenticationexternalIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticationexternalEditObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommonResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sSelector
     */
    public enum SSelector_authenticationexternalGetAutocompleteV2: String, CaseIterable {
        case all = "All"
    }

    /**
     * enum for parameter eFilterActive
     */
    public enum EFilterActive_authenticationexternalGetAutocompleteV2: String, CaseIterable {
        case all = "All"
        case active = "Active"
        case inactive = "Inactive"
    }

    /**
     Retrieve Authenticationexternals and IDs
     
     - parameter sSelector: (path) The type of Authenticationexternals to return 
     - parameter eFilterActive: (query) Specify which results we want to display. (optional, default to .active)
     - parameter sQuery: (query) Allow to filter the returned results (optional)
     - parameter acceptLanguage: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticationexternalGetAutocompleteV2(sSelector: SSelector_authenticationexternalGetAutocompleteV2, eFilterActive: EFilterActive_authenticationexternalGetAutocompleteV2? = nil, sQuery: String? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticationexternalGetAutocompleteV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticationexternalGetAutocompleteV2WithRequestBuilder(sSelector: sSelector, eFilterActive: eFilterActive, sQuery: sQuery, acceptLanguage: acceptLanguage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Authenticationexternals and IDs
     - GET /2/object/authenticationexternal/getAutocomplete/{sSelector}
     - Get the list of Authenticationexternal to be used in a dropdown or autocomplete control.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter sSelector: (path) The type of Authenticationexternals to return 
     - parameter eFilterActive: (query) Specify which results we want to display. (optional, default to .active)
     - parameter sQuery: (query) Allow to filter the returned results (optional)
     - parameter acceptLanguage: (header)  (optional)
     - returns: RequestBuilder<AuthenticationexternalGetAutocompleteV2Response> 
     */
    open class func authenticationexternalGetAutocompleteV2WithRequestBuilder(sSelector: SSelector_authenticationexternalGetAutocompleteV2, eFilterActive: EFilterActive_authenticationexternalGetAutocompleteV2? = nil, sQuery: String? = nil, acceptLanguage: HeaderAcceptLanguage? = nil) -> RequestBuilder<AuthenticationexternalGetAutocompleteV2Response> {
        var localVariablePath = "/2/object/authenticationexternal/getAutocomplete/{sSelector}"
        let sSelectorPreEscape = "\(sSelector.rawValue)"
        let sSelectorPostEscape = sSelectorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sSelector}", with: sSelectorPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eFilterActive": (wrappedValue: eFilterActive?.encodeToJSON(), isExplode: true),
            "sQuery": (wrappedValue: sQuery?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticationexternalGetAutocompleteV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter eOrderBy
     */
    public enum EOrderBy_authenticationexternalGetListV1: String, CaseIterable {
        case pkiauthenticationexternalidAsc = "pkiAuthenticationexternalID_ASC"
        case pkiauthenticationexternalidDesc = "pkiAuthenticationexternalID_DESC"
        case sauthenticationexternaldescriptionAsc = "sAuthenticationexternalDescription_ASC"
        case sauthenticationexternaldescriptionDesc = "sAuthenticationexternalDescription_DESC"
        case eauthenticationexternaltypeAsc = "eAuthenticationexternalType_ASC"
        case eauthenticationexternaltypeDesc = "eAuthenticationexternalType_DESC"
    }

    /**
     Retrieve Authenticationexternal list
     
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticationexternalGetListV1(eOrderBy: EOrderBy_authenticationexternalGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticationexternalGetListV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticationexternalGetListV1WithRequestBuilder(eOrderBy: eOrderBy, iRowMax: iRowMax, iRowOffset: iRowOffset, acceptLanguage: acceptLanguage, sFilter: sFilter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Authenticationexternal list
     - GET /1/object/authenticationexternal/getList
     - Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eAuthenticationexternalType | Salesforce<br>SalesforceSandbox |
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - returns: RequestBuilder<AuthenticationexternalGetListV1Response> 
     */
    open class func authenticationexternalGetListV1WithRequestBuilder(eOrderBy: EOrderBy_authenticationexternalGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil) -> RequestBuilder<AuthenticationexternalGetListV1Response> {
        let localVariablePath = "/1/object/authenticationexternal/getList"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eOrderBy": (wrappedValue: eOrderBy?.encodeToJSON(), isExplode: true),
            "iRowMax": (wrappedValue: iRowMax?.encodeToJSON(), isExplode: true),
            "iRowOffset": (wrappedValue: iRowOffset?.encodeToJSON(), isExplode: true),
            "sFilter": (wrappedValue: sFilter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticationexternalGetListV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Authenticationexternal
     
     - parameter pkiAuthenticationexternalID: (path) The unique ID of the Authenticationexternal 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticationexternalGetObjectV2(pkiAuthenticationexternalID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenticationexternalGetObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticationexternalGetObjectV2WithRequestBuilder(pkiAuthenticationexternalID: pkiAuthenticationexternalID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Authenticationexternal
     - GET /2/object/authenticationexternal/{pkiAuthenticationexternalID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiAuthenticationexternalID: (path) The unique ID of the Authenticationexternal 
     - returns: RequestBuilder<AuthenticationexternalGetObjectV2Response> 
     */
    open class func authenticationexternalGetObjectV2WithRequestBuilder(pkiAuthenticationexternalID: Int) -> RequestBuilder<AuthenticationexternalGetObjectV2Response> {
        var localVariablePath = "/2/object/authenticationexternal/{pkiAuthenticationexternalID}"
        let pkiAuthenticationexternalIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiAuthenticationexternalID))"
        let pkiAuthenticationexternalIDPostEscape = pkiAuthenticationexternalIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiAuthenticationexternalID}", with: pkiAuthenticationexternalIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticationexternalGetObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reset the Authenticationexternal authorization
     
     - parameter pkiAuthenticationexternalID: (path)  
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authenticationexternalResetAuthorizationV1(pkiAuthenticationexternalID: Int, body: AnyCodable, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommonResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return authenticationexternalResetAuthorizationV1WithRequestBuilder(pkiAuthenticationexternalID: pkiAuthenticationexternalID, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reset the Authenticationexternal authorization
     - POST /1/object/authenticationexternal/{pkiAuthenticationexternalID}/resetAuthorization
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiAuthenticationexternalID: (path)  
     - parameter body: (body)  
     - returns: RequestBuilder<CommonResponse> 
     */
    open class func authenticationexternalResetAuthorizationV1WithRequestBuilder(pkiAuthenticationexternalID: Int, body: AnyCodable) -> RequestBuilder<CommonResponse> {
        var localVariablePath = "/1/object/authenticationexternal/{pkiAuthenticationexternalID}/resetAuthorization"
        let pkiAuthenticationexternalIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiAuthenticationexternalID))"
        let pkiAuthenticationexternalIDPostEscape = pkiAuthenticationexternalIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiAuthenticationexternalID}", with: pkiAuthenticationexternalIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommonResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
