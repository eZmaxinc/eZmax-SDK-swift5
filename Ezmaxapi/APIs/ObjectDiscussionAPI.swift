//
// ObjectDiscussionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectDiscussionAPI {

    /**
     Create a new Discussion
     
     - parameter discussionCreateObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discussionCreateObjectV1(discussionCreateObjectV1Request: DiscussionCreateObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DiscussionCreateObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return discussionCreateObjectV1WithRequestBuilder(discussionCreateObjectV1Request: discussionCreateObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Discussion
     - POST /1/object/discussion
     - The endpoint allows to create one or many elements at once.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter discussionCreateObjectV1Request: (body)  
     - returns: RequestBuilder<DiscussionCreateObjectV1Response> 
     */
    open class func discussionCreateObjectV1WithRequestBuilder(discussionCreateObjectV1Request: DiscussionCreateObjectV1Request) -> RequestBuilder<DiscussionCreateObjectV1Response> {
        let localVariablePath = "/1/object/discussion"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: discussionCreateObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DiscussionCreateObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an existing Discussion
     
     - parameter pkiDiscussionID: (path) The unique ID of the Discussion 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discussionDeleteObjectV1(pkiDiscussionID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DiscussionDeleteObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return discussionDeleteObjectV1WithRequestBuilder(pkiDiscussionID: pkiDiscussionID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an existing Discussion
     - DELETE /1/object/discussion/{pkiDiscussionID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiDiscussionID: (path) The unique ID of the Discussion 
     - returns: RequestBuilder<DiscussionDeleteObjectV1Response> 
     */
    open class func discussionDeleteObjectV1WithRequestBuilder(pkiDiscussionID: Int) -> RequestBuilder<DiscussionDeleteObjectV1Response> {
        var localVariablePath = "/1/object/discussion/{pkiDiscussionID}"
        let pkiDiscussionIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiDiscussionID))"
        let pkiDiscussionIDPostEscape = pkiDiscussionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiDiscussionID}", with: pkiDiscussionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DiscussionDeleteObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Discussion
     
     - parameter pkiDiscussionID: (path) The unique ID of the Discussion 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discussionGetObjectV2(pkiDiscussionID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DiscussionGetObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return discussionGetObjectV2WithRequestBuilder(pkiDiscussionID: pkiDiscussionID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Discussion
     - GET /2/object/discussion/{pkiDiscussionID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiDiscussionID: (path) The unique ID of the Discussion 
     - returns: RequestBuilder<DiscussionGetObjectV2Response> 
     */
    open class func discussionGetObjectV2WithRequestBuilder(pkiDiscussionID: Int) -> RequestBuilder<DiscussionGetObjectV2Response> {
        var localVariablePath = "/2/object/discussion/{pkiDiscussionID}"
        let pkiDiscussionIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiDiscussionID))"
        let pkiDiscussionIDPostEscape = pkiDiscussionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiDiscussionID}", with: pkiDiscussionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DiscussionGetObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patch an existing Discussion
     
     - parameter pkiDiscussionID: (path) The unique ID of the Discussion 
     - parameter discussionPatchObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discussionPatchObjectV1(pkiDiscussionID: Int, discussionPatchObjectV1Request: DiscussionPatchObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DiscussionPatchObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return discussionPatchObjectV1WithRequestBuilder(pkiDiscussionID: pkiDiscussionID, discussionPatchObjectV1Request: discussionPatchObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patch an existing Discussion
     - PATCH /1/object/discussion/{pkiDiscussionID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiDiscussionID: (path) The unique ID of the Discussion 
     - parameter discussionPatchObjectV1Request: (body)  
     - returns: RequestBuilder<DiscussionPatchObjectV1Response> 
     */
    open class func discussionPatchObjectV1WithRequestBuilder(pkiDiscussionID: Int, discussionPatchObjectV1Request: DiscussionPatchObjectV1Request) -> RequestBuilder<DiscussionPatchObjectV1Response> {
        var localVariablePath = "/1/object/discussion/{pkiDiscussionID}"
        let pkiDiscussionIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiDiscussionID))"
        let pkiDiscussionIDPostEscape = pkiDiscussionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiDiscussionID}", with: pkiDiscussionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: discussionPatchObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DiscussionPatchObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update the read status of the discussion
     
     - parameter pkiDiscussionID: (path)  
     - parameter discussionUpdateDiscussionreadstatusV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func discussionUpdateDiscussionreadstatusV1(pkiDiscussionID: Int, discussionUpdateDiscussionreadstatusV1Request: DiscussionUpdateDiscussionreadstatusV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DiscussionUpdateDiscussionreadstatusV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return discussionUpdateDiscussionreadstatusV1WithRequestBuilder(pkiDiscussionID: pkiDiscussionID, discussionUpdateDiscussionreadstatusV1Request: discussionUpdateDiscussionreadstatusV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update the read status of the discussion
     - POST /1/object/discussion/{pkiDiscussionID}/updateDiscussionreadstatus
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiDiscussionID: (path)  
     - parameter discussionUpdateDiscussionreadstatusV1Request: (body)  
     - returns: RequestBuilder<DiscussionUpdateDiscussionreadstatusV1Response> 
     */
    open class func discussionUpdateDiscussionreadstatusV1WithRequestBuilder(pkiDiscussionID: Int, discussionUpdateDiscussionreadstatusV1Request: DiscussionUpdateDiscussionreadstatusV1Request) -> RequestBuilder<DiscussionUpdateDiscussionreadstatusV1Response> {
        var localVariablePath = "/1/object/discussion/{pkiDiscussionID}/updateDiscussionreadstatus"
        let pkiDiscussionIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiDiscussionID))"
        let pkiDiscussionIDPostEscape = pkiDiscussionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiDiscussionID}", with: pkiDiscussionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: discussionUpdateDiscussionreadstatusV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DiscussionUpdateDiscussionreadstatusV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
