//
// ObjectCreditcardmerchantAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectCreditcardmerchantAPI {

    /**
     Create a new Creditcardmerchant
     
     - parameter creditcardmerchantCreateObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditcardmerchantCreateObjectV1(creditcardmerchantCreateObjectV1Request: CreditcardmerchantCreateObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditcardmerchantCreateObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditcardmerchantCreateObjectV1WithRequestBuilder(creditcardmerchantCreateObjectV1Request: creditcardmerchantCreateObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Creditcardmerchant
     - POST /1/object/creditcardmerchant
     - The endpoint allows to create one or many elements at once.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter creditcardmerchantCreateObjectV1Request: (body)  
     - returns: RequestBuilder<CreditcardmerchantCreateObjectV1Response> 
     */
    open class func creditcardmerchantCreateObjectV1WithRequestBuilder(creditcardmerchantCreateObjectV1Request: CreditcardmerchantCreateObjectV1Request) -> RequestBuilder<CreditcardmerchantCreateObjectV1Response> {
        let localVariablePath = "/1/object/creditcardmerchant"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditcardmerchantCreateObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditcardmerchantCreateObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an existing Creditcardmerchant
     
     - parameter pkiCreditcardmerchantID: (path) The unique ID of the Creditcardmerchant 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditcardmerchantDeleteObjectV1(pkiCreditcardmerchantID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditcardmerchantDeleteObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditcardmerchantDeleteObjectV1WithRequestBuilder(pkiCreditcardmerchantID: pkiCreditcardmerchantID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an existing Creditcardmerchant
     - DELETE /1/object/creditcardmerchant/{pkiCreditcardmerchantID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiCreditcardmerchantID: (path) The unique ID of the Creditcardmerchant 
     - returns: RequestBuilder<CreditcardmerchantDeleteObjectV1Response> 
     */
    open class func creditcardmerchantDeleteObjectV1WithRequestBuilder(pkiCreditcardmerchantID: Int) -> RequestBuilder<CreditcardmerchantDeleteObjectV1Response> {
        var localVariablePath = "/1/object/creditcardmerchant/{pkiCreditcardmerchantID}"
        let pkiCreditcardmerchantIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiCreditcardmerchantID))"
        let pkiCreditcardmerchantIDPostEscape = pkiCreditcardmerchantIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiCreditcardmerchantID}", with: pkiCreditcardmerchantIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditcardmerchantDeleteObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit an existing Creditcardmerchant
     
     - parameter pkiCreditcardmerchantID: (path) The unique ID of the Creditcardmerchant 
     - parameter creditcardmerchantEditObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditcardmerchantEditObjectV1(pkiCreditcardmerchantID: Int, creditcardmerchantEditObjectV1Request: CreditcardmerchantEditObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditcardmerchantEditObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditcardmerchantEditObjectV1WithRequestBuilder(pkiCreditcardmerchantID: pkiCreditcardmerchantID, creditcardmerchantEditObjectV1Request: creditcardmerchantEditObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit an existing Creditcardmerchant
     - PUT /1/object/creditcardmerchant/{pkiCreditcardmerchantID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiCreditcardmerchantID: (path) The unique ID of the Creditcardmerchant 
     - parameter creditcardmerchantEditObjectV1Request: (body)  
     - returns: RequestBuilder<CreditcardmerchantEditObjectV1Response> 
     */
    open class func creditcardmerchantEditObjectV1WithRequestBuilder(pkiCreditcardmerchantID: Int, creditcardmerchantEditObjectV1Request: CreditcardmerchantEditObjectV1Request) -> RequestBuilder<CreditcardmerchantEditObjectV1Response> {
        var localVariablePath = "/1/object/creditcardmerchant/{pkiCreditcardmerchantID}"
        let pkiCreditcardmerchantIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiCreditcardmerchantID))"
        let pkiCreditcardmerchantIDPostEscape = pkiCreditcardmerchantIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiCreditcardmerchantID}", with: pkiCreditcardmerchantIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: creditcardmerchantEditObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditcardmerchantEditObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sSelector
     */
    public enum SSelector_creditcardmerchantGetAutocompleteV2: String, CaseIterable {
        case all = "All"
    }

    /**
     * enum for parameter eFilterActive
     */
    public enum EFilterActive_creditcardmerchantGetAutocompleteV2: String, CaseIterable {
        case all = "All"
        case active = "Active"
        case inactive = "Inactive"
    }

    /**
     Retrieve Creditcardmerchants and IDs
     
     - parameter sSelector: (path) The type of Creditcardmerchants to return 
     - parameter eFilterActive: (query) Specify which results we want to display. (optional, default to .active)
     - parameter sQuery: (query) Allow to filter the returned results (optional)
     - parameter acceptLanguage: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditcardmerchantGetAutocompleteV2(sSelector: SSelector_creditcardmerchantGetAutocompleteV2, eFilterActive: EFilterActive_creditcardmerchantGetAutocompleteV2? = nil, sQuery: String? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditcardmerchantGetAutocompleteV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditcardmerchantGetAutocompleteV2WithRequestBuilder(sSelector: sSelector, eFilterActive: eFilterActive, sQuery: sQuery, acceptLanguage: acceptLanguage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Creditcardmerchants and IDs
     - GET /2/object/creditcardmerchant/getAutocomplete/{sSelector}
     - Get the list of Creditcardmerchant to be used in a dropdown or autocomplete control.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter sSelector: (path) The type of Creditcardmerchants to return 
     - parameter eFilterActive: (query) Specify which results we want to display. (optional, default to .active)
     - parameter sQuery: (query) Allow to filter the returned results (optional)
     - parameter acceptLanguage: (header)  (optional)
     - returns: RequestBuilder<CreditcardmerchantGetAutocompleteV2Response> 
     */
    open class func creditcardmerchantGetAutocompleteV2WithRequestBuilder(sSelector: SSelector_creditcardmerchantGetAutocompleteV2, eFilterActive: EFilterActive_creditcardmerchantGetAutocompleteV2? = nil, sQuery: String? = nil, acceptLanguage: HeaderAcceptLanguage? = nil) -> RequestBuilder<CreditcardmerchantGetAutocompleteV2Response> {
        var localVariablePath = "/2/object/creditcardmerchant/getAutocomplete/{sSelector}"
        let sSelectorPreEscape = "\(sSelector.rawValue)"
        let sSelectorPostEscape = sSelectorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sSelector}", with: sSelectorPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eFilterActive": (wrappedValue: eFilterActive?.encodeToJSON(), isExplode: true),
            "sQuery": (wrappedValue: sQuery?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditcardmerchantGetAutocompleteV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter eOrderBy
     */
    public enum EOrderBy_creditcardmerchantGetListV1: String, CaseIterable {
        case pkicreditcardmerchantidAsc = "pkiCreditcardmerchantID_ASC"
        case pkicreditcardmerchantidDesc = "pkiCreditcardmerchantID_DESC"
        case fkibankaccountidAsc = "fkiBankaccountID_ASC"
        case fkibankaccountidDesc = "fkiBankaccountID_DESC"
        case fkilanguageidAsc = "fkiLanguageID_ASC"
        case fkilanguageidDesc = "fkiLanguageID_DESC"
        case bcreditcardmerchantdenyvisaAsc = "bCreditcardmerchantDenyvisa_ASC"
        case bcreditcardmerchantdenyvisaDesc = "bCreditcardmerchantDenyvisa_DESC"
        case bcreditcardmerchantdenymastercardAsc = "bCreditcardmerchantDenymastercard_ASC"
        case bcreditcardmerchantdenymastercardDesc = "bCreditcardmerchantDenymastercard_DESC"
        case bcreditcardmerchantdenyamexAsc = "bCreditcardmerchantDenyamex_ASC"
        case bcreditcardmerchantdenyamexDesc = "bCreditcardmerchantDenyamex_DESC"
        case bcreditcardmerchantisactiveAsc = "bCreditcardmerchantIsactive_ASC"
        case bcreditcardmerchantisactiveDesc = "bCreditcardmerchantIsactive_DESC"
        case screditcardmerchantdescriptionAsc = "sCreditcardmerchantDescription_ASC"
        case screditcardmerchantdescriptionDesc = "sCreditcardmerchantDescription_DESC"
        case screditcardmerchantstoreidAsc = "sCreditcardmerchantStoreid_ASC"
        case screditcardmerchantstoreidDesc = "sCreditcardmerchantStoreid_DESC"
    }

    /**
     Retrieve Creditcardmerchant list
     
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditcardmerchantGetListV1(eOrderBy: EOrderBy_creditcardmerchantGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditcardmerchantGetListV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditcardmerchantGetListV1WithRequestBuilder(eOrderBy: eOrderBy, iRowMax: iRowMax, iRowOffset: iRowOffset, acceptLanguage: acceptLanguage, sFilter: sFilter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Creditcardmerchant list
     - GET /1/object/creditcardmerchant/getList
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - returns: RequestBuilder<CreditcardmerchantGetListV1Response> 
     */
    open class func creditcardmerchantGetListV1WithRequestBuilder(eOrderBy: EOrderBy_creditcardmerchantGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil) -> RequestBuilder<CreditcardmerchantGetListV1Response> {
        let localVariablePath = "/1/object/creditcardmerchant/getList"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eOrderBy": (wrappedValue: eOrderBy?.encodeToJSON(), isExplode: true),
            "iRowMax": (wrappedValue: iRowMax?.encodeToJSON(), isExplode: true),
            "iRowOffset": (wrappedValue: iRowOffset?.encodeToJSON(), isExplode: true),
            "sFilter": (wrappedValue: sFilter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditcardmerchantGetListV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Creditcardmerchant
     
     - parameter pkiCreditcardmerchantID: (path) The unique ID of the Creditcardmerchant 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func creditcardmerchantGetObjectV2(pkiCreditcardmerchantID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreditcardmerchantGetObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return creditcardmerchantGetObjectV2WithRequestBuilder(pkiCreditcardmerchantID: pkiCreditcardmerchantID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Creditcardmerchant
     - GET /2/object/creditcardmerchant/{pkiCreditcardmerchantID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiCreditcardmerchantID: (path) The unique ID of the Creditcardmerchant 
     - returns: RequestBuilder<CreditcardmerchantGetObjectV2Response> 
     */
    open class func creditcardmerchantGetObjectV2WithRequestBuilder(pkiCreditcardmerchantID: Int) -> RequestBuilder<CreditcardmerchantGetObjectV2Response> {
        var localVariablePath = "/2/object/creditcardmerchant/{pkiCreditcardmerchantID}"
        let pkiCreditcardmerchantIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiCreditcardmerchantID))"
        let pkiCreditcardmerchantIDPostEscape = pkiCreditcardmerchantIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiCreditcardmerchantID}", with: pkiCreditcardmerchantIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreditcardmerchantGetObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
