//
// EzsigntemplateglobalResponseCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsigntemplateglobal Object */
public struct EzsigntemplateglobalResponseCompound: Codable, JSONEncodable, Hashable {

    static let pkiEzsigntemplateglobalIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsigntemplateglobaldocumentIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiModuleIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiLanguageIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    static let sEzsigntemplateglobalCodeRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,10}$/")
    /** The unique ID of the Ezsigntemplateglobal */
    public var pkiEzsigntemplateglobalID: Int
    /** The unique ID of the Ezsigntemplateglobaldocument */
    public var fkiEzsigntemplateglobaldocumentID: Int
    /** The unique ID of the Module */
    public var fkiModuleID: Int
    /** The Name of the Module in the language of the requester */
    public var sModuleNameX: String?
    /** The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| */
    public var fkiLanguageID: Int
    /** The Name of the Language in the language of the requester */
    public var sLanguageNameX: String
    public var eEzsigntemplateglobalModule: FieldEEzsigntemplateglobalModule
    public var eEzsigntemplateglobalSupplier: FieldEEzsigntemplateglobalSupplier
    /** The Code of the Ezsigntemplateglobal */
    public var sEzsigntemplateglobalCode: String
    /** The description of the Ezsigntemplate */
    public var sEzsigntemplateglobalDescription: String
    public var objEzsigntemplateglobaldocument: EzsigntemplateglobaldocumentResponse?
    public var aObjEzsigntemplateglobalsigner: [EzsigntemplateglobalsignerResponseCompound]

    public init(pkiEzsigntemplateglobalID: Int, fkiEzsigntemplateglobaldocumentID: Int, fkiModuleID: Int, sModuleNameX: String? = nil, fkiLanguageID: Int, sLanguageNameX: String, eEzsigntemplateglobalModule: FieldEEzsigntemplateglobalModule, eEzsigntemplateglobalSupplier: FieldEEzsigntemplateglobalSupplier, sEzsigntemplateglobalCode: String, sEzsigntemplateglobalDescription: String, objEzsigntemplateglobaldocument: EzsigntemplateglobaldocumentResponse? = nil, aObjEzsigntemplateglobalsigner: [EzsigntemplateglobalsignerResponseCompound]) {
        self.pkiEzsigntemplateglobalID = pkiEzsigntemplateglobalID
        self.fkiEzsigntemplateglobaldocumentID = fkiEzsigntemplateglobaldocumentID
        self.fkiModuleID = fkiModuleID
        self.sModuleNameX = sModuleNameX
        self.fkiLanguageID = fkiLanguageID
        self.sLanguageNameX = sLanguageNameX
        self.eEzsigntemplateglobalModule = eEzsigntemplateglobalModule
        self.eEzsigntemplateglobalSupplier = eEzsigntemplateglobalSupplier
        self.sEzsigntemplateglobalCode = sEzsigntemplateglobalCode
        self.sEzsigntemplateglobalDescription = sEzsigntemplateglobalDescription
        self.objEzsigntemplateglobaldocument = objEzsigntemplateglobaldocument
        self.aObjEzsigntemplateglobalsigner = aObjEzsigntemplateglobalsigner
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsigntemplateglobalID
        case fkiEzsigntemplateglobaldocumentID
        case fkiModuleID
        case sModuleNameX
        case fkiLanguageID
        case sLanguageNameX
        case eEzsigntemplateglobalModule
        case eEzsigntemplateglobalSupplier
        case sEzsigntemplateglobalCode
        case sEzsigntemplateglobalDescription
        case objEzsigntemplateglobaldocument
        case aObjEzsigntemplateglobalsigner = "a_objEzsigntemplateglobalsigner"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsigntemplateglobalID, forKey: .pkiEzsigntemplateglobalID)
        try container.encode(fkiEzsigntemplateglobaldocumentID, forKey: .fkiEzsigntemplateglobaldocumentID)
        try container.encode(fkiModuleID, forKey: .fkiModuleID)
        try container.encodeIfPresent(sModuleNameX, forKey: .sModuleNameX)
        try container.encode(fkiLanguageID, forKey: .fkiLanguageID)
        try container.encode(sLanguageNameX, forKey: .sLanguageNameX)
        try container.encode(eEzsigntemplateglobalModule, forKey: .eEzsigntemplateglobalModule)
        try container.encode(eEzsigntemplateglobalSupplier, forKey: .eEzsigntemplateglobalSupplier)
        try container.encode(sEzsigntemplateglobalCode, forKey: .sEzsigntemplateglobalCode)
        try container.encode(sEzsigntemplateglobalDescription, forKey: .sEzsigntemplateglobalDescription)
        try container.encodeIfPresent(objEzsigntemplateglobaldocument, forKey: .objEzsigntemplateglobaldocument)
        try container.encode(aObjEzsigntemplateglobalsigner, forKey: .aObjEzsigntemplateglobalsigner)
    }
}

