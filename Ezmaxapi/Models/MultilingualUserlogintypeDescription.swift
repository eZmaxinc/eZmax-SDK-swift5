//
// MultilingualUserlogintypeDescription.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The description of the Userlogintype */
public struct MultilingualUserlogintypeDescription: Codable, JSONEncodable, Hashable {

    public static let sUserlogintypeDescription1Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    public static let sUserlogintypeDescription2Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    /** The description of the Userlogintype in French */
    public var sUserlogintypeDescription1: String?
    /** The description of the Userlogintype in English */
    public var sUserlogintypeDescription2: String?

    public init(sUserlogintypeDescription1: String? = nil, sUserlogintypeDescription2: String? = nil) {
        self.sUserlogintypeDescription1 = sUserlogintypeDescription1
        self.sUserlogintypeDescription2 = sUserlogintypeDescription2
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sUserlogintypeDescription1
        case sUserlogintypeDescription2
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sUserlogintypeDescription1, forKey: .sUserlogintypeDescription1)
        try container.encodeIfPresent(sUserlogintypeDescription2, forKey: .sUserlogintypeDescription2)
    }
}

