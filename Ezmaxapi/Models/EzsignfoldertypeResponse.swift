//
// EzsignfoldertypeResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsignfoldertype Object */
public struct EzsignfoldertypeResponse: Codable, JSONEncodable, Hashable {

    static let pkiEzsignfoldertypeIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiBrandingIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiBillingentityinternalIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiUsergroupIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    static let fkiUsergroupIDRestrictedRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsigntsarequirementIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 3, exclusiveMaximum: false, multipleOf: nil)
    static let sUsergroupNameXRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    static let sUsergroupNameXRestrictedRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    static let iEzsignfoldertypeArchivaldaysRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 180, exclusiveMaximum: false, multipleOf: nil)
    static let iEzsignfoldertypeDisposaldaysRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 9999, exclusiveMaximum: false, multipleOf: nil)
    static let iEzsignfoldertypeDeadlinedaysRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 60, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Ezsignfoldertype. */
    public var pkiEzsignfoldertypeID: Int
    public var objEzsignfoldertypeName: MultilingualEzsignfoldertypeName
    /** The unique ID of the Branding */
    public var fkiBrandingID: Int
    /** The unique ID of the Billingentityinternal. */
    public var fkiBillingentityinternalID: Int?
    /** The unique ID of the Usergroup */
    public var fkiUsergroupID: Int?
    /** The unique ID of the Usergroup */
    public var fkiUsergroupIDRestricted: Int?
    /** The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**| */
    public var fkiEzsigntsarequirementID: Int?
    /** The Description of the Branding in the language of the requester */
    public var sBrandingDescriptionX: String
    /** The description of the Billingentityinternal in the language of the requester */
    public var sBillingentityinternalDescriptionX: String?
    /** The description of the Ezsigntsarequirement in the language of the requester */
    public var sEzsigntsarequirementDescriptionX: String?
    /** The email address. */
    public var sEmailAddressSigned: String?
    /** The email address. */
    public var sEmailAddressSummary: String?
    /** The Name of the Usergroup in the language of the requester */
    public var sUsergroupNameX: String?
    /** The Name of the Usergroup in the language of the requester */
    public var sUsergroupNameXRestricted: String?
    public var eEzsignfoldertypePrivacylevel: FieldEEzsignfoldertypePrivacylevel
    public var eEzsignfoldertypeSendreminderfrequency: FieldEEzsignfoldertypeSendreminderfrequency?
    /** The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype */
    public var iEzsignfoldertypeArchivaldays: Int
    public var eEzsignfoldertypeDisposal: FieldEEzsignfoldertypeDisposal
    /** The number of days after the archival before the disposal of the Ezsignfolder */
    public var iEzsignfoldertypeDisposaldays: Int?
    /** The number of days to get all Ezsignsignatures */
    public var iEzsignfoldertypeDeadlinedays: Int
    /** Wheter if delegation of signature is allowed to another user or not */
    public var bEzsignfoldertypeDelegate: Bool?
    /** Wheter if Reassignment of signature is allowed to another signatory or not */
    public var bEzsignfoldertypeReassign: Bool?
    /** THIS FIELD WILL BE DELETED. Whether we send the Ezsigndocument and the proof as attachment in the email */
    public var bEzsignfoldertypeSendattatchmentsigner: Bool?
    /** Whether we send an email to Ezsignsigner  when document is completed */
    public var bEzsignfoldertypeSendsignedtoezsignsigner: Bool?
    /** Whether we send an email to User who signed when document is completed */
    public var bEzsignfoldertypeSendsignedtouser: Bool?
    /** Whether we send the Ezsigndocument in the email to Ezsignsigner */
    public var bEzsignfoldertypeSendattachmentezsignsigner: Bool?
    /** Whether we send the proof in the email to Ezsignsigner */
    public var bEzsignfoldertypeSendproofezsignsigner: Bool?
    /** Whether we send the Ezsigndocument in the email to User */
    public var bEzsignfoldertypeSendattachmentuser: Bool?
    /** Whether we send the proof in the email to User */
    public var bEzsignfoldertypeSendproofuser: Bool?
    /** Whether we send the proof in the email to external recipient */
    public var bEzsignfoldertypeSendproofemail: Bool?
    /** Whether we allow the Ezsigndocument to be downloaded by an Ezsignsigner */
    public var bEzsignfoldertypeAllowdownloadattachmentezsignsigner: Bool?
    /** Whether we allow the proof to be downloaded by an Ezsignsigner */
    public var bEzsignfoldertypeAllowdownloadproofezsignsigner: Bool?
    /** Whether we send the proof to user and Ezsignsigner who receive all documents. */
    public var bEzsignfoldertypeSendproofreceivealldocument: Bool?
    /** Whether we send the signed Ezsigndocument to the Ezsigndocument's owner */
    public var bEzsignfoldertypeSendsignedtodocumentowner: Bool
    /** Whether we send the signed Ezsigndocument to the Ezsignfolder's owner */
    public var bEzsignfoldertypeSendsignedtofolderowner: Bool
    /** Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders */
    public var bEzsignfoldertypeSendsignedtofullgroup: Bool?
    /** THIS FIELD WILL BE DELETED. Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders */
    public var bEzsignfoldertypeSendsignedtolimitedgroup: Bool?
    /** Whether we send the signed Ezsigndocument to the colleagues */
    public var bEzsignfoldertypeSendsignedtocolleague: Bool
    /** Whether we send the summary to the Ezsigndocument's owner */
    public var bEzsignfoldertypeSendsummarytodocumentowner: Bool
    /** Whether we send the summary to the Ezsignfolder's owner */
    public var bEzsignfoldertypeSendsummarytofolderowner: Bool
    /** Whether we send the summary to the Usergroup that has acces to all Ezsignfolders */
    public var bEzsignfoldertypeSendsummarytofullgroup: Bool?
    /** Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders */
    public var bEzsignfoldertypeSendsummarytolimitedgroup: Bool?
    /** Whether we send the summary to the colleagues */
    public var bEzsignfoldertypeSendsummarytocolleague: Bool
    /** THIS FIELD WILL BE DELETED. Whether we include the proof with the signed Ezsigndocument for Ezsignsigners */
    public var bEzsignfoldertypeIncludeproofsigner: Bool?
    /** Whether we include the proof with the signed Ezsigndocument for users */
    public var bEzsignfoldertypeIncludeproofuser: Bool
    /** Whether the Ezsignfoldertype is active or not */
    public var bEzsignfoldertypeIsactive: Bool

    public init(pkiEzsignfoldertypeID: Int, objEzsignfoldertypeName: MultilingualEzsignfoldertypeName, fkiBrandingID: Int, fkiBillingentityinternalID: Int? = nil, fkiUsergroupID: Int? = nil, fkiUsergroupIDRestricted: Int? = nil, fkiEzsigntsarequirementID: Int? = nil, sBrandingDescriptionX: String, sBillingentityinternalDescriptionX: String? = nil, sEzsigntsarequirementDescriptionX: String? = nil, sEmailAddressSigned: String? = nil, sEmailAddressSummary: String? = nil, sUsergroupNameX: String? = nil, sUsergroupNameXRestricted: String? = nil, eEzsignfoldertypePrivacylevel: FieldEEzsignfoldertypePrivacylevel, eEzsignfoldertypeSendreminderfrequency: FieldEEzsignfoldertypeSendreminderfrequency? = nil, iEzsignfoldertypeArchivaldays: Int, eEzsignfoldertypeDisposal: FieldEEzsignfoldertypeDisposal, iEzsignfoldertypeDisposaldays: Int? = nil, iEzsignfoldertypeDeadlinedays: Int, bEzsignfoldertypeDelegate: Bool? = nil, bEzsignfoldertypeReassign: Bool? = nil, bEzsignfoldertypeSendattatchmentsigner: Bool? = nil, bEzsignfoldertypeSendsignedtoezsignsigner: Bool? = nil, bEzsignfoldertypeSendsignedtouser: Bool? = nil, bEzsignfoldertypeSendattachmentezsignsigner: Bool? = nil, bEzsignfoldertypeSendproofezsignsigner: Bool? = nil, bEzsignfoldertypeSendattachmentuser: Bool? = nil, bEzsignfoldertypeSendproofuser: Bool? = nil, bEzsignfoldertypeSendproofemail: Bool? = nil, bEzsignfoldertypeAllowdownloadattachmentezsignsigner: Bool? = nil, bEzsignfoldertypeAllowdownloadproofezsignsigner: Bool? = nil, bEzsignfoldertypeSendproofreceivealldocument: Bool? = nil, bEzsignfoldertypeSendsignedtodocumentowner: Bool, bEzsignfoldertypeSendsignedtofolderowner: Bool, bEzsignfoldertypeSendsignedtofullgroup: Bool? = nil, bEzsignfoldertypeSendsignedtolimitedgroup: Bool? = nil, bEzsignfoldertypeSendsignedtocolleague: Bool, bEzsignfoldertypeSendsummarytodocumentowner: Bool, bEzsignfoldertypeSendsummarytofolderowner: Bool, bEzsignfoldertypeSendsummarytofullgroup: Bool? = nil, bEzsignfoldertypeSendsummarytolimitedgroup: Bool? = nil, bEzsignfoldertypeSendsummarytocolleague: Bool, bEzsignfoldertypeIncludeproofsigner: Bool? = nil, bEzsignfoldertypeIncludeproofuser: Bool, bEzsignfoldertypeIsactive: Bool) {
        self.pkiEzsignfoldertypeID = pkiEzsignfoldertypeID
        self.objEzsignfoldertypeName = objEzsignfoldertypeName
        self.fkiBrandingID = fkiBrandingID
        self.fkiBillingentityinternalID = fkiBillingentityinternalID
        self.fkiUsergroupID = fkiUsergroupID
        self.fkiUsergroupIDRestricted = fkiUsergroupIDRestricted
        self.fkiEzsigntsarequirementID = fkiEzsigntsarequirementID
        self.sBrandingDescriptionX = sBrandingDescriptionX
        self.sBillingentityinternalDescriptionX = sBillingentityinternalDescriptionX
        self.sEzsigntsarequirementDescriptionX = sEzsigntsarequirementDescriptionX
        self.sEmailAddressSigned = sEmailAddressSigned
        self.sEmailAddressSummary = sEmailAddressSummary
        self.sUsergroupNameX = sUsergroupNameX
        self.sUsergroupNameXRestricted = sUsergroupNameXRestricted
        self.eEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel
        self.eEzsignfoldertypeSendreminderfrequency = eEzsignfoldertypeSendreminderfrequency
        self.iEzsignfoldertypeArchivaldays = iEzsignfoldertypeArchivaldays
        self.eEzsignfoldertypeDisposal = eEzsignfoldertypeDisposal
        self.iEzsignfoldertypeDisposaldays = iEzsignfoldertypeDisposaldays
        self.iEzsignfoldertypeDeadlinedays = iEzsignfoldertypeDeadlinedays
        self.bEzsignfoldertypeDelegate = bEzsignfoldertypeDelegate
        self.bEzsignfoldertypeReassign = bEzsignfoldertypeReassign
        self.bEzsignfoldertypeSendattatchmentsigner = bEzsignfoldertypeSendattatchmentsigner
        self.bEzsignfoldertypeSendsignedtoezsignsigner = bEzsignfoldertypeSendsignedtoezsignsigner
        self.bEzsignfoldertypeSendsignedtouser = bEzsignfoldertypeSendsignedtouser
        self.bEzsignfoldertypeSendattachmentezsignsigner = bEzsignfoldertypeSendattachmentezsignsigner
        self.bEzsignfoldertypeSendproofezsignsigner = bEzsignfoldertypeSendproofezsignsigner
        self.bEzsignfoldertypeSendattachmentuser = bEzsignfoldertypeSendattachmentuser
        self.bEzsignfoldertypeSendproofuser = bEzsignfoldertypeSendproofuser
        self.bEzsignfoldertypeSendproofemail = bEzsignfoldertypeSendproofemail
        self.bEzsignfoldertypeAllowdownloadattachmentezsignsigner = bEzsignfoldertypeAllowdownloadattachmentezsignsigner
        self.bEzsignfoldertypeAllowdownloadproofezsignsigner = bEzsignfoldertypeAllowdownloadproofezsignsigner
        self.bEzsignfoldertypeSendproofreceivealldocument = bEzsignfoldertypeSendproofreceivealldocument
        self.bEzsignfoldertypeSendsignedtodocumentowner = bEzsignfoldertypeSendsignedtodocumentowner
        self.bEzsignfoldertypeSendsignedtofolderowner = bEzsignfoldertypeSendsignedtofolderowner
        self.bEzsignfoldertypeSendsignedtofullgroup = bEzsignfoldertypeSendsignedtofullgroup
        self.bEzsignfoldertypeSendsignedtolimitedgroup = bEzsignfoldertypeSendsignedtolimitedgroup
        self.bEzsignfoldertypeSendsignedtocolleague = bEzsignfoldertypeSendsignedtocolleague
        self.bEzsignfoldertypeSendsummarytodocumentowner = bEzsignfoldertypeSendsummarytodocumentowner
        self.bEzsignfoldertypeSendsummarytofolderowner = bEzsignfoldertypeSendsummarytofolderowner
        self.bEzsignfoldertypeSendsummarytofullgroup = bEzsignfoldertypeSendsummarytofullgroup
        self.bEzsignfoldertypeSendsummarytolimitedgroup = bEzsignfoldertypeSendsummarytolimitedgroup
        self.bEzsignfoldertypeSendsummarytocolleague = bEzsignfoldertypeSendsummarytocolleague
        self.bEzsignfoldertypeIncludeproofsigner = bEzsignfoldertypeIncludeproofsigner
        self.bEzsignfoldertypeIncludeproofuser = bEzsignfoldertypeIncludeproofuser
        self.bEzsignfoldertypeIsactive = bEzsignfoldertypeIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsignfoldertypeID
        case objEzsignfoldertypeName
        case fkiBrandingID
        case fkiBillingentityinternalID
        case fkiUsergroupID
        case fkiUsergroupIDRestricted
        case fkiEzsigntsarequirementID
        case sBrandingDescriptionX
        case sBillingentityinternalDescriptionX
        case sEzsigntsarequirementDescriptionX
        case sEmailAddressSigned
        case sEmailAddressSummary
        case sUsergroupNameX
        case sUsergroupNameXRestricted
        case eEzsignfoldertypePrivacylevel
        case eEzsignfoldertypeSendreminderfrequency
        case iEzsignfoldertypeArchivaldays
        case eEzsignfoldertypeDisposal
        case iEzsignfoldertypeDisposaldays
        case iEzsignfoldertypeDeadlinedays
        case bEzsignfoldertypeDelegate
        case bEzsignfoldertypeReassign
        case bEzsignfoldertypeSendattatchmentsigner
        case bEzsignfoldertypeSendsignedtoezsignsigner
        case bEzsignfoldertypeSendsignedtouser
        case bEzsignfoldertypeSendattachmentezsignsigner
        case bEzsignfoldertypeSendproofezsignsigner
        case bEzsignfoldertypeSendattachmentuser
        case bEzsignfoldertypeSendproofuser
        case bEzsignfoldertypeSendproofemail
        case bEzsignfoldertypeAllowdownloadattachmentezsignsigner
        case bEzsignfoldertypeAllowdownloadproofezsignsigner
        case bEzsignfoldertypeSendproofreceivealldocument
        case bEzsignfoldertypeSendsignedtodocumentowner
        case bEzsignfoldertypeSendsignedtofolderowner
        case bEzsignfoldertypeSendsignedtofullgroup
        case bEzsignfoldertypeSendsignedtolimitedgroup
        case bEzsignfoldertypeSendsignedtocolleague
        case bEzsignfoldertypeSendsummarytodocumentowner
        case bEzsignfoldertypeSendsummarytofolderowner
        case bEzsignfoldertypeSendsummarytofullgroup
        case bEzsignfoldertypeSendsummarytolimitedgroup
        case bEzsignfoldertypeSendsummarytocolleague
        case bEzsignfoldertypeIncludeproofsigner
        case bEzsignfoldertypeIncludeproofuser
        case bEzsignfoldertypeIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsignfoldertypeID, forKey: .pkiEzsignfoldertypeID)
        try container.encode(objEzsignfoldertypeName, forKey: .objEzsignfoldertypeName)
        try container.encode(fkiBrandingID, forKey: .fkiBrandingID)
        try container.encodeIfPresent(fkiBillingentityinternalID, forKey: .fkiBillingentityinternalID)
        try container.encodeIfPresent(fkiUsergroupID, forKey: .fkiUsergroupID)
        try container.encodeIfPresent(fkiUsergroupIDRestricted, forKey: .fkiUsergroupIDRestricted)
        try container.encodeIfPresent(fkiEzsigntsarequirementID, forKey: .fkiEzsigntsarequirementID)
        try container.encode(sBrandingDescriptionX, forKey: .sBrandingDescriptionX)
        try container.encodeIfPresent(sBillingentityinternalDescriptionX, forKey: .sBillingentityinternalDescriptionX)
        try container.encodeIfPresent(sEzsigntsarequirementDescriptionX, forKey: .sEzsigntsarequirementDescriptionX)
        try container.encodeIfPresent(sEmailAddressSigned, forKey: .sEmailAddressSigned)
        try container.encodeIfPresent(sEmailAddressSummary, forKey: .sEmailAddressSummary)
        try container.encodeIfPresent(sUsergroupNameX, forKey: .sUsergroupNameX)
        try container.encodeIfPresent(sUsergroupNameXRestricted, forKey: .sUsergroupNameXRestricted)
        try container.encode(eEzsignfoldertypePrivacylevel, forKey: .eEzsignfoldertypePrivacylevel)
        try container.encodeIfPresent(eEzsignfoldertypeSendreminderfrequency, forKey: .eEzsignfoldertypeSendreminderfrequency)
        try container.encode(iEzsignfoldertypeArchivaldays, forKey: .iEzsignfoldertypeArchivaldays)
        try container.encode(eEzsignfoldertypeDisposal, forKey: .eEzsignfoldertypeDisposal)
        try container.encodeIfPresent(iEzsignfoldertypeDisposaldays, forKey: .iEzsignfoldertypeDisposaldays)
        try container.encode(iEzsignfoldertypeDeadlinedays, forKey: .iEzsignfoldertypeDeadlinedays)
        try container.encodeIfPresent(bEzsignfoldertypeDelegate, forKey: .bEzsignfoldertypeDelegate)
        try container.encodeIfPresent(bEzsignfoldertypeReassign, forKey: .bEzsignfoldertypeReassign)
        try container.encodeIfPresent(bEzsignfoldertypeSendattatchmentsigner, forKey: .bEzsignfoldertypeSendattatchmentsigner)
        try container.encodeIfPresent(bEzsignfoldertypeSendsignedtoezsignsigner, forKey: .bEzsignfoldertypeSendsignedtoezsignsigner)
        try container.encodeIfPresent(bEzsignfoldertypeSendsignedtouser, forKey: .bEzsignfoldertypeSendsignedtouser)
        try container.encodeIfPresent(bEzsignfoldertypeSendattachmentezsignsigner, forKey: .bEzsignfoldertypeSendattachmentezsignsigner)
        try container.encodeIfPresent(bEzsignfoldertypeSendproofezsignsigner, forKey: .bEzsignfoldertypeSendproofezsignsigner)
        try container.encodeIfPresent(bEzsignfoldertypeSendattachmentuser, forKey: .bEzsignfoldertypeSendattachmentuser)
        try container.encodeIfPresent(bEzsignfoldertypeSendproofuser, forKey: .bEzsignfoldertypeSendproofuser)
        try container.encodeIfPresent(bEzsignfoldertypeSendproofemail, forKey: .bEzsignfoldertypeSendproofemail)
        try container.encodeIfPresent(bEzsignfoldertypeAllowdownloadattachmentezsignsigner, forKey: .bEzsignfoldertypeAllowdownloadattachmentezsignsigner)
        try container.encodeIfPresent(bEzsignfoldertypeAllowdownloadproofezsignsigner, forKey: .bEzsignfoldertypeAllowdownloadproofezsignsigner)
        try container.encodeIfPresent(bEzsignfoldertypeSendproofreceivealldocument, forKey: .bEzsignfoldertypeSendproofreceivealldocument)
        try container.encode(bEzsignfoldertypeSendsignedtodocumentowner, forKey: .bEzsignfoldertypeSendsignedtodocumentowner)
        try container.encode(bEzsignfoldertypeSendsignedtofolderowner, forKey: .bEzsignfoldertypeSendsignedtofolderowner)
        try container.encodeIfPresent(bEzsignfoldertypeSendsignedtofullgroup, forKey: .bEzsignfoldertypeSendsignedtofullgroup)
        try container.encodeIfPresent(bEzsignfoldertypeSendsignedtolimitedgroup, forKey: .bEzsignfoldertypeSendsignedtolimitedgroup)
        try container.encode(bEzsignfoldertypeSendsignedtocolleague, forKey: .bEzsignfoldertypeSendsignedtocolleague)
        try container.encode(bEzsignfoldertypeSendsummarytodocumentowner, forKey: .bEzsignfoldertypeSendsummarytodocumentowner)
        try container.encode(bEzsignfoldertypeSendsummarytofolderowner, forKey: .bEzsignfoldertypeSendsummarytofolderowner)
        try container.encodeIfPresent(bEzsignfoldertypeSendsummarytofullgroup, forKey: .bEzsignfoldertypeSendsummarytofullgroup)
        try container.encodeIfPresent(bEzsignfoldertypeSendsummarytolimitedgroup, forKey: .bEzsignfoldertypeSendsummarytolimitedgroup)
        try container.encode(bEzsignfoldertypeSendsummarytocolleague, forKey: .bEzsignfoldertypeSendsummarytocolleague)
        try container.encodeIfPresent(bEzsignfoldertypeIncludeproofsigner, forKey: .bEzsignfoldertypeIncludeproofsigner)
        try container.encode(bEzsignfoldertypeIncludeproofuser, forKey: .bEzsignfoldertypeIncludeproofuser)
        try container.encode(bEzsignfoldertypeIsactive, forKey: .bEzsignfoldertypeIsactive)
    }
}

