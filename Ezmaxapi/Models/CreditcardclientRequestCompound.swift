//
// CreditcardclientRequestCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Creditcardclient Object and children */
public struct CreditcardclientRequestCompound: Codable, JSONEncodable, Hashable {

    public static let pkiCreditcardclientIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    public static let fksCreditcardtokenIDRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\{?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\}?$/")
    public static let sCreditcardclientDescriptionRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    public static let sCreditcardclientCVVRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]{3,4}$/")
    /** The unique ID of the Creditcardclient */
    public var pkiCreditcardclientID: Int?
    /** The creditcard token identifier */
    public var fksCreditcardtokenID: String?
    /** Whether if it's the creditcardclient is the default one */
    public var bCreditcardclientrelationIsdefault: Bool
    /** The description of the Creditcardclient */
    public var sCreditcardclientDescription: String
    /** Whether if it's an allowedagencypayment */
    public var bCreditcardclientAllowedcompanypayment: Bool
    /** Whether if it's an allowedroyallepageprotection */
    public var bCreditcardclientAllowedezsign: Bool
    /** Whether if it's an allowedtranquillit */
    public var bCreditcardclientAllowedtranquillit: Bool
    public var objCreditcarddetail: CreditcarddetailRequest
    /** The creditcard card CVV */
    public var sCreditcardclientCVV: String

    public init(pkiCreditcardclientID: Int? = nil, fksCreditcardtokenID: String? = nil, bCreditcardclientrelationIsdefault: Bool, sCreditcardclientDescription: String, bCreditcardclientAllowedcompanypayment: Bool, bCreditcardclientAllowedezsign: Bool, bCreditcardclientAllowedtranquillit: Bool, objCreditcarddetail: CreditcarddetailRequest, sCreditcardclientCVV: String) {
        self.pkiCreditcardclientID = pkiCreditcardclientID
        self.fksCreditcardtokenID = fksCreditcardtokenID
        self.bCreditcardclientrelationIsdefault = bCreditcardclientrelationIsdefault
        self.sCreditcardclientDescription = sCreditcardclientDescription
        self.bCreditcardclientAllowedcompanypayment = bCreditcardclientAllowedcompanypayment
        self.bCreditcardclientAllowedezsign = bCreditcardclientAllowedezsign
        self.bCreditcardclientAllowedtranquillit = bCreditcardclientAllowedtranquillit
        self.objCreditcarddetail = objCreditcarddetail
        self.sCreditcardclientCVV = sCreditcardclientCVV
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCreditcardclientID
        case fksCreditcardtokenID
        case bCreditcardclientrelationIsdefault
        case sCreditcardclientDescription
        case bCreditcardclientAllowedcompanypayment
        case bCreditcardclientAllowedezsign
        case bCreditcardclientAllowedtranquillit
        case objCreditcarddetail
        case sCreditcardclientCVV
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiCreditcardclientID, forKey: .pkiCreditcardclientID)
        try container.encodeIfPresent(fksCreditcardtokenID, forKey: .fksCreditcardtokenID)
        try container.encode(bCreditcardclientrelationIsdefault, forKey: .bCreditcardclientrelationIsdefault)
        try container.encode(sCreditcardclientDescription, forKey: .sCreditcardclientDescription)
        try container.encode(bCreditcardclientAllowedcompanypayment, forKey: .bCreditcardclientAllowedcompanypayment)
        try container.encode(bCreditcardclientAllowedezsign, forKey: .bCreditcardclientAllowedezsign)
        try container.encode(bCreditcardclientAllowedtranquillit, forKey: .bCreditcardclientAllowedtranquillit)
        try container.encode(objCreditcarddetail, forKey: .objCreditcarddetail)
        try container.encode(sCreditcardclientCVV, forKey: .sCreditcardclientCVV)
    }
}

