//
// EzmaxinvoicingagentResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezmaxinvoicingagent Object */
public struct EzmaxinvoicingagentResponse: Codable, JSONEncodable, Hashable {

    public static let pkiEzmaxinvoicingagentIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiEzmaxinvoicingIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiBillingentityinternalIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiAgentIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiBrokerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let iEzmaxinvoicingagentSessionRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let iEzmaxinvoicingagentClonedRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let iEzmaxinvoicingagentInvoiceRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let iEzmaxinvoicingagentInscriptionRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let iEzmaxinvoicingagentInscriptionactiveRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let iEzmaxinvoicingagentSaleRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let iEzmaxinvoicingagentOtherincomeRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let iEzmaxinvoicingagentCommissioncalculationRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let iEzmaxinvoicingagentEzsigndocumentRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Ezmaxinvoicingagent */
    public var pkiEzmaxinvoicingagentID: Int?
    /** The unique ID of the Ezmaxinvoicing */
    public var fkiEzmaxinvoicingID: Int?
    /** The unique ID of the Billingentityinternal. */
    public var fkiBillingentityinternalID: Int
    /** The description of the Billingentityinternal in the language of the requester */
    public var sBillingentityinternalDescriptionX: String
    /** The unique ID of the Agent. */
    public var fkiAgentID: Int?
    /** The unique ID of the Broker. */
    public var fkiBrokerID: Int?
    /** The number of sessions */
    public var iEzmaxinvoicingagentSession: Int
    /** The number of times this user was cloned */
    public var iEzmaxinvoicingagentCloned: Int
    /** The number of invoices */
    public var iEzmaxinvoicingagentInvoice: Int
    /** The number of inscriptions */
    public var iEzmaxinvoicingagentInscription: Int
    /** The number of active inscriptions */
    public var iEzmaxinvoicingagentInscriptionactive: Int
    /** The number of sales */
    public var iEzmaxinvoicingagentSale: Int
    /** The number of otherincomes */
    public var iEzmaxinvoicingagentOtherincome: Int
    /** The number of commission calculations */
    public var iEzmaxinvoicingagentCommissioncalculation: Int
    /** The number of ezsign documents */
    public var iEzmaxinvoicingagentEzsigndocument: Int
    /** Whether the agent has an eZsign account */
    public var bEzmaxinvoicingagentEzsignaccount: Bool
    /** Whether it is billable for eZmax */
    public var bEzmaxinvoicingagentBillableezmax: Bool
    public var eEzmaxinvoicingagentVariationezmax: FieldEEzmaxinvoicingagentVariationezmax
    /** Whether it is billable for eZsign */
    public var bEzmaxinvoicingagentBillableezsign: Bool
    public var eEzmaxinvoicingagentVariationezsign: FieldEEzmaxinvoicingagentVariationezsign

    public init(pkiEzmaxinvoicingagentID: Int? = nil, fkiEzmaxinvoicingID: Int? = nil, fkiBillingentityinternalID: Int, sBillingentityinternalDescriptionX: String, fkiAgentID: Int? = nil, fkiBrokerID: Int? = nil, iEzmaxinvoicingagentSession: Int, iEzmaxinvoicingagentCloned: Int, iEzmaxinvoicingagentInvoice: Int, iEzmaxinvoicingagentInscription: Int, iEzmaxinvoicingagentInscriptionactive: Int, iEzmaxinvoicingagentSale: Int, iEzmaxinvoicingagentOtherincome: Int, iEzmaxinvoicingagentCommissioncalculation: Int, iEzmaxinvoicingagentEzsigndocument: Int, bEzmaxinvoicingagentEzsignaccount: Bool, bEzmaxinvoicingagentBillableezmax: Bool, eEzmaxinvoicingagentVariationezmax: FieldEEzmaxinvoicingagentVariationezmax, bEzmaxinvoicingagentBillableezsign: Bool, eEzmaxinvoicingagentVariationezsign: FieldEEzmaxinvoicingagentVariationezsign) {
        self.pkiEzmaxinvoicingagentID = pkiEzmaxinvoicingagentID
        self.fkiEzmaxinvoicingID = fkiEzmaxinvoicingID
        self.fkiBillingentityinternalID = fkiBillingentityinternalID
        self.sBillingentityinternalDescriptionX = sBillingentityinternalDescriptionX
        self.fkiAgentID = fkiAgentID
        self.fkiBrokerID = fkiBrokerID
        self.iEzmaxinvoicingagentSession = iEzmaxinvoicingagentSession
        self.iEzmaxinvoicingagentCloned = iEzmaxinvoicingagentCloned
        self.iEzmaxinvoicingagentInvoice = iEzmaxinvoicingagentInvoice
        self.iEzmaxinvoicingagentInscription = iEzmaxinvoicingagentInscription
        self.iEzmaxinvoicingagentInscriptionactive = iEzmaxinvoicingagentInscriptionactive
        self.iEzmaxinvoicingagentSale = iEzmaxinvoicingagentSale
        self.iEzmaxinvoicingagentOtherincome = iEzmaxinvoicingagentOtherincome
        self.iEzmaxinvoicingagentCommissioncalculation = iEzmaxinvoicingagentCommissioncalculation
        self.iEzmaxinvoicingagentEzsigndocument = iEzmaxinvoicingagentEzsigndocument
        self.bEzmaxinvoicingagentEzsignaccount = bEzmaxinvoicingagentEzsignaccount
        self.bEzmaxinvoicingagentBillableezmax = bEzmaxinvoicingagentBillableezmax
        self.eEzmaxinvoicingagentVariationezmax = eEzmaxinvoicingagentVariationezmax
        self.bEzmaxinvoicingagentBillableezsign = bEzmaxinvoicingagentBillableezsign
        self.eEzmaxinvoicingagentVariationezsign = eEzmaxinvoicingagentVariationezsign
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzmaxinvoicingagentID
        case fkiEzmaxinvoicingID
        case fkiBillingentityinternalID
        case sBillingentityinternalDescriptionX
        case fkiAgentID
        case fkiBrokerID
        case iEzmaxinvoicingagentSession
        case iEzmaxinvoicingagentCloned
        case iEzmaxinvoicingagentInvoice
        case iEzmaxinvoicingagentInscription
        case iEzmaxinvoicingagentInscriptionactive
        case iEzmaxinvoicingagentSale
        case iEzmaxinvoicingagentOtherincome
        case iEzmaxinvoicingagentCommissioncalculation
        case iEzmaxinvoicingagentEzsigndocument
        case bEzmaxinvoicingagentEzsignaccount
        case bEzmaxinvoicingagentBillableezmax
        case eEzmaxinvoicingagentVariationezmax
        case bEzmaxinvoicingagentBillableezsign
        case eEzmaxinvoicingagentVariationezsign
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiEzmaxinvoicingagentID, forKey: .pkiEzmaxinvoicingagentID)
        try container.encodeIfPresent(fkiEzmaxinvoicingID, forKey: .fkiEzmaxinvoicingID)
        try container.encode(fkiBillingentityinternalID, forKey: .fkiBillingentityinternalID)
        try container.encode(sBillingentityinternalDescriptionX, forKey: .sBillingentityinternalDescriptionX)
        try container.encodeIfPresent(fkiAgentID, forKey: .fkiAgentID)
        try container.encodeIfPresent(fkiBrokerID, forKey: .fkiBrokerID)
        try container.encode(iEzmaxinvoicingagentSession, forKey: .iEzmaxinvoicingagentSession)
        try container.encode(iEzmaxinvoicingagentCloned, forKey: .iEzmaxinvoicingagentCloned)
        try container.encode(iEzmaxinvoicingagentInvoice, forKey: .iEzmaxinvoicingagentInvoice)
        try container.encode(iEzmaxinvoicingagentInscription, forKey: .iEzmaxinvoicingagentInscription)
        try container.encode(iEzmaxinvoicingagentInscriptionactive, forKey: .iEzmaxinvoicingagentInscriptionactive)
        try container.encode(iEzmaxinvoicingagentSale, forKey: .iEzmaxinvoicingagentSale)
        try container.encode(iEzmaxinvoicingagentOtherincome, forKey: .iEzmaxinvoicingagentOtherincome)
        try container.encode(iEzmaxinvoicingagentCommissioncalculation, forKey: .iEzmaxinvoicingagentCommissioncalculation)
        try container.encode(iEzmaxinvoicingagentEzsigndocument, forKey: .iEzmaxinvoicingagentEzsigndocument)
        try container.encode(bEzmaxinvoicingagentEzsignaccount, forKey: .bEzmaxinvoicingagentEzsignaccount)
        try container.encode(bEzmaxinvoicingagentBillableezmax, forKey: .bEzmaxinvoicingagentBillableezmax)
        try container.encode(eEzmaxinvoicingagentVariationezmax, forKey: .eEzmaxinvoicingagentVariationezmax)
        try container.encode(bEzmaxinvoicingagentBillableezsign, forKey: .bEzmaxinvoicingagentBillableezsign)
        try container.encode(eEzmaxinvoicingagentVariationezsign, forKey: .eEzmaxinvoicingagentVariationezsign)
    }
}

