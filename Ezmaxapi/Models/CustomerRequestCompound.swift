//
// CustomerRequestCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Customer Object and children */
public struct CustomerRequestCompound: Codable, JSONEncodable, Hashable {

    public static let pkiCustomerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiCompanyIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiCustomergroupIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let sCustomerNameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    public static let fkiContactinformationsIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiContactcontainerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiGlaccountcontainerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiLanguageIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiDepartmentIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiPaymentmethodIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiElectronicfundstransferbankaccountIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiElectronicfundstransferbankaccountIDDirectdebitRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiSendingmethodIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiTaxassignmentIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 15, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiAttendancestatusIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiAgentIDVariableexpensechargetoRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiBrokerIDVariableexpensechargetoRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiCustomerIDVariableexpensechargetoRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiGlaccountcontainerIDVariableexpensechargetoRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiAgentIDSupplychargechargetoRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiBrokerIDSupplychargechargetoRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiCustomerIDSupplychargechargetoRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiGlaccountcontainerIDSupplychargechargetoRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiInvoicealternatelogoIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiSynchronizationlinkserverIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let efkiUserIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let efksCustomerCodeRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,6}$/")
    public static let sCustomerCodeRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,6}$/")
    public static let dCustomerFulltimeequivalentRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/")
    public static let iCustomerPhotocopiercodeRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let iCustomerLongdistancecodeRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let iCustomerTimewindowstartRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let iCustomerTimewindowendRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let dCustomerMinimumchargeableinterestsRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^-{0,1}[\\d]{1,9}?\\.[\\d]{2}$/")
    public static let dtCustomerBirthdateRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/")
    public static let dtCustomerTransferRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
    public static let dtCustomerTransferappointmentRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
    public static let dtCustomerTransfersurveyRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
    public static let tCustomerCommentRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,16777215}$/")
    public static let IMPORTIDRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,15}$/")
    /** The unique ID of the Customer. */
    public var pkiCustomerID: Int?
    /** The unique ID of the Company */
    public var fkiCompanyID: Int
    /** The unique ID of the Customergroup */
    public var fkiCustomergroupID: Int
    /** The name of the Customer */
    public var sCustomerName: String
    /** The unique ID of the Contactinformations */
    public var fkiContactinformationsID: Int
    /** The unique ID of the Contactcontainer */
    public var fkiContactcontainerID: Int
    /** The unique ID of the Image */
    public var fkiImageID: Int
    /** The unique ID of the Glaccountcontainer */
    public var fkiGlaccountcontainerID: Int
    /** The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| */
    public var fkiLanguageID: Int
    /** The unique ID of the Department */
    public var fkiDepartmentID: Int
    /** The unique ID of the Paymentmethod */
    public var fkiPaymentmethodID: Int
    /** The unique ID of the Electronicfundstransferbankaccount */
    public var fkiElectronicfundstransferbankaccountID: Int
    /** The unique ID of the Electronicfundstransferbankaccount */
    public var fkiElectronicfundstransferbankaccountIDDirectdebit: Int
    /** The unique ID of the Sendingmethod */
    public var fkiSendingmethodID: Int
    /** The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable| */
    public var fkiTaxassignmentID: Int
    /** The unique ID of the Attendancestatus */
    public var fkiAttendancestatusID: Int
    /** The unique ID of the Agent. */
    public var fkiAgentIDVariableexpensechargeto: Int
    /** The unique ID of the Broker. */
    public var fkiBrokerIDVariableexpensechargeto: Int
    /** The unique ID of the Customer. */
    public var fkiCustomerIDVariableexpensechargeto: Int
    /** The unique ID of the Glaccountcontainer */
    public var fkiGlaccountcontainerIDVariableexpensechargeto: Int
    /** The unique ID of the Agent. */
    public var fkiAgentIDSupplychargechargeto: Int
    /** The unique ID of the Broker. */
    public var fkiBrokerIDSupplychargechargeto: Int
    /** The unique ID of the Customer. */
    public var fkiCustomerIDSupplychargechargeto: Int
    /** The unique ID of the Glaccountcontainer */
    public var fkiGlaccountcontainerIDSupplychargechargeto: Int
    /** The unique ID of the Invoicealternatelogo */
    public var fkiInvoicealternatelogoID: Int
    /** The unique ID of the Synchronizationlinkserver */
    public var fkiSynchronizationlinkserverID: Int
    /** The unique ID of the User */
    public var efkiUserID: Int?
    /** The code of the Customer */
    public var efksCustomerCode: String?
    /** The code of the Customer */
    public var sCustomerCode: String
    /** The fulltimeequivalent of the Customer */
    public var dCustomerFulltimeequivalent: String
    /** The photocopiercode of the Customer */
    public var iCustomerPhotocopiercode: Int
    /** The longdistancecode of the Customer */
    public var iCustomerLongdistancecode: Int
    /** The timewindowstart of the Customer */
    public var iCustomerTimewindowstart: Int
    /** The timewindowend of the Customer */
    public var iCustomerTimewindowend: Int
    /** The minimumchargeableinterests of the Customer */
    public var dCustomerMinimumchargeableinterests: String
    /** The birthdate of the Customer */
    public var dtCustomerBirthdate: String
    /** The transfer of the Customer */
    public var dtCustomerTransfer: String
    /** The transferappointment of the Customer */
    public var dtCustomerTransferappointment: String
    /** The transfersurvey of the Customer */
    public var dtCustomerTransfersurvey: String
    /** Whether the customer is active or not */
    public var bCustomerIsactive: Bool
    /** Whether if it's an variableexpensefinanced */
    public var bCustomerVariableexpensefinanced: Bool
    /** Whether if it's an variableexpensefinancedtaxes */
    public var bCustomerVariableexpensefinancedtaxes: Bool
    /** Whether if it's an supplychargefinanced */
    public var bCustomerSupplychargefinanced: Bool
    /** Whether if it's an supplychargefinancedtaxes */
    public var bCustomerSupplychargefinancedtaxes: Bool
    /** Whether if it's an attendance */
    public var bCustomerAttendance: Bool
    public var eCustomerType: FieldECustomerType
    public var eCustomerMarketingcorrespondence: FieldECustomerMarketingcorrespondence
    /** Whether if it's an blackcopycarbon */
    public var bCustomerBlackcopycarbon: Bool
    /** Whether if it's an unsubscribeinfo */
    public var bCustomerUnsubscribeinfo: Bool
    /** The comment of the Customer */
    public var tCustomerComment: String
    public var IMPORTID: String?

    public init(pkiCustomerID: Int? = nil, fkiCompanyID: Int, fkiCustomergroupID: Int, sCustomerName: String, fkiContactinformationsID: Int, fkiContactcontainerID: Int, fkiImageID: Int, fkiGlaccountcontainerID: Int, fkiLanguageID: Int, fkiDepartmentID: Int, fkiPaymentmethodID: Int, fkiElectronicfundstransferbankaccountID: Int, fkiElectronicfundstransferbankaccountIDDirectdebit: Int, fkiSendingmethodID: Int, fkiTaxassignmentID: Int, fkiAttendancestatusID: Int, fkiAgentIDVariableexpensechargeto: Int, fkiBrokerIDVariableexpensechargeto: Int, fkiCustomerIDVariableexpensechargeto: Int, fkiGlaccountcontainerIDVariableexpensechargeto: Int, fkiAgentIDSupplychargechargeto: Int, fkiBrokerIDSupplychargechargeto: Int, fkiCustomerIDSupplychargechargeto: Int, fkiGlaccountcontainerIDSupplychargechargeto: Int, fkiInvoicealternatelogoID: Int, fkiSynchronizationlinkserverID: Int, efkiUserID: Int? = nil, efksCustomerCode: String? = nil, sCustomerCode: String, dCustomerFulltimeequivalent: String, iCustomerPhotocopiercode: Int, iCustomerLongdistancecode: Int, iCustomerTimewindowstart: Int, iCustomerTimewindowend: Int, dCustomerMinimumchargeableinterests: String, dtCustomerBirthdate: String, dtCustomerTransfer: String, dtCustomerTransferappointment: String, dtCustomerTransfersurvey: String, bCustomerIsactive: Bool, bCustomerVariableexpensefinanced: Bool, bCustomerVariableexpensefinancedtaxes: Bool, bCustomerSupplychargefinanced: Bool, bCustomerSupplychargefinancedtaxes: Bool, bCustomerAttendance: Bool, eCustomerType: FieldECustomerType, eCustomerMarketingcorrespondence: FieldECustomerMarketingcorrespondence, bCustomerBlackcopycarbon: Bool, bCustomerUnsubscribeinfo: Bool, tCustomerComment: String, IMPORTID: String? = nil) {
        self.pkiCustomerID = pkiCustomerID
        self.fkiCompanyID = fkiCompanyID
        self.fkiCustomergroupID = fkiCustomergroupID
        self.sCustomerName = sCustomerName
        self.fkiContactinformationsID = fkiContactinformationsID
        self.fkiContactcontainerID = fkiContactcontainerID
        self.fkiImageID = fkiImageID
        self.fkiGlaccountcontainerID = fkiGlaccountcontainerID
        self.fkiLanguageID = fkiLanguageID
        self.fkiDepartmentID = fkiDepartmentID
        self.fkiPaymentmethodID = fkiPaymentmethodID
        self.fkiElectronicfundstransferbankaccountID = fkiElectronicfundstransferbankaccountID
        self.fkiElectronicfundstransferbankaccountIDDirectdebit = fkiElectronicfundstransferbankaccountIDDirectdebit
        self.fkiSendingmethodID = fkiSendingmethodID
        self.fkiTaxassignmentID = fkiTaxassignmentID
        self.fkiAttendancestatusID = fkiAttendancestatusID
        self.fkiAgentIDVariableexpensechargeto = fkiAgentIDVariableexpensechargeto
        self.fkiBrokerIDVariableexpensechargeto = fkiBrokerIDVariableexpensechargeto
        self.fkiCustomerIDVariableexpensechargeto = fkiCustomerIDVariableexpensechargeto
        self.fkiGlaccountcontainerIDVariableexpensechargeto = fkiGlaccountcontainerIDVariableexpensechargeto
        self.fkiAgentIDSupplychargechargeto = fkiAgentIDSupplychargechargeto
        self.fkiBrokerIDSupplychargechargeto = fkiBrokerIDSupplychargechargeto
        self.fkiCustomerIDSupplychargechargeto = fkiCustomerIDSupplychargechargeto
        self.fkiGlaccountcontainerIDSupplychargechargeto = fkiGlaccountcontainerIDSupplychargechargeto
        self.fkiInvoicealternatelogoID = fkiInvoicealternatelogoID
        self.fkiSynchronizationlinkserverID = fkiSynchronizationlinkserverID
        self.efkiUserID = efkiUserID
        self.efksCustomerCode = efksCustomerCode
        self.sCustomerCode = sCustomerCode
        self.dCustomerFulltimeequivalent = dCustomerFulltimeequivalent
        self.iCustomerPhotocopiercode = iCustomerPhotocopiercode
        self.iCustomerLongdistancecode = iCustomerLongdistancecode
        self.iCustomerTimewindowstart = iCustomerTimewindowstart
        self.iCustomerTimewindowend = iCustomerTimewindowend
        self.dCustomerMinimumchargeableinterests = dCustomerMinimumchargeableinterests
        self.dtCustomerBirthdate = dtCustomerBirthdate
        self.dtCustomerTransfer = dtCustomerTransfer
        self.dtCustomerTransferappointment = dtCustomerTransferappointment
        self.dtCustomerTransfersurvey = dtCustomerTransfersurvey
        self.bCustomerIsactive = bCustomerIsactive
        self.bCustomerVariableexpensefinanced = bCustomerVariableexpensefinanced
        self.bCustomerVariableexpensefinancedtaxes = bCustomerVariableexpensefinancedtaxes
        self.bCustomerSupplychargefinanced = bCustomerSupplychargefinanced
        self.bCustomerSupplychargefinancedtaxes = bCustomerSupplychargefinancedtaxes
        self.bCustomerAttendance = bCustomerAttendance
        self.eCustomerType = eCustomerType
        self.eCustomerMarketingcorrespondence = eCustomerMarketingcorrespondence
        self.bCustomerBlackcopycarbon = bCustomerBlackcopycarbon
        self.bCustomerUnsubscribeinfo = bCustomerUnsubscribeinfo
        self.tCustomerComment = tCustomerComment
        self.IMPORTID = IMPORTID
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCustomerID
        case fkiCompanyID
        case fkiCustomergroupID
        case sCustomerName
        case fkiContactinformationsID
        case fkiContactcontainerID
        case fkiImageID
        case fkiGlaccountcontainerID
        case fkiLanguageID
        case fkiDepartmentID
        case fkiPaymentmethodID
        case fkiElectronicfundstransferbankaccountID
        case fkiElectronicfundstransferbankaccountIDDirectdebit
        case fkiSendingmethodID
        case fkiTaxassignmentID
        case fkiAttendancestatusID
        case fkiAgentIDVariableexpensechargeto
        case fkiBrokerIDVariableexpensechargeto
        case fkiCustomerIDVariableexpensechargeto
        case fkiGlaccountcontainerIDVariableexpensechargeto
        case fkiAgentIDSupplychargechargeto
        case fkiBrokerIDSupplychargechargeto
        case fkiCustomerIDSupplychargechargeto
        case fkiGlaccountcontainerIDSupplychargechargeto
        case fkiInvoicealternatelogoID
        case fkiSynchronizationlinkserverID
        case efkiUserID
        case efksCustomerCode
        case sCustomerCode
        case dCustomerFulltimeequivalent
        case iCustomerPhotocopiercode
        case iCustomerLongdistancecode
        case iCustomerTimewindowstart
        case iCustomerTimewindowend
        case dCustomerMinimumchargeableinterests
        case dtCustomerBirthdate
        case dtCustomerTransfer
        case dtCustomerTransferappointment
        case dtCustomerTransfersurvey
        case bCustomerIsactive
        case bCustomerVariableexpensefinanced
        case bCustomerVariableexpensefinancedtaxes
        case bCustomerSupplychargefinanced
        case bCustomerSupplychargefinancedtaxes
        case bCustomerAttendance
        case eCustomerType
        case eCustomerMarketingcorrespondence
        case bCustomerBlackcopycarbon
        case bCustomerUnsubscribeinfo
        case tCustomerComment
        case IMPORTID
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiCustomerID, forKey: .pkiCustomerID)
        try container.encode(fkiCompanyID, forKey: .fkiCompanyID)
        try container.encode(fkiCustomergroupID, forKey: .fkiCustomergroupID)
        try container.encode(sCustomerName, forKey: .sCustomerName)
        try container.encode(fkiContactinformationsID, forKey: .fkiContactinformationsID)
        try container.encode(fkiContactcontainerID, forKey: .fkiContactcontainerID)
        try container.encode(fkiImageID, forKey: .fkiImageID)
        try container.encode(fkiGlaccountcontainerID, forKey: .fkiGlaccountcontainerID)
        try container.encode(fkiLanguageID, forKey: .fkiLanguageID)
        try container.encode(fkiDepartmentID, forKey: .fkiDepartmentID)
        try container.encode(fkiPaymentmethodID, forKey: .fkiPaymentmethodID)
        try container.encode(fkiElectronicfundstransferbankaccountID, forKey: .fkiElectronicfundstransferbankaccountID)
        try container.encode(fkiElectronicfundstransferbankaccountIDDirectdebit, forKey: .fkiElectronicfundstransferbankaccountIDDirectdebit)
        try container.encode(fkiSendingmethodID, forKey: .fkiSendingmethodID)
        try container.encode(fkiTaxassignmentID, forKey: .fkiTaxassignmentID)
        try container.encode(fkiAttendancestatusID, forKey: .fkiAttendancestatusID)
        try container.encode(fkiAgentIDVariableexpensechargeto, forKey: .fkiAgentIDVariableexpensechargeto)
        try container.encode(fkiBrokerIDVariableexpensechargeto, forKey: .fkiBrokerIDVariableexpensechargeto)
        try container.encode(fkiCustomerIDVariableexpensechargeto, forKey: .fkiCustomerIDVariableexpensechargeto)
        try container.encode(fkiGlaccountcontainerIDVariableexpensechargeto, forKey: .fkiGlaccountcontainerIDVariableexpensechargeto)
        try container.encode(fkiAgentIDSupplychargechargeto, forKey: .fkiAgentIDSupplychargechargeto)
        try container.encode(fkiBrokerIDSupplychargechargeto, forKey: .fkiBrokerIDSupplychargechargeto)
        try container.encode(fkiCustomerIDSupplychargechargeto, forKey: .fkiCustomerIDSupplychargechargeto)
        try container.encode(fkiGlaccountcontainerIDSupplychargechargeto, forKey: .fkiGlaccountcontainerIDSupplychargechargeto)
        try container.encode(fkiInvoicealternatelogoID, forKey: .fkiInvoicealternatelogoID)
        try container.encode(fkiSynchronizationlinkserverID, forKey: .fkiSynchronizationlinkserverID)
        try container.encodeIfPresent(efkiUserID, forKey: .efkiUserID)
        try container.encodeIfPresent(efksCustomerCode, forKey: .efksCustomerCode)
        try container.encode(sCustomerCode, forKey: .sCustomerCode)
        try container.encode(dCustomerFulltimeequivalent, forKey: .dCustomerFulltimeequivalent)
        try container.encode(iCustomerPhotocopiercode, forKey: .iCustomerPhotocopiercode)
        try container.encode(iCustomerLongdistancecode, forKey: .iCustomerLongdistancecode)
        try container.encode(iCustomerTimewindowstart, forKey: .iCustomerTimewindowstart)
        try container.encode(iCustomerTimewindowend, forKey: .iCustomerTimewindowend)
        try container.encode(dCustomerMinimumchargeableinterests, forKey: .dCustomerMinimumchargeableinterests)
        try container.encode(dtCustomerBirthdate, forKey: .dtCustomerBirthdate)
        try container.encode(dtCustomerTransfer, forKey: .dtCustomerTransfer)
        try container.encode(dtCustomerTransferappointment, forKey: .dtCustomerTransferappointment)
        try container.encode(dtCustomerTransfersurvey, forKey: .dtCustomerTransfersurvey)
        try container.encode(bCustomerIsactive, forKey: .bCustomerIsactive)
        try container.encode(bCustomerVariableexpensefinanced, forKey: .bCustomerVariableexpensefinanced)
        try container.encode(bCustomerVariableexpensefinancedtaxes, forKey: .bCustomerVariableexpensefinancedtaxes)
        try container.encode(bCustomerSupplychargefinanced, forKey: .bCustomerSupplychargefinanced)
        try container.encode(bCustomerSupplychargefinancedtaxes, forKey: .bCustomerSupplychargefinancedtaxes)
        try container.encode(bCustomerAttendance, forKey: .bCustomerAttendance)
        try container.encode(eCustomerType, forKey: .eCustomerType)
        try container.encode(eCustomerMarketingcorrespondence, forKey: .eCustomerMarketingcorrespondence)
        try container.encode(bCustomerBlackcopycarbon, forKey: .bCustomerBlackcopycarbon)
        try container.encode(bCustomerUnsubscribeinfo, forKey: .bCustomerUnsubscribeinfo)
        try container.encode(tCustomerComment, forKey: .tCustomerComment)
        try container.encodeIfPresent(IMPORTID, forKey: .IMPORTID)
    }
}

