//
// CustomCommunicationsenderRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Communicationsender Object */
public struct CustomCommunicationsenderRequest: Codable, JSONEncodable, Hashable {

    static let fkiAgentIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiBrokerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiMailboxsharedIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    static let fkiUserIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Agent. */
    public var fkiAgentID: Int?
    /** The unique ID of the Broker. */
    public var fkiBrokerID: Int?
    /** The unique ID of the Mailboxshared */
    public var fkiMailboxsharedID: Int?
    /** The unique ID of the User */
    public var fkiUserID: Int?

    public init(fkiAgentID: Int? = nil, fkiBrokerID: Int? = nil, fkiMailboxsharedID: Int? = nil, fkiUserID: Int? = nil) {
        self.fkiAgentID = fkiAgentID
        self.fkiBrokerID = fkiBrokerID
        self.fkiMailboxsharedID = fkiMailboxsharedID
        self.fkiUserID = fkiUserID
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fkiAgentID
        case fkiBrokerID
        case fkiMailboxsharedID
        case fkiUserID
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fkiAgentID, forKey: .fkiAgentID)
        try container.encodeIfPresent(fkiBrokerID, forKey: .fkiBrokerID)
        try container.encodeIfPresent(fkiMailboxsharedID, forKey: .fkiMailboxsharedID)
        try container.encodeIfPresent(fkiUserID, forKey: .fkiUserID)
    }
}

