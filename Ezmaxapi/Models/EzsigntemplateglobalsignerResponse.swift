//
// EzsigntemplateglobalsignerResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsigntemplateglobalsigner Object */
public struct EzsigntemplateglobalsignerResponse: Codable, JSONEncodable, Hashable {

    public static let pkiEzsigntemplateglobalsignerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiEzsigntemplateglobalIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let sEzsigntemplateglobalsignerDescriptionRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{1,50}$/")
    /** The unique ID of the Ezsigntemplateglobalsigner */
    public var pkiEzsigntemplateglobalsignerID: Int
    /** The unique ID of the Ezsigntemplateglobal */
    public var fkiEzsigntemplateglobalID: Int
    /** The description of the Ezsigntemplateglobalsigner */
    public var sEzsigntemplateglobalsignerDescription: String

    public init(pkiEzsigntemplateglobalsignerID: Int, fkiEzsigntemplateglobalID: Int, sEzsigntemplateglobalsignerDescription: String) {
        self.pkiEzsigntemplateglobalsignerID = pkiEzsigntemplateglobalsignerID
        self.fkiEzsigntemplateglobalID = fkiEzsigntemplateglobalID
        self.sEzsigntemplateglobalsignerDescription = sEzsigntemplateglobalsignerDescription
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsigntemplateglobalsignerID
        case fkiEzsigntemplateglobalID
        case sEzsigntemplateglobalsignerDescription
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsigntemplateglobalsignerID, forKey: .pkiEzsigntemplateglobalsignerID)
        try container.encode(fkiEzsigntemplateglobalID, forKey: .fkiEzsigntemplateglobalID)
        try container.encode(sEzsigntemplateglobalsignerDescription, forKey: .sEzsigntemplateglobalsignerDescription)
    }
}

