//
// EzsigndocumentMatchingtemplateV3Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsigndocument createObject Response */
public struct EzsigndocumentMatchingtemplateV3Response: Codable, JSONEncodable, Hashable {

    public static let pkiEzsigntemplateIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let pkiEzsigntemplateglobalIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Ezsigntemplate */
    public var pkiEzsigntemplateID: Int?
    /** The unique ID of the Ezsigntemplateglobal */
    public var pkiEzsigntemplateglobalID: Int?

    public init(pkiEzsigntemplateID: Int? = nil, pkiEzsigntemplateglobalID: Int? = nil) {
        self.pkiEzsigntemplateID = pkiEzsigntemplateID
        self.pkiEzsigntemplateglobalID = pkiEzsigntemplateglobalID
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsigntemplateID
        case pkiEzsigntemplateglobalID
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiEzsigntemplateID, forKey: .pkiEzsigntemplateID)
        try container.encodeIfPresent(pkiEzsigntemplateglobalID, forKey: .pkiEzsigntemplateglobalID)
    }
}

