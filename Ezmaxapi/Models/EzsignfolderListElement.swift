//
// EzsignfolderListElement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An Ezsignfolder List Element */
public struct EzsignfolderListElement: Codable, JSONEncodable, Hashable {

    static let pkiEzsignfolderIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsignfoldertypeIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    static let sEzsignfolderDescriptionRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,75}$/")
    static let dEzsignfolderCompletedpercentageRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/")
    static let dEzsignfolderFormcompletedpercentageRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/")
    static let dEzsignfolderSignaturecompletedpercentageRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/")
    /** The unique ID of the Ezsignfolder */
    public var pkiEzsignfolderID: Int
    /** The unique ID of the Ezsignfoldertype. */
    public var fkiEzsignfoldertypeID: Int
    public var eEzsignfoldertypePrivacylevel: FieldEEzsignfoldertypePrivacylevel
    /** The name of the Ezsignfoldertype in the language of the requester */
    public var sEzsignfoldertypeNameX: String
    /** The description of the Ezsignfolder */
    public var sEzsignfolderDescription: String
    public var eEzsignfolderStep: FieldEEzsignfolderStep
    /** The date and time at which the object was created */
    public var dtCreatedDate: String
    /** The date and time at which the Ezsignfolder will be sent in the future. */
    public var dtEzsignfolderDelayedsenddate: String?
    /** The date and time at which the Ezsignfolder was sent the last time. */
    public var dtEzsignfolderSentdate: String?
    /** The maximum date and time at which the Ezsignfolder can be signed. */
    public var dtEzsignfolderDuedate: String?
    /** The total number of Ezsigndocument in the folder */
    public var iEzsigndocument: Int
    /** The total number of Ezsigndocument in the folder that were saved in the edm system */
    public var iEzsigndocumentEdm: Int
    /** The total number of signature blocks in all Ezsigndocuments in the folder */
    public var iEzsignsignature: Int
    /** The total number of already signed signature blocks in all Ezsigndocuments in the folder */
    public var iEzsignsignatureSigned: Int
    /** The total number of Ezsignformfieldgroup in all Ezsigndocuments in the folder */
    public var iEzsignformfieldgroup: Int
    /** The total number of completed Ezsignformfieldgroup in all Ezsigndocuments in the folder */
    public var iEzsignformfieldgroupCompleted: Int
    /** Whether the Ezsignform/Ezsignsignatures has dependencies or not */
    public var bEzsignformHasdependencies: Bool?
    /** Percentage of Ezsignform/Ezsignsignatures has completed */
    public var dEzsignfolderCompletedpercentage: String
    /** Percentage of Ezsignform has completed */
    public var dEzsignfolderFormcompletedpercentage: String
    /** Percentage of Ezsignsignatures has signed */
    public var dEzsignfolderSignaturecompletedpercentage: String
    /** Whether the Ezsignfolder has an Ezsignsignatures that need to be signed or an Ezsignformfieldgroups that need to be filled by the current user */
    public var bEzsignfolderSigner: Bool?

    public init(pkiEzsignfolderID: Int, fkiEzsignfoldertypeID: Int, eEzsignfoldertypePrivacylevel: FieldEEzsignfoldertypePrivacylevel, sEzsignfoldertypeNameX: String, sEzsignfolderDescription: String, eEzsignfolderStep: FieldEEzsignfolderStep, dtCreatedDate: String, dtEzsignfolderDelayedsenddate: String? = nil, dtEzsignfolderSentdate: String? = nil, dtEzsignfolderDuedate: String? = nil, iEzsigndocument: Int, iEzsigndocumentEdm: Int, iEzsignsignature: Int, iEzsignsignatureSigned: Int, iEzsignformfieldgroup: Int, iEzsignformfieldgroupCompleted: Int, bEzsignformHasdependencies: Bool? = nil, dEzsignfolderCompletedpercentage: String, dEzsignfolderFormcompletedpercentage: String, dEzsignfolderSignaturecompletedpercentage: String, bEzsignfolderSigner: Bool? = nil) {
        self.pkiEzsignfolderID = pkiEzsignfolderID
        self.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID
        self.eEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel
        self.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX
        self.sEzsignfolderDescription = sEzsignfolderDescription
        self.eEzsignfolderStep = eEzsignfolderStep
        self.dtCreatedDate = dtCreatedDate
        self.dtEzsignfolderDelayedsenddate = dtEzsignfolderDelayedsenddate
        self.dtEzsignfolderSentdate = dtEzsignfolderSentdate
        self.dtEzsignfolderDuedate = dtEzsignfolderDuedate
        self.iEzsigndocument = iEzsigndocument
        self.iEzsigndocumentEdm = iEzsigndocumentEdm
        self.iEzsignsignature = iEzsignsignature
        self.iEzsignsignatureSigned = iEzsignsignatureSigned
        self.iEzsignformfieldgroup = iEzsignformfieldgroup
        self.iEzsignformfieldgroupCompleted = iEzsignformfieldgroupCompleted
        self.bEzsignformHasdependencies = bEzsignformHasdependencies
        self.dEzsignfolderCompletedpercentage = dEzsignfolderCompletedpercentage
        self.dEzsignfolderFormcompletedpercentage = dEzsignfolderFormcompletedpercentage
        self.dEzsignfolderSignaturecompletedpercentage = dEzsignfolderSignaturecompletedpercentage
        self.bEzsignfolderSigner = bEzsignfolderSigner
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsignfolderID
        case fkiEzsignfoldertypeID
        case eEzsignfoldertypePrivacylevel
        case sEzsignfoldertypeNameX
        case sEzsignfolderDescription
        case eEzsignfolderStep
        case dtCreatedDate
        case dtEzsignfolderDelayedsenddate
        case dtEzsignfolderSentdate
        case dtEzsignfolderDuedate
        case iEzsigndocument
        case iEzsigndocumentEdm
        case iEzsignsignature
        case iEzsignsignatureSigned
        case iEzsignformfieldgroup
        case iEzsignformfieldgroupCompleted
        case bEzsignformHasdependencies
        case dEzsignfolderCompletedpercentage
        case dEzsignfolderFormcompletedpercentage
        case dEzsignfolderSignaturecompletedpercentage
        case bEzsignfolderSigner
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsignfolderID, forKey: .pkiEzsignfolderID)
        try container.encode(fkiEzsignfoldertypeID, forKey: .fkiEzsignfoldertypeID)
        try container.encode(eEzsignfoldertypePrivacylevel, forKey: .eEzsignfoldertypePrivacylevel)
        try container.encode(sEzsignfoldertypeNameX, forKey: .sEzsignfoldertypeNameX)
        try container.encode(sEzsignfolderDescription, forKey: .sEzsignfolderDescription)
        try container.encode(eEzsignfolderStep, forKey: .eEzsignfolderStep)
        try container.encode(dtCreatedDate, forKey: .dtCreatedDate)
        try container.encodeIfPresent(dtEzsignfolderDelayedsenddate, forKey: .dtEzsignfolderDelayedsenddate)
        try container.encodeIfPresent(dtEzsignfolderSentdate, forKey: .dtEzsignfolderSentdate)
        try container.encodeIfPresent(dtEzsignfolderDuedate, forKey: .dtEzsignfolderDuedate)
        try container.encode(iEzsigndocument, forKey: .iEzsigndocument)
        try container.encode(iEzsigndocumentEdm, forKey: .iEzsigndocumentEdm)
        try container.encode(iEzsignsignature, forKey: .iEzsignsignature)
        try container.encode(iEzsignsignatureSigned, forKey: .iEzsignsignatureSigned)
        try container.encode(iEzsignformfieldgroup, forKey: .iEzsignformfieldgroup)
        try container.encode(iEzsignformfieldgroupCompleted, forKey: .iEzsignformfieldgroupCompleted)
        try container.encodeIfPresent(bEzsignformHasdependencies, forKey: .bEzsignformHasdependencies)
        try container.encode(dEzsignfolderCompletedpercentage, forKey: .dEzsignfolderCompletedpercentage)
        try container.encode(dEzsignfolderFormcompletedpercentage, forKey: .dEzsignfolderFormcompletedpercentage)
        try container.encode(dEzsignfolderSignaturecompletedpercentage, forKey: .dEzsignfolderSignaturecompletedpercentage)
        try container.encodeIfPresent(bEzsignfolderSigner, forKey: .bEzsignfolderSigner)
    }
}

