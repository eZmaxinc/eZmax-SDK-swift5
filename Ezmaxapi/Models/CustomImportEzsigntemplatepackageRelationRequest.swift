//
// CustomImportEzsigntemplatepackageRelationRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The object used in /1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage Request */
public struct CustomImportEzsigntemplatepackageRelationRequest: Codable, JSONEncodable, Hashable {

    public static let fkiEzsigntemplatepackagesignerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiEzsignfoldersignerassociationIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Ezsigntemplatepackagesigner */
    public var fkiEzsigntemplatepackagesignerID: Int?
    /** The unique ID of the Ezsignfoldersignerassociation */
    public var fkiEzsignfoldersignerassociationID: Int
    /** The description of the Ezsigntemplatepackagesigner */
    public var sEzsigntemplatepackagesignerDescription: String?

    public init(fkiEzsigntemplatepackagesignerID: Int? = nil, fkiEzsignfoldersignerassociationID: Int, sEzsigntemplatepackagesignerDescription: String? = nil) {
        self.fkiEzsigntemplatepackagesignerID = fkiEzsigntemplatepackagesignerID
        self.fkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID
        self.sEzsigntemplatepackagesignerDescription = sEzsigntemplatepackagesignerDescription
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fkiEzsigntemplatepackagesignerID
        case fkiEzsignfoldersignerassociationID
        case sEzsigntemplatepackagesignerDescription
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fkiEzsigntemplatepackagesignerID, forKey: .fkiEzsigntemplatepackagesignerID)
        try container.encode(fkiEzsignfoldersignerassociationID, forKey: .fkiEzsignfoldersignerassociationID)
        try container.encodeIfPresent(sEzsigntemplatepackagesignerDescription, forKey: .sEzsigntemplatepackagesignerDescription)
    }
}

