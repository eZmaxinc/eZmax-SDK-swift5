//
// EzsigntemplatepackageRequestCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsigntemplatepackage Object and children */
public struct EzsigntemplatepackageRequestCompound: Codable, JSONEncodable, Hashable {

    static let pkiEzsigntemplatepackageIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsignfoldertypeIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    static let fkiLanguageIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Ezsigntemplatepackage */
    public var pkiEzsigntemplatepackageID: Int?
    /** The unique ID of the Ezsignfoldertype. */
    public var fkiEzsignfoldertypeID: Int
    /** The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| */
    public var fkiLanguageID: Int
    /** The description of the Ezsigntemplatepackage */
    public var sEzsigntemplatepackageDescription: String
    /** Whether the Ezsigntemplatepackage can be accessed by admin users only (eUserType=Normal) */
    public var bEzsigntemplatepackageAdminonly: Bool
    /** Whether the Ezsigntemplatepackage is active or not */
    public var bEzsigntemplatepackageIsactive: Bool

    public init(pkiEzsigntemplatepackageID: Int? = nil, fkiEzsignfoldertypeID: Int, fkiLanguageID: Int, sEzsigntemplatepackageDescription: String, bEzsigntemplatepackageAdminonly: Bool, bEzsigntemplatepackageIsactive: Bool) {
        self.pkiEzsigntemplatepackageID = pkiEzsigntemplatepackageID
        self.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID
        self.fkiLanguageID = fkiLanguageID
        self.sEzsigntemplatepackageDescription = sEzsigntemplatepackageDescription
        self.bEzsigntemplatepackageAdminonly = bEzsigntemplatepackageAdminonly
        self.bEzsigntemplatepackageIsactive = bEzsigntemplatepackageIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsigntemplatepackageID
        case fkiEzsignfoldertypeID
        case fkiLanguageID
        case sEzsigntemplatepackageDescription
        case bEzsigntemplatepackageAdminonly
        case bEzsigntemplatepackageIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiEzsigntemplatepackageID, forKey: .pkiEzsigntemplatepackageID)
        try container.encode(fkiEzsignfoldertypeID, forKey: .fkiEzsignfoldertypeID)
        try container.encode(fkiLanguageID, forKey: .fkiLanguageID)
        try container.encode(sEzsigntemplatepackageDescription, forKey: .sEzsigntemplatepackageDescription)
        try container.encode(bEzsigntemplatepackageAdminonly, forKey: .bEzsigntemplatepackageAdminonly)
        try container.encode(bEzsigntemplatepackageIsactive, forKey: .bEzsigntemplatepackageIsactive)
    }
}

