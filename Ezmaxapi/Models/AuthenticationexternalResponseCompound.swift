//
// AuthenticationexternalResponseCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Authenticationexternal Object */
public struct AuthenticationexternalResponseCompound: Codable, JSONEncodable, Hashable {

    public static let pkiAuthenticationexternalIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let sAuthenticationexternalDescriptionRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    public static let sAuthenticationexternalAuthorizationurlRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(https|http):\/\/[^\\s\/$.?#].[^\\s]*$/")
    /** The unique ID of the Authenticationexternal */
    public var pkiAuthenticationexternalID: Int
    /** The description of the Authenticationexternal */
    public var sAuthenticationexternalDescription: String
    public var eAuthenticationexternalType: FieldEAuthenticationexternalType
    /** Whether the Authenticationexternal has been connected or not */
    public var bAuthenticationexternalConnected: Bool?
    /** The url to authorize the Authenticationexternal */
    public var sAuthenticationexternalAuthorizationurl: String?
    public var objAudit: CommonAudit

    public init(pkiAuthenticationexternalID: Int, sAuthenticationexternalDescription: String, eAuthenticationexternalType: FieldEAuthenticationexternalType, bAuthenticationexternalConnected: Bool? = nil, sAuthenticationexternalAuthorizationurl: String? = nil, objAudit: CommonAudit) {
        self.pkiAuthenticationexternalID = pkiAuthenticationexternalID
        self.sAuthenticationexternalDescription = sAuthenticationexternalDescription
        self.eAuthenticationexternalType = eAuthenticationexternalType
        self.bAuthenticationexternalConnected = bAuthenticationexternalConnected
        self.sAuthenticationexternalAuthorizationurl = sAuthenticationexternalAuthorizationurl
        self.objAudit = objAudit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiAuthenticationexternalID
        case sAuthenticationexternalDescription
        case eAuthenticationexternalType
        case bAuthenticationexternalConnected
        case sAuthenticationexternalAuthorizationurl
        case objAudit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiAuthenticationexternalID, forKey: .pkiAuthenticationexternalID)
        try container.encode(sAuthenticationexternalDescription, forKey: .sAuthenticationexternalDescription)
        try container.encode(eAuthenticationexternalType, forKey: .eAuthenticationexternalType)
        try container.encodeIfPresent(bAuthenticationexternalConnected, forKey: .bAuthenticationexternalConnected)
        try container.encodeIfPresent(sAuthenticationexternalAuthorizationurl, forKey: .sAuthenticationexternalAuthorizationurl)
        try container.encode(objAudit, forKey: .objAudit)
    }
}

