//
// DiscussionRequestCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Discussion Object and children */
public struct DiscussionRequestCompound: Codable, JSONEncodable, Hashable {

    static let pkiDiscussionIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    static let sDiscussionDescriptionRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,75}$/")
    /** The unique ID of the Discussion */
    public var pkiDiscussionID: Int?
    /** The description of the Discussion */
    public var sDiscussionDescription: String
    /** Whether if it's an closed */
    public var bDiscussionClosed: Bool?

    public init(pkiDiscussionID: Int? = nil, sDiscussionDescription: String, bDiscussionClosed: Bool? = nil) {
        self.pkiDiscussionID = pkiDiscussionID
        self.sDiscussionDescription = sDiscussionDescription
        self.bDiscussionClosed = bDiscussionClosed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiDiscussionID
        case sDiscussionDescription
        case bDiscussionClosed
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiDiscussionID, forKey: .pkiDiscussionID)
        try container.encode(sDiscussionDescription, forKey: .sDiscussionDescription)
        try container.encodeIfPresent(bDiscussionClosed, forKey: .bDiscussionClosed)
    }
}

