//
// EzdoctemplatetypeAutocompleteElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezdoctemplatetype AutocompleteElement Response */
public struct EzdoctemplatetypeAutocompleteElementResponse: Codable, JSONEncodable, Hashable {

    static let pkiEzdoctemplatetypeIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    static let sEzdoctemplatetypeDescriptionXRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    /** The unique ID of the Ezdoctemplatetype */
    public var pkiEzdoctemplatetypeID: Int
    /** The description of the Ezdoctemplatetype in the language of the requester */
    public var sEzdoctemplatetypeDescriptionX: String
    /** Whether the Ezdoctemplatetype is active or not */
    public var bEzdoctemplatetypeIsactive: Bool

    public init(pkiEzdoctemplatetypeID: Int, sEzdoctemplatetypeDescriptionX: String, bEzdoctemplatetypeIsactive: Bool) {
        self.pkiEzdoctemplatetypeID = pkiEzdoctemplatetypeID
        self.sEzdoctemplatetypeDescriptionX = sEzdoctemplatetypeDescriptionX
        self.bEzdoctemplatetypeIsactive = bEzdoctemplatetypeIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzdoctemplatetypeID
        case sEzdoctemplatetypeDescriptionX
        case bEzdoctemplatetypeIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzdoctemplatetypeID, forKey: .pkiEzdoctemplatetypeID)
        try container.encode(sEzdoctemplatetypeDescriptionX, forKey: .sEzdoctemplatetypeDescriptionX)
        try container.encode(bEzdoctemplatetypeIsactive, forKey: .bEzdoctemplatetypeIsactive)
    }
}

