//
// CustomEzsignsignatureEzsignsignaturesAutomaticResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An Ezsignsignature Object in the context of an EzsignsignaturesAutomatic path */
public struct CustomEzsignsignatureEzsignsignaturesAutomaticResponse: Codable, JSONEncodable, Hashable {

    public static let pkiEzsignsignatureIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let iEzsignpagePagenumberRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Ezsignsignature */
    public var pkiEzsignsignatureID: Int
    public var eEzsignsignatureType: FieldEEzsignsignatureType
    /** The page number in the Ezsigndocument */
    public var iEzsignpagePagenumber: Int

    public init(pkiEzsignsignatureID: Int, eEzsignsignatureType: FieldEEzsignsignatureType, iEzsignpagePagenumber: Int) {
        self.pkiEzsignsignatureID = pkiEzsignsignatureID
        self.eEzsignsignatureType = eEzsignsignatureType
        self.iEzsignpagePagenumber = iEzsignpagePagenumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsignsignatureID
        case eEzsignsignatureType
        case iEzsignpagePagenumber
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsignsignatureID, forKey: .pkiEzsignsignatureID)
        try container.encode(eEzsignsignatureType, forKey: .eEzsignsignatureType)
        try container.encode(iEzsignpagePagenumber, forKey: .iEzsignpagePagenumber)
    }
}

