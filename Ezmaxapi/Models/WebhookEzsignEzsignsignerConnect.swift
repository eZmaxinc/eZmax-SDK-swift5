//
// WebhookEzsignEzsignsignerConnect.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** This is the base Webhook object */
public struct WebhookEzsignEzsignsignerConnect: Codable, JSONEncodable, Hashable {

    public var objWebhook: CustomWebhookResponse
    /** An array containing details of previous attempts that were made to deliver the message. The array is empty if it's the first attempt. */
    public var aObjAttempt: [AttemptResponseCompound]
    public var objEzsignfolder: EzsignfolderResponse?
    public var objEzsignfoldersignerassociation: EzsignfoldersignerassociationResponseCompound

    public init(objWebhook: CustomWebhookResponse, aObjAttempt: [AttemptResponseCompound], objEzsignfolder: EzsignfolderResponse? = nil, objEzsignfoldersignerassociation: EzsignfoldersignerassociationResponseCompound) {
        self.objWebhook = objWebhook
        self.aObjAttempt = aObjAttempt
        self.objEzsignfolder = objEzsignfolder
        self.objEzsignfoldersignerassociation = objEzsignfoldersignerassociation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case objWebhook
        case aObjAttempt = "a_objAttempt"
        case objEzsignfolder
        case objEzsignfoldersignerassociation
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(objWebhook, forKey: .objWebhook)
        try container.encode(aObjAttempt, forKey: .aObjAttempt)
        try container.encodeIfPresent(objEzsignfolder, forKey: .objEzsignfolder)
        try container.encode(objEzsignfoldersignerassociation, forKey: .objEzsignfoldersignerassociation)
    }
}

