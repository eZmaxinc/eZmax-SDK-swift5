//
// CreditcardmerchantListElement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Creditcardmerchant List Element */
public struct CreditcardmerchantListElement: Codable, JSONEncodable, Hashable {

    public static let pkiCreditcardmerchantIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiBankaccountIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiLanguageIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    public static let sCreditcardmerchantDescriptionRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,25}$/")
    public static let sCreditcardmerchantStoreidRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,25}$/")
    /** The unique ID of the Creditcardmerchant */
    public var pkiCreditcardmerchantID: Int
    /** The unique ID of the Bankaccount */
    public var fkiBankaccountID: Int
    /** The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| */
    public var fkiLanguageID: Int?
    /** Whether if visa are denied */
    public var bCreditcardmerchantDenyvisa: Bool
    /** Whether if mastercard are denied */
    public var bCreditcardmerchantDenymastercard: Bool
    /** Whether if amex are denied */
    public var bCreditcardmerchantDenyamex: Bool
    /** Whether the creditcardmerchant is active or not */
    public var bCreditcardmerchantIsactive: Bool
    /** The description of the Creditcardmerchant */
    public var sCreditcardmerchantDescription: String
    /** The storeid of the Creditcardmerchant */
    public var sCreditcardmerchantStoreid: String

    public init(pkiCreditcardmerchantID: Int, fkiBankaccountID: Int, fkiLanguageID: Int? = nil, bCreditcardmerchantDenyvisa: Bool, bCreditcardmerchantDenymastercard: Bool, bCreditcardmerchantDenyamex: Bool, bCreditcardmerchantIsactive: Bool, sCreditcardmerchantDescription: String, sCreditcardmerchantStoreid: String) {
        self.pkiCreditcardmerchantID = pkiCreditcardmerchantID
        self.fkiBankaccountID = fkiBankaccountID
        self.fkiLanguageID = fkiLanguageID
        self.bCreditcardmerchantDenyvisa = bCreditcardmerchantDenyvisa
        self.bCreditcardmerchantDenymastercard = bCreditcardmerchantDenymastercard
        self.bCreditcardmerchantDenyamex = bCreditcardmerchantDenyamex
        self.bCreditcardmerchantIsactive = bCreditcardmerchantIsactive
        self.sCreditcardmerchantDescription = sCreditcardmerchantDescription
        self.sCreditcardmerchantStoreid = sCreditcardmerchantStoreid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCreditcardmerchantID
        case fkiBankaccountID
        case fkiLanguageID
        case bCreditcardmerchantDenyvisa
        case bCreditcardmerchantDenymastercard
        case bCreditcardmerchantDenyamex
        case bCreditcardmerchantIsactive
        case sCreditcardmerchantDescription
        case sCreditcardmerchantStoreid
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiCreditcardmerchantID, forKey: .pkiCreditcardmerchantID)
        try container.encode(fkiBankaccountID, forKey: .fkiBankaccountID)
        try container.encodeIfPresent(fkiLanguageID, forKey: .fkiLanguageID)
        try container.encode(bCreditcardmerchantDenyvisa, forKey: .bCreditcardmerchantDenyvisa)
        try container.encode(bCreditcardmerchantDenymastercard, forKey: .bCreditcardmerchantDenymastercard)
        try container.encode(bCreditcardmerchantDenyamex, forKey: .bCreditcardmerchantDenyamex)
        try container.encode(bCreditcardmerchantIsactive, forKey: .bCreditcardmerchantIsactive)
        try container.encode(sCreditcardmerchantDescription, forKey: .sCreditcardmerchantDescription)
        try container.encode(sCreditcardmerchantStoreid, forKey: .sCreditcardmerchantStoreid)
    }
}

