//
// EzsignsigningreasonResponseCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsignsigningreason Object */
public struct EzsignsigningreasonResponseCompound: Codable, JSONEncodable, Hashable {

    public static let pkiEzsignsigningreasonIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Ezsignsigningreason */
    public var pkiEzsignsigningreasonID: Int
    public var objEzsignsigningreasonDescription: MultilingualEzsignsigningreasonDescription
    /** Whether the ezsignsigningreason is active or not */
    public var bEzsignsigningreasonIsactive: Bool

    public init(pkiEzsignsigningreasonID: Int, objEzsignsigningreasonDescription: MultilingualEzsignsigningreasonDescription, bEzsignsigningreasonIsactive: Bool) {
        self.pkiEzsignsigningreasonID = pkiEzsignsigningreasonID
        self.objEzsignsigningreasonDescription = objEzsignsigningreasonDescription
        self.bEzsignsigningreasonIsactive = bEzsignsigningreasonIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsignsigningreasonID
        case objEzsignsigningreasonDescription
        case bEzsignsigningreasonIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsignsigningreasonID, forKey: .pkiEzsignsigningreasonID)
        try container.encode(objEzsignsigningreasonDescription, forKey: .objEzsignsigningreasonDescription)
        try container.encode(bEzsignsigningreasonIsactive, forKey: .bEzsignsigningreasonIsactive)
    }
}

