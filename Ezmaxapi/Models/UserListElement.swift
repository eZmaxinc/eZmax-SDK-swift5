//
// UserListElement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A User List Element */
public struct UserListElement: Codable, JSONEncodable, Hashable {

    static let pkiUserIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let sUserLoginnameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,20})|([a-zA-Z0-9]){1,32})$/")
    static let dtUserEzsignprepaidexpirationRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/")
    static let sUserJobtitleRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    /** The unique ID of the User */
    public var pkiUserID: Int
    /** The first name of the user */
    public var sUserFirstname: String
    /** The last name of the user */
    public var sUserLastname: String
    /** The login name of the User. */
    public var sUserLoginname: String
    /** Whether the User is active or not */
    public var bUserIsactive: Bool
    public var eUserType: FieldEUserType
    public var eUserOrigin: FieldEUserOrigin
    public var eUserEzsignaccess: FieldEUserEzsignaccess
    /** The eZsign prepaid expiration date */
    public var dtUserEzsignprepaidexpiration: String?
    /** The email address. */
    public var sEmailAddress: String
    /** The job title of the user */
    public var sUserJobtitle: String?

    public init(pkiUserID: Int, sUserFirstname: String, sUserLastname: String, sUserLoginname: String, bUserIsactive: Bool, eUserType: FieldEUserType, eUserOrigin: FieldEUserOrigin, eUserEzsignaccess: FieldEUserEzsignaccess, dtUserEzsignprepaidexpiration: String? = nil, sEmailAddress: String, sUserJobtitle: String? = nil) {
        self.pkiUserID = pkiUserID
        self.sUserFirstname = sUserFirstname
        self.sUserLastname = sUserLastname
        self.sUserLoginname = sUserLoginname
        self.bUserIsactive = bUserIsactive
        self.eUserType = eUserType
        self.eUserOrigin = eUserOrigin
        self.eUserEzsignaccess = eUserEzsignaccess
        self.dtUserEzsignprepaidexpiration = dtUserEzsignprepaidexpiration
        self.sEmailAddress = sEmailAddress
        self.sUserJobtitle = sUserJobtitle
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiUserID
        case sUserFirstname
        case sUserLastname
        case sUserLoginname
        case bUserIsactive
        case eUserType
        case eUserOrigin
        case eUserEzsignaccess
        case dtUserEzsignprepaidexpiration
        case sEmailAddress
        case sUserJobtitle
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiUserID, forKey: .pkiUserID)
        try container.encode(sUserFirstname, forKey: .sUserFirstname)
        try container.encode(sUserLastname, forKey: .sUserLastname)
        try container.encode(sUserLoginname, forKey: .sUserLoginname)
        try container.encode(bUserIsactive, forKey: .bUserIsactive)
        try container.encode(eUserType, forKey: .eUserType)
        try container.encode(eUserOrigin, forKey: .eUserOrigin)
        try container.encode(eUserEzsignaccess, forKey: .eUserEzsignaccess)
        try container.encodeIfPresent(dtUserEzsignprepaidexpiration, forKey: .dtUserEzsignprepaidexpiration)
        try container.encode(sEmailAddress, forKey: .sEmailAddress)
        try container.encodeIfPresent(sUserJobtitle, forKey: .sUserJobtitle)
    }
}

