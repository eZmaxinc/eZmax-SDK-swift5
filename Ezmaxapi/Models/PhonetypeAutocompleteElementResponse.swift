//
// PhonetypeAutocompleteElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Phonetype AutocompleteElement Response */
public struct PhonetypeAutocompleteElementResponse: Codable, JSONEncodable, Hashable {

    public static let pkiPhonetypeIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let sPhonetypeNameXRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,20}$/")
    /** The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free| */
    public var pkiPhonetypeID: Int
    /** The name of the Phonetype in the language of the requester */
    public var sPhonetypeNameX: String
    /** Whether the Phonetype is active or not */
    public var bPhonetypeIsactive: Bool

    public init(pkiPhonetypeID: Int, sPhonetypeNameX: String, bPhonetypeIsactive: Bool) {
        self.pkiPhonetypeID = pkiPhonetypeID
        self.sPhonetypeNameX = sPhonetypeNameX
        self.bPhonetypeIsactive = bPhonetypeIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiPhonetypeID
        case sPhonetypeNameX
        case bPhonetypeIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiPhonetypeID, forKey: .pkiPhonetypeID)
        try container.encode(sPhonetypeNameX, forKey: .sPhonetypeNameX)
        try container.encode(bPhonetypeIsactive, forKey: .bPhonetypeIsactive)
    }
}

