//
// PaymenttermRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Paymentterm Object */
public struct PaymenttermRequest: Codable, JSONEncodable, Hashable {

    public static let sPaymenttermCodeRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[A-Z0-9]{1,4}$/")
    public static let iPaymenttermDayRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Paymentterm */
    public var pkiPaymenttermID: Int?
    /** The code of the Paymentterm */
    public var sPaymenttermCode: String
    public var ePaymenttermType: FieldEPaymenttermType
    /** The day of the Paymentterm */
    public var iPaymenttermDay: Int
    public var objPaymenttermDescription: MultilingualPaymenttermDescription
    /** Whether the Paymentterm is active or not */
    public var bPaymenttermIsactive: Bool

    public init(pkiPaymenttermID: Int? = nil, sPaymenttermCode: String, ePaymenttermType: FieldEPaymenttermType, iPaymenttermDay: Int, objPaymenttermDescription: MultilingualPaymenttermDescription, bPaymenttermIsactive: Bool) {
        self.pkiPaymenttermID = pkiPaymenttermID
        self.sPaymenttermCode = sPaymenttermCode
        self.ePaymenttermType = ePaymenttermType
        self.iPaymenttermDay = iPaymenttermDay
        self.objPaymenttermDescription = objPaymenttermDescription
        self.bPaymenttermIsactive = bPaymenttermIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiPaymenttermID
        case sPaymenttermCode
        case ePaymenttermType
        case iPaymenttermDay
        case objPaymenttermDescription
        case bPaymenttermIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiPaymenttermID, forKey: .pkiPaymenttermID)
        try container.encode(sPaymenttermCode, forKey: .sPaymenttermCode)
        try container.encode(ePaymenttermType, forKey: .ePaymenttermType)
        try container.encode(iPaymenttermDay, forKey: .iPaymenttermDay)
        try container.encode(objPaymenttermDescription, forKey: .objPaymenttermDescription)
        try container.encode(bPaymenttermIsactive, forKey: .bPaymenttermIsactive)
    }
}

