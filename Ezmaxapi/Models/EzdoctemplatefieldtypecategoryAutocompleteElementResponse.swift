//
// EzdoctemplatefieldtypecategoryAutocompleteElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezdoctemplatefieldtypecategory AutocompleteElement Response */
public struct EzdoctemplatefieldtypecategoryAutocompleteElementResponse: Codable, JSONEncodable, Hashable {

    static let pkiEzdoctemplatefieldtypecategoryIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzdoctemplatetypeIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    static let sEzdoctemplatefieldtypecategoryDescriptionXRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,55}$/")
    /** The unique ID of the Ezdoctemplatefieldtypecategory */
    public var pkiEzdoctemplatefieldtypecategoryID: Int
    /** The unique ID of the Ezdoctemplatetype */
    public var fkiEzdoctemplatetypeID: Int
    /** The description of the Ezdoctemplatefieldtypecategory in the language of the requester */
    public var sEzdoctemplatefieldtypecategoryDescriptionX: String
    /** Whether the Ezdoctemplatefieldtypecategory is active or not */
    public var bEzdoctemplatefieldtypecategoryIsactive: Bool

    public init(pkiEzdoctemplatefieldtypecategoryID: Int, fkiEzdoctemplatetypeID: Int, sEzdoctemplatefieldtypecategoryDescriptionX: String, bEzdoctemplatefieldtypecategoryIsactive: Bool) {
        self.pkiEzdoctemplatefieldtypecategoryID = pkiEzdoctemplatefieldtypecategoryID
        self.fkiEzdoctemplatetypeID = fkiEzdoctemplatetypeID
        self.sEzdoctemplatefieldtypecategoryDescriptionX = sEzdoctemplatefieldtypecategoryDescriptionX
        self.bEzdoctemplatefieldtypecategoryIsactive = bEzdoctemplatefieldtypecategoryIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzdoctemplatefieldtypecategoryID
        case fkiEzdoctemplatetypeID
        case sEzdoctemplatefieldtypecategoryDescriptionX
        case bEzdoctemplatefieldtypecategoryIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzdoctemplatefieldtypecategoryID, forKey: .pkiEzdoctemplatefieldtypecategoryID)
        try container.encode(fkiEzdoctemplatetypeID, forKey: .fkiEzdoctemplatetypeID)
        try container.encode(sEzdoctemplatefieldtypecategoryDescriptionX, forKey: .sEzdoctemplatefieldtypecategoryDescriptionX)
        try container.encode(bEzdoctemplatefieldtypecategoryIsactive, forKey: .bEzdoctemplatefieldtypecategoryIsactive)
    }
}

