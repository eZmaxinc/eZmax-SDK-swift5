//
// DiscussionmessageResponseCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Discussionmessage Object and children */
public struct DiscussionmessageResponseCompound: Codable, JSONEncodable, Hashable {

    public static let pkiDiscussionmessageIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiDiscussionIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiDiscussionmembershipIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiDiscussionmembershipIDActionrequiredRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let tDiscussionmessageContentRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,65535}$/")
    public static let sDiscussionmessageCreatornameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,75}$/")
    public static let sDiscussionmessageActionrequirednameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,75}$/")
    /** The unique ID of the Discussionmessage */
    public var pkiDiscussionmessageID: Int
    /** The unique ID of the Discussion */
    public var fkiDiscussionID: Int
    /** The unique ID of the Discussionmembership */
    public var fkiDiscussionmembershipID: Int?
    /** The unique ID of the Discussionmembership */
    public var fkiDiscussionmembershipIDActionrequired: Int?
    public var eDiscussionmessageStatus: FieldEDiscussionmessageStatus
    /** The content of the Discussionmessage */
    public var tDiscussionmessageContent: String
    /** The name the creator of the Discussionmessage. */
    public var sDiscussionmessageCreatorname: String
    /** The name the Actionrequired of the Discussionmessage. */
    public var sDiscussionmessageActionrequiredname: String?
    public var objAudit: CommonAudit

    public init(pkiDiscussionmessageID: Int, fkiDiscussionID: Int, fkiDiscussionmembershipID: Int? = nil, fkiDiscussionmembershipIDActionrequired: Int? = nil, eDiscussionmessageStatus: FieldEDiscussionmessageStatus, tDiscussionmessageContent: String, sDiscussionmessageCreatorname: String, sDiscussionmessageActionrequiredname: String? = nil, objAudit: CommonAudit) {
        self.pkiDiscussionmessageID = pkiDiscussionmessageID
        self.fkiDiscussionID = fkiDiscussionID
        self.fkiDiscussionmembershipID = fkiDiscussionmembershipID
        self.fkiDiscussionmembershipIDActionrequired = fkiDiscussionmembershipIDActionrequired
        self.eDiscussionmessageStatus = eDiscussionmessageStatus
        self.tDiscussionmessageContent = tDiscussionmessageContent
        self.sDiscussionmessageCreatorname = sDiscussionmessageCreatorname
        self.sDiscussionmessageActionrequiredname = sDiscussionmessageActionrequiredname
        self.objAudit = objAudit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiDiscussionmessageID
        case fkiDiscussionID
        case fkiDiscussionmembershipID
        case fkiDiscussionmembershipIDActionrequired
        case eDiscussionmessageStatus
        case tDiscussionmessageContent
        case sDiscussionmessageCreatorname
        case sDiscussionmessageActionrequiredname
        case objAudit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiDiscussionmessageID, forKey: .pkiDiscussionmessageID)
        try container.encode(fkiDiscussionID, forKey: .fkiDiscussionID)
        try container.encodeIfPresent(fkiDiscussionmembershipID, forKey: .fkiDiscussionmembershipID)
        try container.encodeIfPresent(fkiDiscussionmembershipIDActionrequired, forKey: .fkiDiscussionmembershipIDActionrequired)
        try container.encode(eDiscussionmessageStatus, forKey: .eDiscussionmessageStatus)
        try container.encode(tDiscussionmessageContent, forKey: .tDiscussionmessageContent)
        try container.encode(sDiscussionmessageCreatorname, forKey: .sDiscussionmessageCreatorname)
        try container.encodeIfPresent(sDiscussionmessageActionrequiredname, forKey: .sDiscussionmessageActionrequiredname)
        try container.encode(objAudit, forKey: .objAudit)
    }
}

