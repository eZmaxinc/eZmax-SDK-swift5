//
// CommunicationreferenceRequestCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Communicationreference Object and children */
public struct CommunicationreferenceRequestCompound: Codable, JSONEncodable, Hashable {

    public static let pkiCommunicationreferenceIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 4294967295, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiBuyercontractIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiEzsignfolderIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiInscriptionIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiInscriptiontempIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiInvoiceIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiOtherincomeIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiElectronicfundstransferIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiRejectedoffertopurchaseIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Communicationreference */
    public var pkiCommunicationreferenceID: Int?
    /** The unique ID of the Buyercontract */
    public var fkiBuyercontractID: Int?
    /** The unique ID of the Ezsignfolder */
    public var fkiEzsignfolderID: Int?
    /** The unique ID of the Inscription. */
    public var fkiInscriptionID: Int?
    /** The unique ID of the Inscriptiontemp */
    public var fkiInscriptiontempID: Int?
    /** The unique ID of the Invoice. */
    public var fkiInvoiceID: Int?
    /** The unique ID of the Otherincome */
    public var fkiOtherincomeID: Int?
    /** The unique ID of the Electronicfundstransfer */
    public var fkiElectronicfundstransferID: Int?
    /** The unique ID of the Rejectedoffertopurchase */
    public var fkiRejectedoffertopurchaseID: Int?

    public init(pkiCommunicationreferenceID: Int? = nil, fkiBuyercontractID: Int? = nil, fkiEzsignfolderID: Int? = nil, fkiInscriptionID: Int? = nil, fkiInscriptiontempID: Int? = nil, fkiInvoiceID: Int? = nil, fkiOtherincomeID: Int? = nil, fkiElectronicfundstransferID: Int? = nil, fkiRejectedoffertopurchaseID: Int? = nil) {
        self.pkiCommunicationreferenceID = pkiCommunicationreferenceID
        self.fkiBuyercontractID = fkiBuyercontractID
        self.fkiEzsignfolderID = fkiEzsignfolderID
        self.fkiInscriptionID = fkiInscriptionID
        self.fkiInscriptiontempID = fkiInscriptiontempID
        self.fkiInvoiceID = fkiInvoiceID
        self.fkiOtherincomeID = fkiOtherincomeID
        self.fkiElectronicfundstransferID = fkiElectronicfundstransferID
        self.fkiRejectedoffertopurchaseID = fkiRejectedoffertopurchaseID
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCommunicationreferenceID
        case fkiBuyercontractID
        case fkiEzsignfolderID
        case fkiInscriptionID
        case fkiInscriptiontempID
        case fkiInvoiceID
        case fkiOtherincomeID
        case fkiElectronicfundstransferID
        case fkiRejectedoffertopurchaseID
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiCommunicationreferenceID, forKey: .pkiCommunicationreferenceID)
        try container.encodeIfPresent(fkiBuyercontractID, forKey: .fkiBuyercontractID)
        try container.encodeIfPresent(fkiEzsignfolderID, forKey: .fkiEzsignfolderID)
        try container.encodeIfPresent(fkiInscriptionID, forKey: .fkiInscriptionID)
        try container.encodeIfPresent(fkiInscriptiontempID, forKey: .fkiInscriptiontempID)
        try container.encodeIfPresent(fkiInvoiceID, forKey: .fkiInvoiceID)
        try container.encodeIfPresent(fkiOtherincomeID, forKey: .fkiOtherincomeID)
        try container.encodeIfPresent(fkiElectronicfundstransferID, forKey: .fkiElectronicfundstransferID)
        try container.encodeIfPresent(fkiRejectedoffertopurchaseID, forKey: .fkiRejectedoffertopurchaseID)
    }
}

