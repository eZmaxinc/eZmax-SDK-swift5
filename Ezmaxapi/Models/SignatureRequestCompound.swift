//
// SignatureRequestCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Signature Object and children */
public struct SignatureRequestCompound: Codable, JSONEncodable, Hashable {

    public static let pkiSignatureIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiFontIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let tSignatureSvgRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{60,65535}$/")
    public static let tSignatureSvginitialsRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{60,65535}$/")
    /** The unique ID of the Signature */
    public var pkiSignatureID: Int?
    /** The unique ID of the Font */
    public var fkiFontID: Int
    public var eSignaturePreference: FieldESignaturePreference
    /** The svg of the Signature */
    public var tSignatureSvg: String?
    /** The svg of the Initials */
    public var tSignatureSvginitials: String?

    public init(pkiSignatureID: Int? = nil, fkiFontID: Int, eSignaturePreference: FieldESignaturePreference, tSignatureSvg: String? = nil, tSignatureSvginitials: String? = nil) {
        self.pkiSignatureID = pkiSignatureID
        self.fkiFontID = fkiFontID
        self.eSignaturePreference = eSignaturePreference
        self.tSignatureSvg = tSignatureSvg
        self.tSignatureSvginitials = tSignatureSvginitials
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiSignatureID
        case fkiFontID
        case eSignaturePreference
        case tSignatureSvg
        case tSignatureSvginitials
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiSignatureID, forKey: .pkiSignatureID)
        try container.encode(fkiFontID, forKey: .fkiFontID)
        try container.encode(eSignaturePreference, forKey: .eSignaturePreference)
        try container.encodeIfPresent(tSignatureSvg, forKey: .tSignatureSvg)
        try container.encodeIfPresent(tSignatureSvginitials, forKey: .tSignatureSvginitials)
    }
}

