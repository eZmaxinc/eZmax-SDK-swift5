//
// EzsignfolderImportEzsigntemplatepackageV1Request.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request for POST /1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage */
public struct EzsignfolderImportEzsigntemplatepackageV1Request: Codable, JSONEncodable, Hashable {

    public static let fkiEzsigntemplatepackageIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Ezsigntemplatepackage */
    public var fkiEzsigntemplatepackageID: Int
    /** The maximum date and time at which the Ezsigndocument can be signed. */
    public var dtEzsigndocumentDuedate: String
    public var aObjImportEzsigntemplatepackageRelation: [CustomImportEzsigntemplatepackageRelationRequest]

    public init(fkiEzsigntemplatepackageID: Int, dtEzsigndocumentDuedate: String, aObjImportEzsigntemplatepackageRelation: [CustomImportEzsigntemplatepackageRelationRequest]) {
        self.fkiEzsigntemplatepackageID = fkiEzsigntemplatepackageID
        self.dtEzsigndocumentDuedate = dtEzsigndocumentDuedate
        self.aObjImportEzsigntemplatepackageRelation = aObjImportEzsigntemplatepackageRelation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fkiEzsigntemplatepackageID
        case dtEzsigndocumentDuedate
        case aObjImportEzsigntemplatepackageRelation = "a_objImportEzsigntemplatepackageRelation"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(fkiEzsigntemplatepackageID, forKey: .fkiEzsigntemplatepackageID)
        try container.encode(dtEzsigndocumentDuedate, forKey: .dtEzsigndocumentDuedate)
        try container.encode(aObjImportEzsigntemplatepackageRelation, forKey: .aObjImportEzsigntemplatepackageRelation)
    }
}

