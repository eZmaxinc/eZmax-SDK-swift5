//
// CountryAutocompleteElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Country AutocompleteElement Response */
public struct CountryAutocompleteElementResponse: Codable, JSONEncodable, Hashable {

    public static let pkiCountryIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let sCountryNameXRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,40}$/")
    public static let sCountryShortnameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{1,3}$/")
    /** The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States| */
    public var pkiCountryID: Int
    /** The name of the Country in the language of the requester */
    public var sCountryNameX: String
    /** The shortname of the Country */
    public var sCountryShortname: String
    /** Whether the Country is active or not */
    public var bCountryIsactive: Bool

    public init(pkiCountryID: Int, sCountryNameX: String, sCountryShortname: String, bCountryIsactive: Bool) {
        self.pkiCountryID = pkiCountryID
        self.sCountryNameX = sCountryNameX
        self.sCountryShortname = sCountryShortname
        self.bCountryIsactive = bCountryIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCountryID
        case sCountryNameX
        case sCountryShortname
        case bCountryIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiCountryID, forKey: .pkiCountryID)
        try container.encode(sCountryNameX, forKey: .sCountryNameX)
        try container.encode(sCountryShortname, forKey: .sCountryShortname)
        try container.encode(bCountryIsactive, forKey: .bCountryIsactive)
    }
}

