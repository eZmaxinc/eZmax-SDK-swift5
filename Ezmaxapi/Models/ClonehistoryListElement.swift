//
// ClonehistoryListElement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Clonehistory List Element */
public struct ClonehistoryListElement: Codable, JSONEncodable, Hashable {

    static let pkiClonehistoryIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    static let fkiUserIDCloningRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiUserIDClonedRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let dtClonehistoryFirsthitRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
    static let dtClonehistoryLasthitRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
    static let sUserLoginnameCloningRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,20})|([a-zA-Z0-9]){1,32})$/")
    static let sUserLoginnameClonedRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,20})|([a-zA-Z0-9]){1,32})$/")
    /** The unique ID of the Clonehistory */
    public var pkiClonehistoryID: Int
    /** The unique ID of the User */
    public var fkiUserIDCloning: Int
    /** The unique ID of the User */
    public var fkiUserIDCloned: Int
    /** The firsthit of the Clonehistory */
    public var dtClonehistoryFirsthit: String
    /** The lasthit of the Clonehistory */
    public var dtClonehistoryLasthit: String?
    /** The login name of the User. */
    public var sUserLoginnameCloning: String
    /** The first name of the user */
    public var sUserFirstnameCloning: String
    /** The last name of the user */
    public var sUserLastnameCloning: String
    /** The login name of the User. */
    public var sUserLoginnameCloned: String
    /** The first name of the user */
    public var sUserFirstnameCloned: String
    /** The last name of the user */
    public var sUserLastnameCloned: String

    public init(pkiClonehistoryID: Int, fkiUserIDCloning: Int, fkiUserIDCloned: Int, dtClonehistoryFirsthit: String, dtClonehistoryLasthit: String? = nil, sUserLoginnameCloning: String, sUserFirstnameCloning: String, sUserLastnameCloning: String, sUserLoginnameCloned: String, sUserFirstnameCloned: String, sUserLastnameCloned: String) {
        self.pkiClonehistoryID = pkiClonehistoryID
        self.fkiUserIDCloning = fkiUserIDCloning
        self.fkiUserIDCloned = fkiUserIDCloned
        self.dtClonehistoryFirsthit = dtClonehistoryFirsthit
        self.dtClonehistoryLasthit = dtClonehistoryLasthit
        self.sUserLoginnameCloning = sUserLoginnameCloning
        self.sUserFirstnameCloning = sUserFirstnameCloning
        self.sUserLastnameCloning = sUserLastnameCloning
        self.sUserLoginnameCloned = sUserLoginnameCloned
        self.sUserFirstnameCloned = sUserFirstnameCloned
        self.sUserLastnameCloned = sUserLastnameCloned
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiClonehistoryID
        case fkiUserIDCloning
        case fkiUserIDCloned
        case dtClonehistoryFirsthit
        case dtClonehistoryLasthit
        case sUserLoginnameCloning
        case sUserFirstnameCloning
        case sUserLastnameCloning
        case sUserLoginnameCloned
        case sUserFirstnameCloned
        case sUserLastnameCloned
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiClonehistoryID, forKey: .pkiClonehistoryID)
        try container.encode(fkiUserIDCloning, forKey: .fkiUserIDCloning)
        try container.encode(fkiUserIDCloned, forKey: .fkiUserIDCloned)
        try container.encode(dtClonehistoryFirsthit, forKey: .dtClonehistoryFirsthit)
        try container.encodeIfPresent(dtClonehistoryLasthit, forKey: .dtClonehistoryLasthit)
        try container.encode(sUserLoginnameCloning, forKey: .sUserLoginnameCloning)
        try container.encode(sUserFirstnameCloning, forKey: .sUserFirstnameCloning)
        try container.encode(sUserLastnameCloning, forKey: .sUserLastnameCloning)
        try container.encode(sUserLoginnameCloned, forKey: .sUserLoginnameCloned)
        try container.encode(sUserFirstnameCloned, forKey: .sUserFirstnameCloned)
        try container.encode(sUserLastnameCloned, forKey: .sUserLastnameCloned)
    }
}

