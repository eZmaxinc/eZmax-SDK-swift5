//
// CustomDnsrecordResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Custom Dnsrecord Object */
public struct CustomDnsrecordResponse: Codable, JSONEncodable, Hashable {

    public enum EDnsrecordType: String, Codable, CaseIterable {
        case cname = "CNAME"
        case mx = "MX"
        case txt = "TXT"
    }
    public enum EDnsrecordValidation: String, Codable, CaseIterable {
        case match = "Match"
        case mismatch = "Mismatch"
        case notFound = "NotFound"
    }
    /** The type of the Dnsrecord */
    public var eDnsrecordType: EDnsrecordType
    /** The validation of the Dnsrecord */
    public var eDnsrecordValidation: EDnsrecordValidation
    /** The name of the Dnsrecord */
    public var sDnsrecordName: String
    /** The value of the Dnsrecord */
    public var sDnsrecordValue: String?
    /** The expected value of the Dnsrecord */
    public var sDnsrecordExpectedvalue: String?
    /** Whether the Dnsrecord must match or not */
    public var bDnsrecordMustMatch: Bool

    public init(eDnsrecordType: EDnsrecordType, eDnsrecordValidation: EDnsrecordValidation, sDnsrecordName: String, sDnsrecordValue: String? = nil, sDnsrecordExpectedvalue: String? = nil, bDnsrecordMustMatch: Bool) {
        self.eDnsrecordType = eDnsrecordType
        self.eDnsrecordValidation = eDnsrecordValidation
        self.sDnsrecordName = sDnsrecordName
        self.sDnsrecordValue = sDnsrecordValue
        self.sDnsrecordExpectedvalue = sDnsrecordExpectedvalue
        self.bDnsrecordMustMatch = bDnsrecordMustMatch
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eDnsrecordType
        case eDnsrecordValidation
        case sDnsrecordName
        case sDnsrecordValue
        case sDnsrecordExpectedvalue
        case bDnsrecordMustMatch
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eDnsrecordType, forKey: .eDnsrecordType)
        try container.encode(eDnsrecordValidation, forKey: .eDnsrecordValidation)
        try container.encode(sDnsrecordName, forKey: .sDnsrecordName)
        try container.encodeIfPresent(sDnsrecordValue, forKey: .sDnsrecordValue)
        try container.encodeIfPresent(sDnsrecordExpectedvalue, forKey: .sDnsrecordExpectedvalue)
        try container.encode(bDnsrecordMustMatch, forKey: .bDnsrecordMustMatch)
    }
}

