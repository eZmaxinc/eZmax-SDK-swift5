//
// EzdoctemplatedocumentAutocompleteElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezdoctemplatedocument AutocompleteElement Response */
public struct EzdoctemplatedocumentAutocompleteElementResponse: Codable, JSONEncodable, Hashable {

    public static let pkiEzdoctemplatedocumentIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    public static let sEzdoctemplatedocumentNameXRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    /** The unique ID of the Ezdoctemplatedocument */
    public var pkiEzdoctemplatedocumentID: Int
    /** The name of the Ezdoctemplatedocument in the language of the requester */
    public var sEzdoctemplatedocumentNameX: String
    /** Whether the ezdoctemplatedocument is active or not */
    public var bEzdoctemplatedocumentIsactive: Bool

    public init(pkiEzdoctemplatedocumentID: Int, sEzdoctemplatedocumentNameX: String, bEzdoctemplatedocumentIsactive: Bool) {
        self.pkiEzdoctemplatedocumentID = pkiEzdoctemplatedocumentID
        self.sEzdoctemplatedocumentNameX = sEzdoctemplatedocumentNameX
        self.bEzdoctemplatedocumentIsactive = bEzdoctemplatedocumentIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzdoctemplatedocumentID
        case sEzdoctemplatedocumentNameX
        case bEzdoctemplatedocumentIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzdoctemplatedocumentID, forKey: .pkiEzdoctemplatedocumentID)
        try container.encode(sEzdoctemplatedocumentNameX, forKey: .sEzdoctemplatedocumentNameX)
        try container.encode(bEzdoctemplatedocumentIsactive, forKey: .bEzdoctemplatedocumentIsactive)
    }
}

