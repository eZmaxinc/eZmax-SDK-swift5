//
// CustomCreateEzsignelementsPositionedByWordRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A CreateEzsignelementsPositionedByWord object */
public struct CustomCreateEzsignelementsPositionedByWordRequest: Codable, JSONEncodable, Hashable {

    public enum ECreateezsignelementspositionedbywordOccurance: String, Codable, CaseIterable {
        case all = "All"
        case first = "First"
        case last = "Last"
    }
    static let sCreateezsignelementspositionedbywordPatternRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{1,35}$/")
    /** The word to search */
    public var sCreateezsignelementspositionedbywordPattern: String
    /** The X offset */
    public var iCreateezsignelementspositionedbywordOffsetx: Int
    /** The Y offset */
    public var iCreateezsignelementspositionedbywordOffsety: Int
    /** The occurance in the search to add the ezsign element */
    public var eCreateezsignelementspositionedbywordOccurance: ECreateezsignelementspositionedbywordOccurance

    public init(sCreateezsignelementspositionedbywordPattern: String, iCreateezsignelementspositionedbywordOffsetx: Int, iCreateezsignelementspositionedbywordOffsety: Int, eCreateezsignelementspositionedbywordOccurance: ECreateezsignelementspositionedbywordOccurance) {
        self.sCreateezsignelementspositionedbywordPattern = sCreateezsignelementspositionedbywordPattern
        self.iCreateezsignelementspositionedbywordOffsetx = iCreateezsignelementspositionedbywordOffsetx
        self.iCreateezsignelementspositionedbywordOffsety = iCreateezsignelementspositionedbywordOffsety
        self.eCreateezsignelementspositionedbywordOccurance = eCreateezsignelementspositionedbywordOccurance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sCreateezsignelementspositionedbywordPattern
        case iCreateezsignelementspositionedbywordOffsetx
        case iCreateezsignelementspositionedbywordOffsety
        case eCreateezsignelementspositionedbywordOccurance
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(sCreateezsignelementspositionedbywordPattern, forKey: .sCreateezsignelementspositionedbywordPattern)
        try container.encode(iCreateezsignelementspositionedbywordOffsetx, forKey: .iCreateezsignelementspositionedbywordOffsetx)
        try container.encode(iCreateezsignelementspositionedbywordOffsety, forKey: .iCreateezsignelementspositionedbywordOffsety)
        try container.encode(eCreateezsignelementspositionedbywordOccurance, forKey: .eCreateezsignelementspositionedbywordOccurance)
    }
}

