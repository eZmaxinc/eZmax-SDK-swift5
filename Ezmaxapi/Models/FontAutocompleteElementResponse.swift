//
// FontAutocompleteElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Font AutocompleteElement Response */
public struct FontAutocompleteElementResponse: Codable, JSONEncodable, Hashable {

    static let sFontNameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    static let pkiFontIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The name of the Font */
    public var sFontName: String
    /** The unique ID of the Font */
    public var pkiFontID: Int
    /** Whether the Font is active or not */
    public var bFontIsactive: Bool

    public init(sFontName: String, pkiFontID: Int, bFontIsactive: Bool) {
        self.sFontName = sFontName
        self.pkiFontID = pkiFontID
        self.bFontIsactive = bFontIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sFontName
        case pkiFontID
        case bFontIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(sFontName, forKey: .sFontName)
        try container.encode(pkiFontID, forKey: .pkiFontID)
        try container.encode(bFontIsactive, forKey: .bFontIsactive)
    }
}

