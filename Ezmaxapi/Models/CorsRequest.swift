//
// CorsRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Cors Object */
public struct CorsRequest: Codable, JSONEncodable, Hashable {

    static let pkiCorsIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    static let fkiApikeyIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let sCorsEntryurlRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,2048}$/")
    /** The unique ID of the Cors */
    public var pkiCorsID: Int?
    /** The unique ID of the Apikey */
    public var fkiApikeyID: Int
    /** The entryurl of the Cors */
    public var sCorsEntryurl: String

    public init(pkiCorsID: Int? = nil, fkiApikeyID: Int, sCorsEntryurl: String) {
        self.pkiCorsID = pkiCorsID
        self.fkiApikeyID = fkiApikeyID
        self.sCorsEntryurl = sCorsEntryurl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCorsID
        case fkiApikeyID
        case sCorsEntryurl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiCorsID, forKey: .pkiCorsID)
        try container.encode(fkiApikeyID, forKey: .fkiApikeyID)
        try container.encode(sCorsEntryurl, forKey: .sCorsEntryurl)
    }
}

