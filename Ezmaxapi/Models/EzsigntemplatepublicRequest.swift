//
// EzsigntemplatepublicRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsigntemplatepublic Object */
public struct EzsigntemplatepublicRequest: Codable, JSONEncodable, Hashable {

    public static let pkiEzsigntemplatepublicIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiEzsignfoldertypeIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiUserlogintypeIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiEzsigntemplateIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiEzsigntemplatepackageIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let sEzsigntemplatepublicDescriptionRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,80}$/")
    public static let tEzsigntemplatepublicNoteRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,65535}$/")
    public static let iEzsigntemplatepublicLimitRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Ezsigntemplatepublic */
    public var pkiEzsigntemplatepublicID: Int?
    /** The unique ID of the Ezsignfoldertype. */
    public var fkiEzsignfoldertypeID: Int
    /** The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \"In-Person\" and there won't be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won't have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|      */
    public var fkiUserlogintypeID: Int
    /** The unique ID of the Ezsigntemplate */
    public var fkiEzsigntemplateID: Int?
    /** The unique ID of the Ezsigntemplatepackage */
    public var fkiEzsigntemplatepackageID: Int?
    /** The description of the Ezsigntemplatepublic */
    public var sEzsigntemplatepublicDescription: String
    /** Whether the ezsigntemplatepublic is active or not */
    public var bEzsigntemplatepublicIsactive: Bool
    /** The note of the Ezsigntemplatepublic */
    public var tEzsigntemplatepublicNote: String
    public var eEzsigntemplatepublicLimittype: FieldEEzsigntemplatepublicLimittype
    /** The limit of the Ezsigntemplatepublic */
    public var iEzsigntemplatepublicLimit: Int

    public init(pkiEzsigntemplatepublicID: Int? = nil, fkiEzsignfoldertypeID: Int, fkiUserlogintypeID: Int, fkiEzsigntemplateID: Int? = nil, fkiEzsigntemplatepackageID: Int? = nil, sEzsigntemplatepublicDescription: String, bEzsigntemplatepublicIsactive: Bool, tEzsigntemplatepublicNote: String, eEzsigntemplatepublicLimittype: FieldEEzsigntemplatepublicLimittype, iEzsigntemplatepublicLimit: Int) {
        self.pkiEzsigntemplatepublicID = pkiEzsigntemplatepublicID
        self.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID
        self.fkiUserlogintypeID = fkiUserlogintypeID
        self.fkiEzsigntemplateID = fkiEzsigntemplateID
        self.fkiEzsigntemplatepackageID = fkiEzsigntemplatepackageID
        self.sEzsigntemplatepublicDescription = sEzsigntemplatepublicDescription
        self.bEzsigntemplatepublicIsactive = bEzsigntemplatepublicIsactive
        self.tEzsigntemplatepublicNote = tEzsigntemplatepublicNote
        self.eEzsigntemplatepublicLimittype = eEzsigntemplatepublicLimittype
        self.iEzsigntemplatepublicLimit = iEzsigntemplatepublicLimit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsigntemplatepublicID
        case fkiEzsignfoldertypeID
        case fkiUserlogintypeID
        case fkiEzsigntemplateID
        case fkiEzsigntemplatepackageID
        case sEzsigntemplatepublicDescription
        case bEzsigntemplatepublicIsactive
        case tEzsigntemplatepublicNote
        case eEzsigntemplatepublicLimittype
        case iEzsigntemplatepublicLimit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiEzsigntemplatepublicID, forKey: .pkiEzsigntemplatepublicID)
        try container.encode(fkiEzsignfoldertypeID, forKey: .fkiEzsignfoldertypeID)
        try container.encode(fkiUserlogintypeID, forKey: .fkiUserlogintypeID)
        try container.encodeIfPresent(fkiEzsigntemplateID, forKey: .fkiEzsigntemplateID)
        try container.encodeIfPresent(fkiEzsigntemplatepackageID, forKey: .fkiEzsigntemplatepackageID)
        try container.encode(sEzsigntemplatepublicDescription, forKey: .sEzsigntemplatepublicDescription)
        try container.encode(bEzsigntemplatepublicIsactive, forKey: .bEzsigntemplatepublicIsactive)
        try container.encode(tEzsigntemplatepublicNote, forKey: .tEzsigntemplatepublicNote)
        try container.encode(eEzsigntemplatepublicLimittype, forKey: .eEzsigntemplatepublicLimittype)
        try container.encode(iEzsigntemplatepublicLimit, forKey: .iEzsigntemplatepublicLimit)
    }
}

