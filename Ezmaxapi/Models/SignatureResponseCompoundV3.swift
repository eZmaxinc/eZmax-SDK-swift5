//
// SignatureResponseCompoundV3.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Signature Object */
public struct SignatureResponseCompoundV3: Codable, JSONEncodable, Hashable {

    static let pkiSignatureIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    static let fkiFontIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Signature */
    public var pkiSignatureID: Int
    /** The unique ID of the Font */
    public var fkiFontID: Int
    public var eSignaturePreference: FieldESignaturePreference
    /** Whether the signature has a SVG or not */
    public var bSignatureSvg: Bool
    /** Whether the initials has a SVG or not */
    public var bSignatureSvginitials: Bool

    public init(pkiSignatureID: Int, fkiFontID: Int, eSignaturePreference: FieldESignaturePreference, bSignatureSvg: Bool, bSignatureSvginitials: Bool) {
        self.pkiSignatureID = pkiSignatureID
        self.fkiFontID = fkiFontID
        self.eSignaturePreference = eSignaturePreference
        self.bSignatureSvg = bSignatureSvg
        self.bSignatureSvginitials = bSignatureSvginitials
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiSignatureID
        case fkiFontID
        case eSignaturePreference
        case bSignatureSvg
        case bSignatureSvginitials
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiSignatureID, forKey: .pkiSignatureID)
        try container.encode(fkiFontID, forKey: .fkiFontID)
        try container.encode(eSignaturePreference, forKey: .eSignaturePreference)
        try container.encode(bSignatureSvg, forKey: .bSignatureSvg)
        try container.encode(bSignatureSvginitials, forKey: .bSignatureSvginitials)
    }
}

