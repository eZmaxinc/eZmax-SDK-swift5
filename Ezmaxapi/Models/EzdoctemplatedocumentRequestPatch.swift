//
// EzdoctemplatedocumentRequestPatch.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An Ezdoctemplatedocument Object */
public struct EzdoctemplatedocumentRequestPatch: Codable, JSONEncodable, Hashable {

    public enum EEzdoctemplatedocumentFormat: String, Codable, CaseIterable {
        case docx = "Docx"
        case html = "Html"
        case tx = "Tx"
    }
    public static let sEzdoctemplatedocumentFieldsRule = StringRule(minLength: nil, maxLength: 16000000, pattern: "/^.{0,}$/")
    /** Indicates the format of the template.  This field is Required when sEzdoctemplatedocumentBase64 is set. */
    public var eEzdoctemplatedocumentFormat: EEzdoctemplatedocumentFormat?
    /** List of field in Ezdoctemplatedocument */
    public var sEzdoctemplatedocumentFields: String?
    /** The Base64 encoded binary content of the document.  This field is Required when eEzdoctemplatedocumentFormat is set. */
    public var sEzdoctemplatedocumentBase64: Data?

    public init(eEzdoctemplatedocumentFormat: EEzdoctemplatedocumentFormat? = nil, sEzdoctemplatedocumentFields: String? = nil, sEzdoctemplatedocumentBase64: Data? = nil) {
        self.eEzdoctemplatedocumentFormat = eEzdoctemplatedocumentFormat
        self.sEzdoctemplatedocumentFields = sEzdoctemplatedocumentFields
        self.sEzdoctemplatedocumentBase64 = sEzdoctemplatedocumentBase64
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eEzdoctemplatedocumentFormat
        case sEzdoctemplatedocumentFields
        case sEzdoctemplatedocumentBase64
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(eEzdoctemplatedocumentFormat, forKey: .eEzdoctemplatedocumentFormat)
        try container.encodeIfPresent(sEzdoctemplatedocumentFields, forKey: .sEzdoctemplatedocumentFields)
        try container.encodeIfPresent(sEzdoctemplatedocumentBase64, forKey: .sEzdoctemplatedocumentBase64)
    }
}

