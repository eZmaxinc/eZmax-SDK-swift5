//
// UsergroupexternalmembershipResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Usergroupexternalmembership Object */
public struct UsergroupexternalmembershipResponse: Codable, JSONEncodable, Hashable {

    static let pkiUsergroupexternalmembershipIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    static let fkiUsergroupexternalIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    static let fkiUserIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let sUserLoginnameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(?:([\\w\\.-]+@[\\w\\.-]+\\.\\w{2,20})|([a-zA-Z0-9]){1,32})$/")
    static let sUsergroupexternalNameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,64}$/")
    /** The unique ID of the Usergroupexternalmembership */
    public var pkiUsergroupexternalmembershipID: Int
    /** The unique ID of the Usergroupexternal */
    public var fkiUsergroupexternalID: Int
    /** The unique ID of the User */
    public var fkiUserID: Int
    /** The first name of the user */
    public var sUserFirstname: String
    /** The last name of the user */
    public var sUserLastname: String
    /** The login name of the User. */
    public var sUserLoginname: String
    /** The email address. */
    public var sEmailAddress: String
    /** The name of the Usergroupexternal */
    public var sUsergroupexternalName: String

    public init(pkiUsergroupexternalmembershipID: Int, fkiUsergroupexternalID: Int, fkiUserID: Int, sUserFirstname: String, sUserLastname: String, sUserLoginname: String, sEmailAddress: String, sUsergroupexternalName: String) {
        self.pkiUsergroupexternalmembershipID = pkiUsergroupexternalmembershipID
        self.fkiUsergroupexternalID = fkiUsergroupexternalID
        self.fkiUserID = fkiUserID
        self.sUserFirstname = sUserFirstname
        self.sUserLastname = sUserLastname
        self.sUserLoginname = sUserLoginname
        self.sEmailAddress = sEmailAddress
        self.sUsergroupexternalName = sUsergroupexternalName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiUsergroupexternalmembershipID
        case fkiUsergroupexternalID
        case fkiUserID
        case sUserFirstname
        case sUserLastname
        case sUserLoginname
        case sEmailAddress
        case sUsergroupexternalName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiUsergroupexternalmembershipID, forKey: .pkiUsergroupexternalmembershipID)
        try container.encode(fkiUsergroupexternalID, forKey: .fkiUsergroupexternalID)
        try container.encode(fkiUserID, forKey: .fkiUserID)
        try container.encode(sUserFirstname, forKey: .sUserFirstname)
        try container.encode(sUserLastname, forKey: .sUserLastname)
        try container.encode(sUserLoginname, forKey: .sUserLoginname)
        try container.encode(sEmailAddress, forKey: .sEmailAddress)
        try container.encode(sUsergroupexternalName, forKey: .sUsergroupexternalName)
    }
}

