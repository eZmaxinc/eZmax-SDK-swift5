//
// VariableexpenseListElement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Variableexpense List Element */
public struct VariableexpenseListElement: Codable, JSONEncodable, Hashable {

    static let pkiVariableexpenseIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    static let sVariableexpenseCodeRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,5}$/")
    static let sVariableexpenseDescriptionXRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,40}$/")
    /** The unique ID of the Variableexpense */
    public var pkiVariableexpenseID: Int
    /** The code of the Variableexpense */
    public var sVariableexpenseCode: String?
    /** The description of the Variableexpense in the language of the requester */
    public var sVariableexpenseDescriptionX: String?
    public var eVariableexpenseTaxable: FieldEVariableexpenseTaxable?
    /** Whether the variableexpense is active or not */
    public var bVariableexpenseIsactive: Bool?

    public init(pkiVariableexpenseID: Int, sVariableexpenseCode: String? = nil, sVariableexpenseDescriptionX: String? = nil, eVariableexpenseTaxable: FieldEVariableexpenseTaxable? = nil, bVariableexpenseIsactive: Bool? = nil) {
        self.pkiVariableexpenseID = pkiVariableexpenseID
        self.sVariableexpenseCode = sVariableexpenseCode
        self.sVariableexpenseDescriptionX = sVariableexpenseDescriptionX
        self.eVariableexpenseTaxable = eVariableexpenseTaxable
        self.bVariableexpenseIsactive = bVariableexpenseIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiVariableexpenseID
        case sVariableexpenseCode
        case sVariableexpenseDescriptionX
        case eVariableexpenseTaxable
        case bVariableexpenseIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiVariableexpenseID, forKey: .pkiVariableexpenseID)
        try container.encodeIfPresent(sVariableexpenseCode, forKey: .sVariableexpenseCode)
        try container.encodeIfPresent(sVariableexpenseDescriptionX, forKey: .sVariableexpenseDescriptionX)
        try container.encodeIfPresent(eVariableexpenseTaxable, forKey: .eVariableexpenseTaxable)
        try container.encodeIfPresent(bVariableexpenseIsactive, forKey: .bVariableexpenseIsactive)
    }
}

