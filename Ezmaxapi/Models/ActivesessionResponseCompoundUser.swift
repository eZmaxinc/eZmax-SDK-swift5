//
// ActivesessionResponseCompoundUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An Activesession-&gt;User Object and children to create a complete structure */
public struct ActivesessionResponseCompoundUser: Codable, JSONEncodable, Hashable {

    static let pkiUserIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiTimezoneIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let sAvatarUrlRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^(https|http):\/\/[^\\s\/$.?#].[^\\s]*$/")
    static let sEmailAddressRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w.%+\\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,20}$/")
    static let iUserInterfacecolorRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let iUserListresultRule = NumericRule<Int>(minimum: 5, exclusiveMinimum: false, maximum: 500, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the User */
    public var pkiUserID: Int
    /** The unique ID of the Timezone */
    public var fkiTimezoneID: Int
    /** The url of the picture used as avatar */
    public var sAvatarUrl: String?
    /** The first name of the user */
    public var sUserFirstname: String
    /** The last name of the user */
    public var sUserLastname: String
    /** The email address. */
    public var sEmailAddress: String?
    public var eUserEzsignsendreminderfrequency: FieldEUserEzsignsendreminderfrequency
    /** The int32 representation of the interface color. For example, RGB color #39435B would be 3752795 */
    public var iUserInterfacecolor: Int
    /** Whether to use a dark mode interface */
    public var bUserInterfacedark: Bool
    /** The number of rows to return by default in lists */
    public var iUserListresult: Int

    public init(pkiUserID: Int, fkiTimezoneID: Int, sAvatarUrl: String? = nil, sUserFirstname: String, sUserLastname: String, sEmailAddress: String? = nil, eUserEzsignsendreminderfrequency: FieldEUserEzsignsendreminderfrequency, iUserInterfacecolor: Int, bUserInterfacedark: Bool, iUserListresult: Int) {
        self.pkiUserID = pkiUserID
        self.fkiTimezoneID = fkiTimezoneID
        self.sAvatarUrl = sAvatarUrl
        self.sUserFirstname = sUserFirstname
        self.sUserLastname = sUserLastname
        self.sEmailAddress = sEmailAddress
        self.eUserEzsignsendreminderfrequency = eUserEzsignsendreminderfrequency
        self.iUserInterfacecolor = iUserInterfacecolor
        self.bUserInterfacedark = bUserInterfacedark
        self.iUserListresult = iUserListresult
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiUserID
        case fkiTimezoneID
        case sAvatarUrl
        case sUserFirstname
        case sUserLastname
        case sEmailAddress
        case eUserEzsignsendreminderfrequency
        case iUserInterfacecolor
        case bUserInterfacedark
        case iUserListresult
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiUserID, forKey: .pkiUserID)
        try container.encode(fkiTimezoneID, forKey: .fkiTimezoneID)
        try container.encodeIfPresent(sAvatarUrl, forKey: .sAvatarUrl)
        try container.encode(sUserFirstname, forKey: .sUserFirstname)
        try container.encode(sUserLastname, forKey: .sUserLastname)
        try container.encodeIfPresent(sEmailAddress, forKey: .sEmailAddress)
        try container.encode(eUserEzsignsendreminderfrequency, forKey: .eUserEzsignsendreminderfrequency)
        try container.encode(iUserInterfacecolor, forKey: .iUserInterfacecolor)
        try container.encode(bUserInterfacedark, forKey: .bUserInterfacedark)
        try container.encode(iUserListresult, forKey: .iUserListresult)
    }
}

