//
// CustomCommunicationsenderResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Generic Communicationsender Response */
public struct CustomCommunicationsenderResponse: Codable, JSONEncodable, Hashable {

    public enum ECommunicationsenderObjecttype: String, Codable, CaseIterable {
        case agent = "Agent"
        case broker = "Broker"
        case user = "User"
        case mailboxshared = "Mailboxshared"
        case phonelineshared = "Phonelineshared"
    }
    static let fkiAgentIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiBrokerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiUserIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiMailboxsharedIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    static let fkiPhonelinesharedIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Agent. */
    public var fkiAgentID: Int?
    /** The unique ID of the Broker. */
    public var fkiBrokerID: Int?
    /** The unique ID of the User */
    public var fkiUserID: Int?
    /** The unique ID of the Mailboxshared */
    public var fkiMailboxsharedID: Int?
    /** The unique ID of the Phonelineshared */
    public var fkiPhonelinesharedID: Int?
    public var eCommunicationsenderObjecttype: ECommunicationsenderObjecttype
    public var objContactName: CustomContactNameResponse
    /** An Email Object and children to create a complete structure */
    public var objEmail: EmailResponse?
    public var objPhoneFax: PhoneResponseCompound?
    public var objPhoneSMS: PhoneResponseCompound?

    public init(fkiAgentID: Int? = nil, fkiBrokerID: Int? = nil, fkiUserID: Int? = nil, fkiMailboxsharedID: Int? = nil, fkiPhonelinesharedID: Int? = nil, eCommunicationsenderObjecttype: ECommunicationsenderObjecttype, objContactName: CustomContactNameResponse, objEmail: EmailResponse? = nil, objPhoneFax: PhoneResponseCompound? = nil, objPhoneSMS: PhoneResponseCompound? = nil) {
        self.fkiAgentID = fkiAgentID
        self.fkiBrokerID = fkiBrokerID
        self.fkiUserID = fkiUserID
        self.fkiMailboxsharedID = fkiMailboxsharedID
        self.fkiPhonelinesharedID = fkiPhonelinesharedID
        self.eCommunicationsenderObjecttype = eCommunicationsenderObjecttype
        self.objContactName = objContactName
        self.objEmail = objEmail
        self.objPhoneFax = objPhoneFax
        self.objPhoneSMS = objPhoneSMS
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fkiAgentID
        case fkiBrokerID
        case fkiUserID
        case fkiMailboxsharedID
        case fkiPhonelinesharedID
        case eCommunicationsenderObjecttype
        case objContactName
        case objEmail
        case objPhoneFax
        case objPhoneSMS
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fkiAgentID, forKey: .fkiAgentID)
        try container.encodeIfPresent(fkiBrokerID, forKey: .fkiBrokerID)
        try container.encodeIfPresent(fkiUserID, forKey: .fkiUserID)
        try container.encodeIfPresent(fkiMailboxsharedID, forKey: .fkiMailboxsharedID)
        try container.encodeIfPresent(fkiPhonelinesharedID, forKey: .fkiPhonelinesharedID)
        try container.encode(eCommunicationsenderObjecttype, forKey: .eCommunicationsenderObjecttype)
        try container.encode(objContactName, forKey: .objContactName)
        try container.encodeIfPresent(objEmail, forKey: .objEmail)
        try container.encodeIfPresent(objPhoneFax, forKey: .objPhoneFax)
        try container.encodeIfPresent(objPhoneSMS, forKey: .objPhoneSMS)
    }
}

