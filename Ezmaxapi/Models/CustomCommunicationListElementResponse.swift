//
// CustomCommunicationListElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Communication List Element */
public struct CustomCommunicationListElementResponse: Codable, JSONEncodable, Hashable {

    static let pkiCommunicationIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let sCommunicationSubjectRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,200}$/")
    /** The unique ID of the Communication. */
    public var pkiCommunicationID: Int
    /** The date and time at which the object was created */
    public var dtCreatedDate: String
    public var eCommunicationDirection: ComputedECommunicationDirection
    public var eCommunicationImportance: FieldECommunicationImportance
    public var eCommunicationType: FieldECommunicationType
    /** The count of Communicationrecipient */
    public var iCommunicationrecipientCount: Int
    /** The subject of the Communication */
    public var sCommunicationSubject: String
    /** The sender name of the Communication */
    public var sCommunicationSender: String
    /** The recipients' name of the Communication */
    public var sCommunicationRecipient: String

    public init(pkiCommunicationID: Int, dtCreatedDate: String, eCommunicationDirection: ComputedECommunicationDirection, eCommunicationImportance: FieldECommunicationImportance, eCommunicationType: FieldECommunicationType, iCommunicationrecipientCount: Int, sCommunicationSubject: String, sCommunicationSender: String, sCommunicationRecipient: String) {
        self.pkiCommunicationID = pkiCommunicationID
        self.dtCreatedDate = dtCreatedDate
        self.eCommunicationDirection = eCommunicationDirection
        self.eCommunicationImportance = eCommunicationImportance
        self.eCommunicationType = eCommunicationType
        self.iCommunicationrecipientCount = iCommunicationrecipientCount
        self.sCommunicationSubject = sCommunicationSubject
        self.sCommunicationSender = sCommunicationSender
        self.sCommunicationRecipient = sCommunicationRecipient
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCommunicationID
        case dtCreatedDate
        case eCommunicationDirection
        case eCommunicationImportance
        case eCommunicationType
        case iCommunicationrecipientCount
        case sCommunicationSubject
        case sCommunicationSender
        case sCommunicationRecipient
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiCommunicationID, forKey: .pkiCommunicationID)
        try container.encode(dtCreatedDate, forKey: .dtCreatedDate)
        try container.encode(eCommunicationDirection, forKey: .eCommunicationDirection)
        try container.encode(eCommunicationImportance, forKey: .eCommunicationImportance)
        try container.encode(eCommunicationType, forKey: .eCommunicationType)
        try container.encode(iCommunicationrecipientCount, forKey: .iCommunicationrecipientCount)
        try container.encode(sCommunicationSubject, forKey: .sCommunicationSubject)
        try container.encode(sCommunicationSender, forKey: .sCommunicationSender)
        try container.encode(sCommunicationRecipient, forKey: .sCommunicationRecipient)
    }
}

