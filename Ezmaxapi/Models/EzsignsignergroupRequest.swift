//
// EzsignsignergroupRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsignsignergroup Object */
public struct EzsignsignergroupRequest: Codable, JSONEncodable, Hashable {

    public static let pkiEzsignsignergroupIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiEzsignfolderIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Ezsignsignergroup */
    public var pkiEzsignsignergroupID: Int?
    /** The unique ID of the Ezsignfolder */
    public var fkiEzsignfolderID: Int
    public var objEzsignsignergroupDescription: MultilingualEzsignsignergroupDescription

    public init(pkiEzsignsignergroupID: Int? = nil, fkiEzsignfolderID: Int, objEzsignsignergroupDescription: MultilingualEzsignsignergroupDescription) {
        self.pkiEzsignsignergroupID = pkiEzsignsignergroupID
        self.fkiEzsignfolderID = fkiEzsignfolderID
        self.objEzsignsignergroupDescription = objEzsignsignergroupDescription
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsignsignergroupID
        case fkiEzsignfolderID
        case objEzsignsignergroupDescription
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiEzsignsignergroupID, forKey: .pkiEzsignsignergroupID)
        try container.encode(fkiEzsignfolderID, forKey: .fkiEzsignfolderID)
        try container.encode(objEzsignsignergroupDescription, forKey: .objEzsignsignergroupDescription)
    }
}

