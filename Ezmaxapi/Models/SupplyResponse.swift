//
// SupplyResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Supply Object */
public struct SupplyResponse: Codable, JSONEncodable, Hashable {

    static let pkiSupplyIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    static let fkiGlaccountIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiGlaccountcontainerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiVariableexpenseIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    static let sSupplyCodeRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,5}$/")
    static let dSupplyUnitpriceRule = StringRule(minLength: 4, maxLength: 13, pattern: "/^-{0,1}[\\d]{1,9}?\\.[\\d]{2}$/")
    static let sVariableexpenseDescriptionXRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,40}$/")
    /** The unique ID of the Supply */
    public var pkiSupplyID: Int
    /** The unique ID of the Glaccount */
    public var fkiGlaccountID: Int?
    /** The unique ID of the Glaccountcontainer */
    public var fkiGlaccountcontainerID: Int?
    /** The unique ID of the Variableexpense */
    public var fkiVariableexpenseID: Int
    /** The code of the Supply */
    public var sSupplyCode: String
    public var objSupplyDescription: MultilingualSupplyDescription
    /** The unit price of the Supply */
    public var dSupplyUnitprice: String
    /** Whether the supply is active or not */
    public var bSupplyIsactive: Bool
    /** Whether if the price is variable */
    public var bSupplyVariableprice: Bool
    /** The Description for the Glaccount in the language of the requester */
    public var sGlaccountDescriptionX: String?
    /** The Description for the Glaccountcontainer in the language of the requester */
    public var sGlaccountcontainerLongdescriptionX: String?
    /** The description of the Variableexpense in the language of the requester */
    public var sVariableexpenseDescriptionX: String?

    public init(pkiSupplyID: Int, fkiGlaccountID: Int? = nil, fkiGlaccountcontainerID: Int? = nil, fkiVariableexpenseID: Int, sSupplyCode: String, objSupplyDescription: MultilingualSupplyDescription, dSupplyUnitprice: String, bSupplyIsactive: Bool, bSupplyVariableprice: Bool, sGlaccountDescriptionX: String? = nil, sGlaccountcontainerLongdescriptionX: String? = nil, sVariableexpenseDescriptionX: String? = nil) {
        self.pkiSupplyID = pkiSupplyID
        self.fkiGlaccountID = fkiGlaccountID
        self.fkiGlaccountcontainerID = fkiGlaccountcontainerID
        self.fkiVariableexpenseID = fkiVariableexpenseID
        self.sSupplyCode = sSupplyCode
        self.objSupplyDescription = objSupplyDescription
        self.dSupplyUnitprice = dSupplyUnitprice
        self.bSupplyIsactive = bSupplyIsactive
        self.bSupplyVariableprice = bSupplyVariableprice
        self.sGlaccountDescriptionX = sGlaccountDescriptionX
        self.sGlaccountcontainerLongdescriptionX = sGlaccountcontainerLongdescriptionX
        self.sVariableexpenseDescriptionX = sVariableexpenseDescriptionX
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiSupplyID
        case fkiGlaccountID
        case fkiGlaccountcontainerID
        case fkiVariableexpenseID
        case sSupplyCode
        case objSupplyDescription
        case dSupplyUnitprice
        case bSupplyIsactive
        case bSupplyVariableprice
        case sGlaccountDescriptionX
        case sGlaccountcontainerLongdescriptionX
        case sVariableexpenseDescriptionX
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiSupplyID, forKey: .pkiSupplyID)
        try container.encodeIfPresent(fkiGlaccountID, forKey: .fkiGlaccountID)
        try container.encodeIfPresent(fkiGlaccountcontainerID, forKey: .fkiGlaccountcontainerID)
        try container.encode(fkiVariableexpenseID, forKey: .fkiVariableexpenseID)
        try container.encode(sSupplyCode, forKey: .sSupplyCode)
        try container.encode(objSupplyDescription, forKey: .objSupplyDescription)
        try container.encode(dSupplyUnitprice, forKey: .dSupplyUnitprice)
        try container.encode(bSupplyIsactive, forKey: .bSupplyIsactive)
        try container.encode(bSupplyVariableprice, forKey: .bSupplyVariableprice)
        try container.encodeIfPresent(sGlaccountDescriptionX, forKey: .sGlaccountDescriptionX)
        try container.encodeIfPresent(sGlaccountcontainerLongdescriptionX, forKey: .sGlaccountcontainerLongdescriptionX)
        try container.encodeIfPresent(sVariableexpenseDescriptionX, forKey: .sVariableexpenseDescriptionX)
    }
}

