//
// CreditcarddetailRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Creditcarddetail Object */
public struct CreditcarddetailRequest: Codable, JSONEncodable, Hashable {

    public static let iCreditcarddetailExpirationmonthRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 12, exclusiveMaximum: false, multipleOf: nil)
    public static let iCreditcarddetailExpirationyearRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2200, exclusiveMaximum: false, multipleOf: nil)
    public static let sCreditcarddetailCivicRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\d]{1,8}$/")
    public static let sCreditcarddetailStreetRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{1,19}$/")
    public static let sCreditcarddetailZipRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,9}$/")
    /** The expirationmonth of the Creditcarddetail */
    public var iCreditcarddetailExpirationmonth: Int
    /** The expirationyear of the Creditcarddetail */
    public var iCreditcarddetailExpirationyear: Int
    /** The civic of the Creditcarddetail */
    public var sCreditcarddetailCivic: String
    /** The street of the Creditcarddetail */
    public var sCreditcarddetailStreet: String
    /** The zip of the Creditcarddetail */
    public var sCreditcarddetailZip: String

    public init(iCreditcarddetailExpirationmonth: Int, iCreditcarddetailExpirationyear: Int, sCreditcarddetailCivic: String, sCreditcarddetailStreet: String, sCreditcarddetailZip: String) {
        self.iCreditcarddetailExpirationmonth = iCreditcarddetailExpirationmonth
        self.iCreditcarddetailExpirationyear = iCreditcarddetailExpirationyear
        self.sCreditcarddetailCivic = sCreditcarddetailCivic
        self.sCreditcarddetailStreet = sCreditcarddetailStreet
        self.sCreditcarddetailZip = sCreditcarddetailZip
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case iCreditcarddetailExpirationmonth
        case iCreditcarddetailExpirationyear
        case sCreditcarddetailCivic
        case sCreditcarddetailStreet
        case sCreditcarddetailZip
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(iCreditcarddetailExpirationmonth, forKey: .iCreditcarddetailExpirationmonth)
        try container.encode(iCreditcarddetailExpirationyear, forKey: .iCreditcarddetailExpirationyear)
        try container.encode(sCreditcarddetailCivic, forKey: .sCreditcarddetailCivic)
        try container.encode(sCreditcarddetailStreet, forKey: .sCreditcarddetailStreet)
        try container.encode(sCreditcarddetailZip, forKey: .sCreditcarddetailZip)
    }
}

