//
// ApikeyListElement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Branding List Element */
public struct ApikeyListElement: Codable, JSONEncodable, Hashable {

    public static let pkiApikeyIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Apikey */
    public var pkiApikeyID: Int
    /** The description of the Apikey in the language of the requester */
    public var sApikeyDescriptionX: String
    /** The first name of the user */
    public var sUserFirstname: String
    /** The last name of the user */
    public var sUserLastname: String
    /** Whether the apikey is active or not */
    public var bApikeyIsactive: Bool
    /** Whether the apikey is signed or not */
    public var bApikeyIssigned: Bool

    public init(pkiApikeyID: Int, sApikeyDescriptionX: String, sUserFirstname: String, sUserLastname: String, bApikeyIsactive: Bool, bApikeyIssigned: Bool) {
        self.pkiApikeyID = pkiApikeyID
        self.sApikeyDescriptionX = sApikeyDescriptionX
        self.sUserFirstname = sUserFirstname
        self.sUserLastname = sUserLastname
        self.bApikeyIsactive = bApikeyIsactive
        self.bApikeyIssigned = bApikeyIssigned
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiApikeyID
        case sApikeyDescriptionX
        case sUserFirstname
        case sUserLastname
        case bApikeyIsactive
        case bApikeyIssigned
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiApikeyID, forKey: .pkiApikeyID)
        try container.encode(sApikeyDescriptionX, forKey: .sApikeyDescriptionX)
        try container.encode(sUserFirstname, forKey: .sUserFirstname)
        try container.encode(sUserLastname, forKey: .sUserLastname)
        try container.encode(bApikeyIsactive, forKey: .bApikeyIsactive)
        try container.encode(bApikeyIssigned, forKey: .bApikeyIssigned)
    }
}

