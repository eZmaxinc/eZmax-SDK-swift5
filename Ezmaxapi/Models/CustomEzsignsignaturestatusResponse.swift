//
// CustomEzsignsignaturestatusResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsignsignaturestatus Object and children to create a complete structure */
public struct CustomEzsignsignaturestatusResponse: Codable, JSONEncodable, Hashable {

    public enum EEzsignsignaturestatusSteptype: String, Codable, CaseIterable {
        case form = "Form"
        case signature = "Signature"
    }
    /** Type of step */
    public var eEzsignsignaturestatusSteptype: EEzsignsignaturestatusSteptype
    /** The step at which the Ezsignsigner will be invited to sign or fill the form fields */
    public var iEzsignsignaturestatusStep: Int
    /** The total number of signature or form fields the Ezsignsigner must process at the current step */
    public var iEzsignsignaturestatusTotal: Int
    /** The number of signature or form fields the Ezsignsigner has already processed at the current step */
    public var iEzsignsignaturestatusSigned: Int
    /** The number of signature or form fields the Ezsignsigner need to sign or fill under current conditions. */
    public var iEzsignsignaturestatusConditional: Int

    public init(eEzsignsignaturestatusSteptype: EEzsignsignaturestatusSteptype, iEzsignsignaturestatusStep: Int, iEzsignsignaturestatusTotal: Int, iEzsignsignaturestatusSigned: Int, iEzsignsignaturestatusConditional: Int) {
        self.eEzsignsignaturestatusSteptype = eEzsignsignaturestatusSteptype
        self.iEzsignsignaturestatusStep = iEzsignsignaturestatusStep
        self.iEzsignsignaturestatusTotal = iEzsignsignaturestatusTotal
        self.iEzsignsignaturestatusSigned = iEzsignsignaturestatusSigned
        self.iEzsignsignaturestatusConditional = iEzsignsignaturestatusConditional
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eEzsignsignaturestatusSteptype
        case iEzsignsignaturestatusStep
        case iEzsignsignaturestatusTotal
        case iEzsignsignaturestatusSigned
        case iEzsignsignaturestatusConditional
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eEzsignsignaturestatusSteptype, forKey: .eEzsignsignaturestatusSteptype)
        try container.encode(iEzsignsignaturestatusStep, forKey: .iEzsignsignaturestatusStep)
        try container.encode(iEzsignsignaturestatusTotal, forKey: .iEzsignsignaturestatusTotal)
        try container.encode(iEzsignsignaturestatusSigned, forKey: .iEzsignsignaturestatusSigned)
        try container.encode(iEzsignsignaturestatusConditional, forKey: .iEzsignsignaturestatusConditional)
    }
}

