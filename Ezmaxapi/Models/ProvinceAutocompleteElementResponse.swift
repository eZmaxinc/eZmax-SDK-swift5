//
// ProvinceAutocompleteElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Province AutocompleteElement Response */
public struct ProvinceAutocompleteElementResponse: Codable, JSONEncodable, Hashable {

    public static let pkiProvinceIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiCountryIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let sProvinceNameXRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    public static let sProvinceShortnameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{1,3}$/")
    /** The unique ID of the Province.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|(Canada) Alberta |2|(Canada) British Columbia| |3|(Canada) Manitoba| |3|(Canada) Manitoba| |4|(Canada) New Brunswick| |5|(Canada) Newfoundland| |6|(Canada) Northwest Territories| |7|(Canada) Nova Scotia| |8|(Canada) Nunavut| |9|(Canada) Ontario| |10|(Canada) Prince Edward Island| |11|(Canada) Quebec| |12|(Canada) Saskatchewan| |13|(Canada) Yukon| |14|(United-States) Alabama| |15|(United-States) Alaska| |16|(United-States) Arizona| |17|(United-States) Arkansas| |18|(United-States) California| |19|(United-States) Colorado| |20|(United-States) Connecticut| |21|(United-States) Delaware| |22|(United-States) District of Columbia| |23|(United-States) Florida| |24|(United-States) Georgia| |25|(United-States) Hawaii| |26|(United-States) Idaho| |27|(United-States) Illinois| |28|(United-States) Indiana| |29|(United-States) Iowa| |30|(United-States) Kansas| |31|(United-States) Kentucky| |32|(United-States) Louisiane| |33|(United-States) Maine| |34|(United-States) Maryland| |35|(United-States) Massachusetts| |36|(United-States) Michigan| |37|(United-States) Minnesota| |38|(United-States) Mississippi| |39|(United-States) Missouri| |40|(United-States) Montana| |41|(United-States) Nebraska| |42|(United-States) Nevada| |43|(United-States) New Hampshire| |44|(United-States) New Jersey| |45|(United-States) New Mexico| |46|(United-States) New York| |47|(United-States) North Carolina| |48|(United-States) North Dakota| |49|(United-States) Ohio| |50|(United-States) Oklahoma| |51|(United-States) Oregon| |52|(United-States) Pennsylvania| |53|(United-States) Rhode Island| |54|(United-States) South Carolina| |55|(United-States) South Dakota| |56|(United-States) Tennessee| |57|(United-States) Texas| |58|(United-States) Utah| |60|(United-States) Vermont| |59|(United-States) Virginia| |61|(United-States) Washington| |62|(United-States) West Virginia| |63|(United-States) Wisconsin| |64|(United-States) Wyoming| */
    public var pkiProvinceID: Int
    /** The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States| */
    public var fkiCountryID: Int
    /** The name of the Province in the language of the requester */
    public var sProvinceNameX: String
    /** The shortname of the Province */
    public var sProvinceShortname: String
    /** Whether the Province is active or not */
    public var bProvinceIsactive: Bool

    public init(pkiProvinceID: Int, fkiCountryID: Int, sProvinceNameX: String, sProvinceShortname: String, bProvinceIsactive: Bool) {
        self.pkiProvinceID = pkiProvinceID
        self.fkiCountryID = fkiCountryID
        self.sProvinceNameX = sProvinceNameX
        self.sProvinceShortname = sProvinceShortname
        self.bProvinceIsactive = bProvinceIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiProvinceID
        case fkiCountryID
        case sProvinceNameX
        case sProvinceShortname
        case bProvinceIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiProvinceID, forKey: .pkiProvinceID)
        try container.encode(fkiCountryID, forKey: .fkiCountryID)
        try container.encode(sProvinceNameX, forKey: .sProvinceNameX)
        try container.encode(sProvinceShortname, forKey: .sProvinceShortname)
        try container.encode(bProvinceIsactive, forKey: .bProvinceIsactive)
    }
}

