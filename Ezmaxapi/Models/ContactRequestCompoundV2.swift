//
// ContactRequestCompoundV2.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Contact Object and children to create a complete structure */
public struct ContactRequestCompoundV2: Codable, JSONEncodable, Hashable {

    public static let fkiContacttitleIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiLanguageIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    public static let sContactFirstnameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{1,20}$/")
    public static let sContactLastnameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{1,25}$/")
    public static let sContactOccupationRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    public static let tContactNoteRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,32000}$/")
    /** The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)| */
    public var fkiContacttitleID: Int
    /** The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| */
    public var fkiLanguageID: Int
    public var eContactType: FieldEContactType
    /** The First name of the contact */
    public var sContactFirstname: String
    /** The Last name of the contact */
    public var sContactLastname: String
    /** The Company name of the contact */
    public var sContactCompany: String?
    /** The Birth Date of the contact */
    public var dtContactBirthdate: String?
    /** The occupation of the Contact */
    public var sContactOccupation: String?
    /** The note of the Contact */
    public var tContactNote: String?
    /** Whether the contact is active or not */
    public var bContactIsactive: Bool?
    public var objContactinformations: ContactinformationsRequestCompoundV2

    public init(fkiContacttitleID: Int, fkiLanguageID: Int, eContactType: FieldEContactType, sContactFirstname: String, sContactLastname: String, sContactCompany: String? = nil, dtContactBirthdate: String? = nil, sContactOccupation: String? = nil, tContactNote: String? = nil, bContactIsactive: Bool? = nil, objContactinformations: ContactinformationsRequestCompoundV2) {
        self.fkiContacttitleID = fkiContacttitleID
        self.fkiLanguageID = fkiLanguageID
        self.eContactType = eContactType
        self.sContactFirstname = sContactFirstname
        self.sContactLastname = sContactLastname
        self.sContactCompany = sContactCompany
        self.dtContactBirthdate = dtContactBirthdate
        self.sContactOccupation = sContactOccupation
        self.tContactNote = tContactNote
        self.bContactIsactive = bContactIsactive
        self.objContactinformations = objContactinformations
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fkiContacttitleID
        case fkiLanguageID
        case eContactType
        case sContactFirstname
        case sContactLastname
        case sContactCompany
        case dtContactBirthdate
        case sContactOccupation
        case tContactNote
        case bContactIsactive
        case objContactinformations
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(fkiContacttitleID, forKey: .fkiContacttitleID)
        try container.encode(fkiLanguageID, forKey: .fkiLanguageID)
        try container.encode(eContactType, forKey: .eContactType)
        try container.encode(sContactFirstname, forKey: .sContactFirstname)
        try container.encode(sContactLastname, forKey: .sContactLastname)
        try container.encodeIfPresent(sContactCompany, forKey: .sContactCompany)
        try container.encodeIfPresent(dtContactBirthdate, forKey: .dtContactBirthdate)
        try container.encodeIfPresent(sContactOccupation, forKey: .sContactOccupation)
        try container.encodeIfPresent(tContactNote, forKey: .tContactNote)
        try container.encodeIfPresent(bContactIsactive, forKey: .bContactIsactive)
        try container.encode(objContactinformations, forKey: .objContactinformations)
    }
}

