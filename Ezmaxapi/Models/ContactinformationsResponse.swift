//
// ContactinformationsResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Contactinformations Object */
public struct ContactinformationsResponse: Codable, JSONEncodable, Hashable {

    public static let pkiContactinformationsIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiAddressIDDefaultRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiPhoneIDDefaultRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiEmailIDDefaultRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiWebsiteIDDefaultRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    public static let sContactinformationsUrlRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,255}$/")
    /** The unique ID of the Contactinformations */
    public var pkiContactinformationsID: Int
    /** The unique ID of the Address */
    public var fkiAddressIDDefault: Int?
    /** The unique ID of the Phone. */
    public var fkiPhoneIDDefault: Int?
    /** The unique ID of the Email */
    public var fkiEmailIDDefault: Int?
    /** The unique ID of the Website Default */
    public var fkiWebsiteIDDefault: Int?
    public var eContactinformationsType: FieldEContactinformationsType
    /** The url of the Contactinformations */
    public var sContactinformationsUrl: String?
    public var objAddressDefault: AddressResponseCompound?
    public var objPhoneDefault: PhoneResponseCompound?
    public var objEmailDefault: EmailResponseCompound?
    public var objWebsiteDefault: WebsiteResponseCompound?

    public init(pkiContactinformationsID: Int, fkiAddressIDDefault: Int? = nil, fkiPhoneIDDefault: Int? = nil, fkiEmailIDDefault: Int? = nil, fkiWebsiteIDDefault: Int? = nil, eContactinformationsType: FieldEContactinformationsType, sContactinformationsUrl: String? = nil, objAddressDefault: AddressResponseCompound? = nil, objPhoneDefault: PhoneResponseCompound? = nil, objEmailDefault: EmailResponseCompound? = nil, objWebsiteDefault: WebsiteResponseCompound? = nil) {
        self.pkiContactinformationsID = pkiContactinformationsID
        self.fkiAddressIDDefault = fkiAddressIDDefault
        self.fkiPhoneIDDefault = fkiPhoneIDDefault
        self.fkiEmailIDDefault = fkiEmailIDDefault
        self.fkiWebsiteIDDefault = fkiWebsiteIDDefault
        self.eContactinformationsType = eContactinformationsType
        self.sContactinformationsUrl = sContactinformationsUrl
        self.objAddressDefault = objAddressDefault
        self.objPhoneDefault = objPhoneDefault
        self.objEmailDefault = objEmailDefault
        self.objWebsiteDefault = objWebsiteDefault
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiContactinformationsID
        case fkiAddressIDDefault
        case fkiPhoneIDDefault
        case fkiEmailIDDefault
        case fkiWebsiteIDDefault
        case eContactinformationsType
        case sContactinformationsUrl
        case objAddressDefault
        case objPhoneDefault
        case objEmailDefault
        case objWebsiteDefault
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiContactinformationsID, forKey: .pkiContactinformationsID)
        try container.encodeIfPresent(fkiAddressIDDefault, forKey: .fkiAddressIDDefault)
        try container.encodeIfPresent(fkiPhoneIDDefault, forKey: .fkiPhoneIDDefault)
        try container.encodeIfPresent(fkiEmailIDDefault, forKey: .fkiEmailIDDefault)
        try container.encodeIfPresent(fkiWebsiteIDDefault, forKey: .fkiWebsiteIDDefault)
        try container.encode(eContactinformationsType, forKey: .eContactinformationsType)
        try container.encodeIfPresent(sContactinformationsUrl, forKey: .sContactinformationsUrl)
        try container.encodeIfPresent(objAddressDefault, forKey: .objAddressDefault)
        try container.encodeIfPresent(objPhoneDefault, forKey: .objPhoneDefault)
        try container.encodeIfPresent(objEmailDefault, forKey: .objEmailDefault)
        try container.encodeIfPresent(objWebsiteDefault, forKey: .objWebsiteDefault)
    }
}

