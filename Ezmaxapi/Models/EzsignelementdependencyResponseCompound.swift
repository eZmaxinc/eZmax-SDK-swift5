//
// EzsignelementdependencyResponseCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An Ezsignelementdependency Object and children to create a complete structure */
public struct EzsignelementdependencyResponseCompound: Codable, JSONEncodable, Hashable {

    static let pkiEzsignelementdependencyIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsignformfieldIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsignsignatureIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsignformfieldIDValidationRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsignformfieldgroupIDValidationRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let sEzsignelementdependencyValueRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    /** The unique ID of the Ezsignelementdependency */
    public var pkiEzsignelementdependencyID: Int
    /** The unique ID of the Ezsignformfield */
    public var fkiEzsignformfieldID: Int?
    /** The unique ID of the Ezsignsignature */
    public var fkiEzsignsignatureID: Int?
    /** The unique ID of the Ezsignformfield */
    public var fkiEzsignformfieldIDValidation: Int?
    /** The unique ID of the Ezsignformfieldgroup */
    public var fkiEzsignformfieldgroupIDValidation: Int?
    public var eEzsignelementdependencyValidation: FieldEEzsignelementdependencyValidation
    /** Whether if it's selected or not when using eEzsignelementdependencyValidation = Selected */
    public var bEzsignelementdependencySelected: Bool?
    public var eEzsignelementdependencyOperator: FieldEEzsignelementdependencyOperator?
    /** The value of the Ezsignelementdependency */
    public var sEzsignelementdependencyValue: String?

    public init(pkiEzsignelementdependencyID: Int, fkiEzsignformfieldID: Int? = nil, fkiEzsignsignatureID: Int? = nil, fkiEzsignformfieldIDValidation: Int? = nil, fkiEzsignformfieldgroupIDValidation: Int? = nil, eEzsignelementdependencyValidation: FieldEEzsignelementdependencyValidation, bEzsignelementdependencySelected: Bool? = nil, eEzsignelementdependencyOperator: FieldEEzsignelementdependencyOperator? = nil, sEzsignelementdependencyValue: String? = nil) {
        self.pkiEzsignelementdependencyID = pkiEzsignelementdependencyID
        self.fkiEzsignformfieldID = fkiEzsignformfieldID
        self.fkiEzsignsignatureID = fkiEzsignsignatureID
        self.fkiEzsignformfieldIDValidation = fkiEzsignformfieldIDValidation
        self.fkiEzsignformfieldgroupIDValidation = fkiEzsignformfieldgroupIDValidation
        self.eEzsignelementdependencyValidation = eEzsignelementdependencyValidation
        self.bEzsignelementdependencySelected = bEzsignelementdependencySelected
        self.eEzsignelementdependencyOperator = eEzsignelementdependencyOperator
        self.sEzsignelementdependencyValue = sEzsignelementdependencyValue
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsignelementdependencyID
        case fkiEzsignformfieldID
        case fkiEzsignsignatureID
        case fkiEzsignformfieldIDValidation
        case fkiEzsignformfieldgroupIDValidation
        case eEzsignelementdependencyValidation
        case bEzsignelementdependencySelected
        case eEzsignelementdependencyOperator
        case sEzsignelementdependencyValue
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsignelementdependencyID, forKey: .pkiEzsignelementdependencyID)
        try container.encodeIfPresent(fkiEzsignformfieldID, forKey: .fkiEzsignformfieldID)
        try container.encodeIfPresent(fkiEzsignsignatureID, forKey: .fkiEzsignsignatureID)
        try container.encodeIfPresent(fkiEzsignformfieldIDValidation, forKey: .fkiEzsignformfieldIDValidation)
        try container.encodeIfPresent(fkiEzsignformfieldgroupIDValidation, forKey: .fkiEzsignformfieldgroupIDValidation)
        try container.encode(eEzsignelementdependencyValidation, forKey: .eEzsignelementdependencyValidation)
        try container.encodeIfPresent(bEzsignelementdependencySelected, forKey: .bEzsignelementdependencySelected)
        try container.encodeIfPresent(eEzsignelementdependencyOperator, forKey: .eEzsignelementdependencyOperator)
        try container.encodeIfPresent(sEzsignelementdependencyValue, forKey: .sEzsignelementdependencyValue)
    }
}

