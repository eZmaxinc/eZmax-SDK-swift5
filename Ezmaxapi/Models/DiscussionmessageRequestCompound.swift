//
// DiscussionmessageRequestCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Discussionmessage Object and children */
public struct DiscussionmessageRequestCompound: Codable, JSONEncodable, Hashable {

    static let pkiDiscussionmessageIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    static let fkiDiscussionIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    static let fkiDiscussionmembershipIDActionrequiredRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    static let tDiscussionmessageContentRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,65535}$/")
    /** The unique ID of the Discussionmessage */
    public var pkiDiscussionmessageID: Int?
    /** The unique ID of the Discussion */
    public var fkiDiscussionID: Int
    /** The unique ID of the Discussionmembership */
    public var fkiDiscussionmembershipIDActionrequired: Int?
    /** The content of the Discussionmessage */
    public var tDiscussionmessageContent: String

    public init(pkiDiscussionmessageID: Int? = nil, fkiDiscussionID: Int, fkiDiscussionmembershipIDActionrequired: Int? = nil, tDiscussionmessageContent: String) {
        self.pkiDiscussionmessageID = pkiDiscussionmessageID
        self.fkiDiscussionID = fkiDiscussionID
        self.fkiDiscussionmembershipIDActionrequired = fkiDiscussionmembershipIDActionrequired
        self.tDiscussionmessageContent = tDiscussionmessageContent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiDiscussionmessageID
        case fkiDiscussionID
        case fkiDiscussionmembershipIDActionrequired
        case tDiscussionmessageContent
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiDiscussionmessageID, forKey: .pkiDiscussionmessageID)
        try container.encode(fkiDiscussionID, forKey: .fkiDiscussionID)
        try container.encodeIfPresent(fkiDiscussionmembershipIDActionrequired, forKey: .fkiDiscussionmembershipIDActionrequired)
        try container.encode(tDiscussionmessageContent, forKey: .tDiscussionmessageContent)
    }
}

