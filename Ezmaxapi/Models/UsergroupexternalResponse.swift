//
// UsergroupexternalResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Usergroupexternal Object */
public struct UsergroupexternalResponse: Codable, JSONEncodable, Hashable {

    public static let pkiUsergroupexternalIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let sUsergroupexternalNameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,64}$/")
    public static let sUsergroupexternalIDRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,64}$/")
    /** The unique ID of the Usergroupexternal */
    public var pkiUsergroupexternalID: Int
    /** The name of the Usergroupexternal */
    public var sUsergroupexternalName: String
    /** The id of the Usergroupexternal */
    public var sUsergroupexternalID: String

    public init(pkiUsergroupexternalID: Int, sUsergroupexternalName: String, sUsergroupexternalID: String) {
        self.pkiUsergroupexternalID = pkiUsergroupexternalID
        self.sUsergroupexternalName = sUsergroupexternalName
        self.sUsergroupexternalID = sUsergroupexternalID
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiUsergroupexternalID
        case sUsergroupexternalName
        case sUsergroupexternalID
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiUsergroupexternalID, forKey: .pkiUsergroupexternalID)
        try container.encode(sUsergroupexternalName, forKey: .sUsergroupexternalName)
        try container.encode(sUsergroupexternalID, forKey: .sUsergroupexternalID)
    }
}

