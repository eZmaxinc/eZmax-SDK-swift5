//
// CommunicationrecipientRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Communicationrecipient Object */
public struct CommunicationrecipientRequest: Codable, JSONEncodable, Hashable {

    static let pkiCommunicationrecipientIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiAgentIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiBrokerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiContactIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiCustomerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEmployeeIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiAssistantIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiExternalbrokerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsignsignerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiNotaryIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiSupplierIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiUserIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiMailboxsharedIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    static let fkiPhonelinesharedIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Communicationrecipient. */
    public var pkiCommunicationrecipientID: Int?
    /** The unique ID of the Agent. */
    public var fkiAgentID: Int?
    /** The unique ID of the Broker. */
    public var fkiBrokerID: Int?
    /** The unique ID of the Contact */
    public var fkiContactID: Int?
    /** The unique ID of the Customer. */
    public var fkiCustomerID: Int?
    /** The unique ID of the Employee. */
    public var fkiEmployeeID: Int?
    /** The unique ID of the Assistant. */
    public var fkiAssistantID: Int?
    /** The unique ID of the Externalbroker. */
    public var fkiExternalbrokerID: Int?
    /** The unique ID of the Ezsignsigner */
    public var fkiEzsignsignerID: Int?
    /** The unique ID of the Notary. */
    public var fkiNotaryID: Int?
    /** The unique ID of the Supplier. */
    public var fkiSupplierID: Int?
    /** The unique ID of the User */
    public var fkiUserID: Int?
    /** The unique ID of the Mailboxshared */
    public var fkiMailboxsharedID: Int?
    /** The unique ID of the Phonelineshared */
    public var fkiPhonelinesharedID: Int?
    public var eCommunicationrecipientType: FieldECommunicationrecipientType?

    public init(pkiCommunicationrecipientID: Int? = nil, fkiAgentID: Int? = nil, fkiBrokerID: Int? = nil, fkiContactID: Int? = nil, fkiCustomerID: Int? = nil, fkiEmployeeID: Int? = nil, fkiAssistantID: Int? = nil, fkiExternalbrokerID: Int? = nil, fkiEzsignsignerID: Int? = nil, fkiNotaryID: Int? = nil, fkiSupplierID: Int? = nil, fkiUserID: Int? = nil, fkiMailboxsharedID: Int? = nil, fkiPhonelinesharedID: Int? = nil, eCommunicationrecipientType: FieldECommunicationrecipientType? = nil) {
        self.pkiCommunicationrecipientID = pkiCommunicationrecipientID
        self.fkiAgentID = fkiAgentID
        self.fkiBrokerID = fkiBrokerID
        self.fkiContactID = fkiContactID
        self.fkiCustomerID = fkiCustomerID
        self.fkiEmployeeID = fkiEmployeeID
        self.fkiAssistantID = fkiAssistantID
        self.fkiExternalbrokerID = fkiExternalbrokerID
        self.fkiEzsignsignerID = fkiEzsignsignerID
        self.fkiNotaryID = fkiNotaryID
        self.fkiSupplierID = fkiSupplierID
        self.fkiUserID = fkiUserID
        self.fkiMailboxsharedID = fkiMailboxsharedID
        self.fkiPhonelinesharedID = fkiPhonelinesharedID
        self.eCommunicationrecipientType = eCommunicationrecipientType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCommunicationrecipientID
        case fkiAgentID
        case fkiBrokerID
        case fkiContactID
        case fkiCustomerID
        case fkiEmployeeID
        case fkiAssistantID
        case fkiExternalbrokerID
        case fkiEzsignsignerID
        case fkiNotaryID
        case fkiSupplierID
        case fkiUserID
        case fkiMailboxsharedID
        case fkiPhonelinesharedID
        case eCommunicationrecipientType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiCommunicationrecipientID, forKey: .pkiCommunicationrecipientID)
        try container.encodeIfPresent(fkiAgentID, forKey: .fkiAgentID)
        try container.encodeIfPresent(fkiBrokerID, forKey: .fkiBrokerID)
        try container.encodeIfPresent(fkiContactID, forKey: .fkiContactID)
        try container.encodeIfPresent(fkiCustomerID, forKey: .fkiCustomerID)
        try container.encodeIfPresent(fkiEmployeeID, forKey: .fkiEmployeeID)
        try container.encodeIfPresent(fkiAssistantID, forKey: .fkiAssistantID)
        try container.encodeIfPresent(fkiExternalbrokerID, forKey: .fkiExternalbrokerID)
        try container.encodeIfPresent(fkiEzsignsignerID, forKey: .fkiEzsignsignerID)
        try container.encodeIfPresent(fkiNotaryID, forKey: .fkiNotaryID)
        try container.encodeIfPresent(fkiSupplierID, forKey: .fkiSupplierID)
        try container.encodeIfPresent(fkiUserID, forKey: .fkiUserID)
        try container.encodeIfPresent(fkiMailboxsharedID, forKey: .fkiMailboxsharedID)
        try container.encodeIfPresent(fkiPhonelinesharedID, forKey: .fkiPhonelinesharedID)
        try container.encodeIfPresent(eCommunicationrecipientType, forKey: .eCommunicationrecipientType)
    }
}

