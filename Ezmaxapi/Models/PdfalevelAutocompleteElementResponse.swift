//
// PdfalevelAutocompleteElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Pdfalevel AutocompleteElement Response */
public struct PdfalevelAutocompleteElementResponse: Codable, JSONEncodable, Hashable {

    public static let pkiPdfalevelIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    public static let sPdfalevelNameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,15}$/")
    /** The unique ID of the Pdfalevel */
    public var pkiPdfalevelID: Int
    /** The name of the Pdfalevel */
    public var sPdfalevelName: String
    /** Whether the Pdfalevel is active or not */
    public var bPdfalevelIsactive: Bool

    public init(pkiPdfalevelID: Int, sPdfalevelName: String, bPdfalevelIsactive: Bool) {
        self.pkiPdfalevelID = pkiPdfalevelID
        self.sPdfalevelName = sPdfalevelName
        self.bPdfalevelIsactive = bPdfalevelIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiPdfalevelID
        case sPdfalevelName
        case bPdfalevelIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiPdfalevelID, forKey: .pkiPdfalevelID)
        try container.encode(sPdfalevelName, forKey: .sPdfalevelName)
        try container.encode(bPdfalevelIsactive, forKey: .bPdfalevelIsactive)
    }
}

