//
// EzsigntemplateAutocompleteElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsigntemplate AutocompleteElement Response */
public struct EzsigntemplateAutocompleteElementResponse: Codable, JSONEncodable, Hashable {

    public static let sEzsigntemplateDescriptionRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,80}$/")
    public static let pkiEzsigntemplateIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var eEzsignfoldertypePrivacylevel: FieldEEzsignfoldertypePrivacylevel
    /** The description of the Ezsigntemplate */
    public var sEzsigntemplateDescription: String
    /** The unique ID of the Ezsigntemplate */
    public var pkiEzsigntemplateID: Int
    /** Whether the Ezsigntemplate is active or not */
    public var bEzsigntemplateIsactive: Bool

    public init(eEzsignfoldertypePrivacylevel: FieldEEzsignfoldertypePrivacylevel, sEzsigntemplateDescription: String, pkiEzsigntemplateID: Int, bEzsigntemplateIsactive: Bool) {
        self.eEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel
        self.sEzsigntemplateDescription = sEzsigntemplateDescription
        self.pkiEzsigntemplateID = pkiEzsigntemplateID
        self.bEzsigntemplateIsactive = bEzsigntemplateIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eEzsignfoldertypePrivacylevel
        case sEzsigntemplateDescription
        case pkiEzsigntemplateID
        case bEzsigntemplateIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eEzsignfoldertypePrivacylevel, forKey: .eEzsignfoldertypePrivacylevel)
        try container.encode(sEzsigntemplateDescription, forKey: .sEzsigntemplateDescription)
        try container.encode(pkiEzsigntemplateID, forKey: .pkiEzsigntemplateID)
        try container.encode(bEzsigntemplateIsactive, forKey: .bEzsigntemplateIsactive)
    }
}

