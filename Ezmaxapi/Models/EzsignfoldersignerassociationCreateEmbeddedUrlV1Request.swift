//
// EzsignfoldersignerassociationCreateEmbeddedUrlV1Request.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request for POST /1/object/ezsignfoldersignerassociation/createEmbeddedUrl */
public struct EzsignfoldersignerassociationCreateEmbeddedUrlV1Request: Codable, JSONEncodable, Hashable {

    static let sReturnUrlRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,2048}$/")
    static let sIframedomainRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,2048}$/")
    /** The return Url to redirect after the signing is completed */
    public var sReturnUrl: String?
    /** Domain protection for the iFrame */
    public var sIframedomain: String?
    /** Whether the url would be in an iFrame or not */
    public var bIsiframe: Bool?

    public init(sReturnUrl: String? = nil, sIframedomain: String? = nil, bIsiframe: Bool? = nil) {
        self.sReturnUrl = sReturnUrl
        self.sIframedomain = sIframedomain
        self.bIsiframe = bIsiframe
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sReturnUrl
        case sIframedomain
        case bIsiframe
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sReturnUrl, forKey: .sReturnUrl)
        try container.encodeIfPresent(sIframedomain, forKey: .sIframedomain)
        try container.encodeIfPresent(bIsiframe, forKey: .bIsiframe)
    }
}

