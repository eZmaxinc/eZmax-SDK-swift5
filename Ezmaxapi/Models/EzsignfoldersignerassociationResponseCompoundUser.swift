//
// EzsignfoldersignerassociationResponseCompoundUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsignfoldersignerassociation-&gt;User Object and children to create a complete structure */
public struct EzsignfoldersignerassociationResponseCompoundUser: Codable, JSONEncodable, Hashable {

    static let pkiUserIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiLanguageIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    static let sEmailAddressRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[\\w.%+\\-!#$%&'*+\/=?^`{|}~]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,20}$/")
    /** The unique ID of the User */
    public var pkiUserID: Int
    /** The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| */
    public var fkiLanguageID: Int
    /** The first name of the user */
    public var sUserFirstname: String
    /** The last name of the user */
    public var sUserLastname: String
    /** The email address. */
    public var sEmailAddress: String

    public init(pkiUserID: Int, fkiLanguageID: Int, sUserFirstname: String, sUserLastname: String, sEmailAddress: String) {
        self.pkiUserID = pkiUserID
        self.fkiLanguageID = fkiLanguageID
        self.sUserFirstname = sUserFirstname
        self.sUserLastname = sUserLastname
        self.sEmailAddress = sEmailAddress
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiUserID
        case fkiLanguageID
        case sUserFirstname
        case sUserLastname
        case sEmailAddress
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiUserID, forKey: .pkiUserID)
        try container.encode(fkiLanguageID, forKey: .fkiLanguageID)
        try container.encode(sUserFirstname, forKey: .sUserFirstname)
        try container.encode(sUserLastname, forKey: .sUserLastname)
        try container.encode(sEmailAddress, forKey: .sEmailAddress)
    }
}

