//
// ApikeyResponseCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An Apikey Object and children to create a complete structure */
public struct ApikeyResponseCompound: Codable, JSONEncodable, Hashable {

    public static let pkiApikeyIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public static let fkiUserIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Apikey */
    public var pkiApikeyID: Int
    /** The unique ID of the User */
    public var fkiUserID: Int
    public var objApikeyDescription: MultilingualApikeyDescription
    public var objContactName: CustomContactNameResponse
    /** The Apikey for the API key.  This will be hidden if we are not creating or regenerating the Apikey. */
    public var sApikeyApikey: String?
    /** The Secret for the API key.  This will be hidden if we are not creating or regenerating the Apikey. */
    public var sApikeySecret: String?
    /** Whether the apikey is active or not */
    public var bApikeyIsactive: Bool
    /** Whether the apikey is signed or not */
    public var bApikeyIssigned: Bool?
    public var objAudit: CommonAudit

    public init(pkiApikeyID: Int, fkiUserID: Int, objApikeyDescription: MultilingualApikeyDescription, objContactName: CustomContactNameResponse, sApikeyApikey: String? = nil, sApikeySecret: String? = nil, bApikeyIsactive: Bool, bApikeyIssigned: Bool? = nil, objAudit: CommonAudit) {
        self.pkiApikeyID = pkiApikeyID
        self.fkiUserID = fkiUserID
        self.objApikeyDescription = objApikeyDescription
        self.objContactName = objContactName
        self.sApikeyApikey = sApikeyApikey
        self.sApikeySecret = sApikeySecret
        self.bApikeyIsactive = bApikeyIsactive
        self.bApikeyIssigned = bApikeyIssigned
        self.objAudit = objAudit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiApikeyID
        case fkiUserID
        case objApikeyDescription
        case objContactName
        case sApikeyApikey
        case sApikeySecret
        case bApikeyIsactive
        case bApikeyIssigned
        case objAudit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiApikeyID, forKey: .pkiApikeyID)
        try container.encode(fkiUserID, forKey: .fkiUserID)
        try container.encode(objApikeyDescription, forKey: .objApikeyDescription)
        try container.encode(objContactName, forKey: .objContactName)
        try container.encodeIfPresent(sApikeyApikey, forKey: .sApikeyApikey)
        try container.encodeIfPresent(sApikeySecret, forKey: .sApikeySecret)
        try container.encode(bApikeyIsactive, forKey: .bApikeyIsactive)
        try container.encodeIfPresent(bApikeyIssigned, forKey: .bApikeyIssigned)
        try container.encode(objAudit, forKey: .objAudit)
    }
}

