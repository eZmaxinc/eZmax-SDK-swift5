//
// MultilingualEzsignsigningreasonDescription.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The description of the Ezsignsigningreason */
public struct MultilingualEzsignsigningreasonDescription: Codable, JSONEncodable, Hashable {

    static let sEzsignsigningreasonDescription1Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    static let sEzsignsigningreasonDescription2Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    /** The description of the Ezsignsigningreason in French */
    public var sEzsignsigningreasonDescription1: String?
    /** The description of the Ezsignsigningreason in English */
    public var sEzsignsigningreasonDescription2: String?

    public init(sEzsignsigningreasonDescription1: String? = nil, sEzsignsigningreasonDescription2: String? = nil) {
        self.sEzsignsigningreasonDescription1 = sEzsignsigningreasonDescription1
        self.sEzsignsigningreasonDescription2 = sEzsignsigningreasonDescription2
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sEzsignsigningreasonDescription1
        case sEzsignsigningreasonDescription2
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sEzsignsigningreasonDescription1, forKey: .sEzsignsigningreasonDescription1)
        try container.encodeIfPresent(sEzsignsigningreasonDescription2, forKey: .sEzsignsigningreasonDescription2)
    }
}

