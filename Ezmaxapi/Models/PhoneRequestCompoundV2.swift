//
// PhoneRequestCompoundV2.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Phone Object and children to create a complete structure */
public struct PhoneRequestCompoundV2: Codable, JSONEncodable, Hashable {

    static let pkiPhoneIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiPhonetypeIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let sPhoneE164Rule = StringRule(minLength: nil, maxLength: nil, pattern: "/^\\+[1-9]\\d{1,14}$/")
    /** The unique ID of the Phone. */
    public var pkiPhoneID: Int?
    /** The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free| */
    public var fkiPhonetypeID: Int
    /** The extension of the phone number.  The extension is the \"123\" section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers */
    public var sPhoneExtension: String?
    /** A phone number in E.164 Format */
    public var sPhoneE164: String?

    public init(pkiPhoneID: Int? = nil, fkiPhonetypeID: Int, sPhoneExtension: String? = nil, sPhoneE164: String? = nil) {
        self.pkiPhoneID = pkiPhoneID
        self.fkiPhonetypeID = fkiPhonetypeID
        self.sPhoneExtension = sPhoneExtension
        self.sPhoneE164 = sPhoneE164
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiPhoneID
        case fkiPhonetypeID
        case sPhoneExtension
        case sPhoneE164
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiPhoneID, forKey: .pkiPhoneID)
        try container.encode(fkiPhonetypeID, forKey: .fkiPhonetypeID)
        try container.encodeIfPresent(sPhoneExtension, forKey: .sPhoneExtension)
        try container.encodeIfPresent(sPhoneE164, forKey: .sPhoneE164)
    }
}

