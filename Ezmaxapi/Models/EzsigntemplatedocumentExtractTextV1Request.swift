//
// EzsigntemplatedocumentExtractTextV1Request.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request for POST /1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/extractText */
public struct EzsigntemplatedocumentExtractTextV1Request: Codable, JSONEncodable, Hashable {

    public enum ESection: String, Codable, CaseIterable {
        case firstLine = "FirstLine"
        case lastLine = "LastLine"
        case region = "Region"
    }
    /** The page where the area is located */
    public var iPage: Int
    /** The section of the page */
    public var eSection: ESection?
    /** The X coordinate (Horizontal). Require when eSection = 'Region' or eSection is not set. */
    public var iX: Int?
    /** The Y coordinate (Vertical). Require when eSection = 'Region' or eSection is not set. */
    public var iY: Int?
    /** Area's width. Require when eSection = 'Region' or eSection is not set. */
    public var iWidth: Int?
    /** Area's height. Require when eSection = 'Region' or eSection is not set. */
    public var iHeight: Int?

    public init(iPage: Int, eSection: ESection? = nil, iX: Int? = nil, iY: Int? = nil, iWidth: Int? = nil, iHeight: Int? = nil) {
        self.iPage = iPage
        self.eSection = eSection
        self.iX = iX
        self.iY = iY
        self.iWidth = iWidth
        self.iHeight = iHeight
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case iPage
        case eSection
        case iX
        case iY
        case iWidth
        case iHeight
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(iPage, forKey: .iPage)
        try container.encodeIfPresent(eSection, forKey: .eSection)
        try container.encodeIfPresent(iX, forKey: .iX)
        try container.encodeIfPresent(iY, forKey: .iY)
        try container.encodeIfPresent(iWidth, forKey: .iWidth)
        try container.encodeIfPresent(iHeight, forKey: .iHeight)
    }
}

