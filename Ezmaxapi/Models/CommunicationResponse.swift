//
// CommunicationResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Communication Object */
public struct CommunicationResponse: Codable, JSONEncodable, Hashable {

    static let pkiCommunicationIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Communication. */
    public var pkiCommunicationID: Int
    public var eCommunicationImportance: FieldECommunicationImportance
    public var eCommunicationType: FieldECommunicationType
    /** The subject of the Communication */
    public var sCommunicationSubject: String
    /** The url of the body used as body in the Communication */
    public var sCommunicationBodyurl: String?
    public var eCommunicationDirection: ComputedECommunicationDirection
    /** The count of Communicationrecipient */
    public var iCommunicationrecipientCount: Int
    /** Whether the Communication is private or not */
    public var bCommunicationPrivate: Bool
    public var objDescriptionstaticSender: DescriptionstaticResponse?
    public var objEmailstaticSender: EmailstaticResponse?
    public var objPhonestaticSender: PhonestaticResponse?
    public var objAudit: CommonAudit

    public init(pkiCommunicationID: Int, eCommunicationImportance: FieldECommunicationImportance, eCommunicationType: FieldECommunicationType, sCommunicationSubject: String, sCommunicationBodyurl: String? = nil, eCommunicationDirection: ComputedECommunicationDirection, iCommunicationrecipientCount: Int, bCommunicationPrivate: Bool, objDescriptionstaticSender: DescriptionstaticResponse? = nil, objEmailstaticSender: EmailstaticResponse? = nil, objPhonestaticSender: PhonestaticResponse? = nil, objAudit: CommonAudit) {
        self.pkiCommunicationID = pkiCommunicationID
        self.eCommunicationImportance = eCommunicationImportance
        self.eCommunicationType = eCommunicationType
        self.sCommunicationSubject = sCommunicationSubject
        self.sCommunicationBodyurl = sCommunicationBodyurl
        self.eCommunicationDirection = eCommunicationDirection
        self.iCommunicationrecipientCount = iCommunicationrecipientCount
        self.bCommunicationPrivate = bCommunicationPrivate
        self.objDescriptionstaticSender = objDescriptionstaticSender
        self.objEmailstaticSender = objEmailstaticSender
        self.objPhonestaticSender = objPhonestaticSender
        self.objAudit = objAudit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCommunicationID
        case eCommunicationImportance
        case eCommunicationType
        case sCommunicationSubject
        case sCommunicationBodyurl
        case eCommunicationDirection
        case iCommunicationrecipientCount
        case bCommunicationPrivate
        case objDescriptionstaticSender
        case objEmailstaticSender
        case objPhonestaticSender
        case objAudit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiCommunicationID, forKey: .pkiCommunicationID)
        try container.encode(eCommunicationImportance, forKey: .eCommunicationImportance)
        try container.encode(eCommunicationType, forKey: .eCommunicationType)
        try container.encode(sCommunicationSubject, forKey: .sCommunicationSubject)
        try container.encodeIfPresent(sCommunicationBodyurl, forKey: .sCommunicationBodyurl)
        try container.encode(eCommunicationDirection, forKey: .eCommunicationDirection)
        try container.encode(iCommunicationrecipientCount, forKey: .iCommunicationrecipientCount)
        try container.encode(bCommunicationPrivate, forKey: .bCommunicationPrivate)
        try container.encodeIfPresent(objDescriptionstaticSender, forKey: .objDescriptionstaticSender)
        try container.encodeIfPresent(objEmailstaticSender, forKey: .objEmailstaticSender)
        try container.encodeIfPresent(objPhonestaticSender, forKey: .objPhonestaticSender)
        try container.encode(objAudit, forKey: .objAudit)
    }
}

