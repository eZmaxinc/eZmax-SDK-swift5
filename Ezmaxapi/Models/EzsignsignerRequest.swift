//
// EzsignsignerRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An Ezsignsigner Object */
public struct EzsignsignerRequest: Codable, JSONEncodable, Hashable {

    public enum EEzsignsignerLogintype: String, Codable, CaseIterable {
        case password = "Password"
        case passwordPhone = "PasswordPhone"
        case passwordQuestion = "PasswordQuestion"
        case inPersonPhone = "InPersonPhone"
        case inPerson = "InPerson"
    }
    static let fkiUserlogintypeIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiTaxassignmentIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 15, exclusiveMaximum: false, multipleOf: nil)
    static let fkiSecretquestionIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \"In-Person\" and there won't be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| */
    public var fkiUserlogintypeID: Int?
    /** The unique ID of the Taxassignment.  Valid values:  |Value|Description| |-|-| |1|No tax| |2|GST| |3|HST (ON)| |4|HST (NB)| |5|HST (NS)| |6|HST (NL)| |7|HST (PE)| |8|GST + QST (QC)| |9|GST + QST (QC) Non-Recoverable| |10|GST + PST (BC)| |11|GST + PST (SK)| |12|GST + RST (MB)| |13|GST + PST (BC) Non-Recoverable| |14|GST + PST (SK) Non-Recoverable| |15|GST + RST (MB) Non-Recoverable| */
    public var fkiTaxassignmentID: Int
    /** The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father's middle name| |15|Your mother's maiden name| |16|Name of your eldest child| |17|Your spouse's middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat's name| |22|Date of Birth (YYYY-MM-DD)| |22|Secret Code| |22|Your reference code| */
    public var fkiSecretquestionID: Int?
    /** The method the Ezsignsigner will authenticate to the signing platform.  1. **Password** means the Ezsignsigner will receive a secure link by email. 2. **PasswordPhone** means the Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**. 3. **PasswordQuestion** means the Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer. 4. **InPersonPhone** means the Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**. 5. **InPerson** means the Ezsignsigner will only be able to sign \"In-Person\" and there won't be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var eEzsignsignerLogintype: EEzsignsignerLogintype?
    /** The predefined answer to the secret question the Ezsignsigner will need to provide to successfully authenticate. */
    public var sEzsignsignerSecretanswer: String?

    public init(fkiUserlogintypeID: Int? = nil, fkiTaxassignmentID: Int, fkiSecretquestionID: Int? = nil, eEzsignsignerLogintype: EEzsignsignerLogintype? = nil, sEzsignsignerSecretanswer: String? = nil) {
        self.fkiUserlogintypeID = fkiUserlogintypeID
        self.fkiTaxassignmentID = fkiTaxassignmentID
        self.fkiSecretquestionID = fkiSecretquestionID
        self.eEzsignsignerLogintype = eEzsignsignerLogintype
        self.sEzsignsignerSecretanswer = sEzsignsignerSecretanswer
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fkiUserlogintypeID
        case fkiTaxassignmentID
        case fkiSecretquestionID
        case eEzsignsignerLogintype
        case sEzsignsignerSecretanswer
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fkiUserlogintypeID, forKey: .fkiUserlogintypeID)
        try container.encode(fkiTaxassignmentID, forKey: .fkiTaxassignmentID)
        try container.encodeIfPresent(fkiSecretquestionID, forKey: .fkiSecretquestionID)
        try container.encodeIfPresent(eEzsignsignerLogintype, forKey: .eEzsignsignerLogintype)
        try container.encodeIfPresent(sEzsignsignerSecretanswer, forKey: .sEzsignsignerSecretanswer)
    }
}

