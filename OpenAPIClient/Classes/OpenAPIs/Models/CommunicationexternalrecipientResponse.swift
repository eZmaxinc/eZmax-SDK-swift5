//
// CommunicationexternalrecipientResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Communicationexternalrecipient Object */
public struct CommunicationexternalrecipientResponse: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Communicationexternalrecipient */
    public var pkiCommunicationexternalrecipientID: Int
    /** The email address. */
    public var sEmailAddress: String?
    public var objPhoneSms: PhoneResponseCompound?
    public var eCommunicationexternalrecipientType: FieldECommunicationexternalrecipientType
    /** The Name of the Communicationexternalrecipient */
    public var sCommunicationexternalrecipientName: String

    public init(pkiCommunicationexternalrecipientID: Int, sEmailAddress: String? = nil, objPhoneSms: PhoneResponseCompound? = nil, eCommunicationexternalrecipientType: FieldECommunicationexternalrecipientType, sCommunicationexternalrecipientName: String) {
        self.pkiCommunicationexternalrecipientID = pkiCommunicationexternalrecipientID
        self.sEmailAddress = sEmailAddress
        self.objPhoneSms = objPhoneSms
        self.eCommunicationexternalrecipientType = eCommunicationexternalrecipientType
        self.sCommunicationexternalrecipientName = sCommunicationexternalrecipientName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCommunicationexternalrecipientID
        case sEmailAddress
        case objPhoneSms
        case eCommunicationexternalrecipientType
        case sCommunicationexternalrecipientName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiCommunicationexternalrecipientID, forKey: .pkiCommunicationexternalrecipientID)
        try container.encodeIfPresent(sEmailAddress, forKey: .sEmailAddress)
        try container.encodeIfPresent(objPhoneSms, forKey: .objPhoneSms)
        try container.encode(eCommunicationexternalrecipientType, forKey: .eCommunicationexternalrecipientType)
        try container.encode(sCommunicationexternalrecipientName, forKey: .sCommunicationexternalrecipientName)
    }
}

