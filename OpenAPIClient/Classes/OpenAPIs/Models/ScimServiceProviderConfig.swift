//
// ScimServiceProviderConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ScimServiceProviderConfig: Codable, JSONEncodable, Hashable {

    /** A multi-valued complex type that specifies supported authentication scheme properties. */
    public var authenticationSchemes: [ScimAuthenticationScheme]
    public var bulk: ScimServiceProviderConfigBulk
    public var changePassword: ScimServiceProviderConfigChangePassword
    /** An HTTP-addressable URL pointing to the service provider's human-consumable help documentation */
    public var documentationUri: String
    public var etag: ScimServiceProviderConfigEtag
    public var filter: ScimServiceProviderConfigFilter
    public var patch: ScimServiceProviderConfigPatch
    public var sort: ScimServiceProviderConfigSort

    public init(authenticationSchemes: [ScimAuthenticationScheme], bulk: ScimServiceProviderConfigBulk, changePassword: ScimServiceProviderConfigChangePassword, documentationUri: String, etag: ScimServiceProviderConfigEtag, filter: ScimServiceProviderConfigFilter, patch: ScimServiceProviderConfigPatch, sort: ScimServiceProviderConfigSort) {
        self.authenticationSchemes = authenticationSchemes
        self.bulk = bulk
        self.changePassword = changePassword
        self.documentationUri = documentationUri
        self.etag = etag
        self.filter = filter
        self.patch = patch
        self.sort = sort
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authenticationSchemes
        case bulk
        case changePassword
        case documentationUri
        case etag
        case filter
        case patch
        case sort
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(authenticationSchemes, forKey: .authenticationSchemes)
        try container.encode(bulk, forKey: .bulk)
        try container.encode(changePassword, forKey: .changePassword)
        try container.encode(documentationUri, forKey: .documentationUri)
        try container.encode(etag, forKey: .etag)
        try container.encode(filter, forKey: .filter)
        try container.encode(patch, forKey: .patch)
        try container.encode(sort, forKey: .sort)
    }
}

