//
// EzsignsignatureattachmentResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An Ezsignsignatureattachment Object */
public struct EzsignsignatureattachmentResponse: Codable, JSONEncodable, Hashable {

    static let pkiEzsignsignatureattachmentIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsignsignatureIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let sEzsignsignatureattachmentNameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,75}$/")
    /** The unique ID of the Ezsignsignatureattachment */
    public var pkiEzsignsignatureattachmentID: Int
    /** The unique ID of the Ezsignsignature */
    public var fkiEzsignsignatureID: Int
    /** The md5 of the Ezsignsignatureattachment */
    public var binEzsignsignatureattachmentMD5: String
    /** The name of the Ezsignsignatureattachment */
    public var sEzsignsignatureattachmentName: String
    /** The Url to the requested document.  Url will expire after 3 hours. */
    public var sDownloadUrl: String

    public init(pkiEzsignsignatureattachmentID: Int, fkiEzsignsignatureID: Int, binEzsignsignatureattachmentMD5: String, sEzsignsignatureattachmentName: String, sDownloadUrl: String) {
        self.pkiEzsignsignatureattachmentID = pkiEzsignsignatureattachmentID
        self.fkiEzsignsignatureID = fkiEzsignsignatureID
        self.binEzsignsignatureattachmentMD5 = binEzsignsignatureattachmentMD5
        self.sEzsignsignatureattachmentName = sEzsignsignatureattachmentName
        self.sDownloadUrl = sDownloadUrl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsignsignatureattachmentID
        case fkiEzsignsignatureID
        case binEzsignsignatureattachmentMD5
        case sEzsignsignatureattachmentName
        case sDownloadUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsignsignatureattachmentID, forKey: .pkiEzsignsignatureattachmentID)
        try container.encode(fkiEzsignsignatureID, forKey: .fkiEzsignsignatureID)
        try container.encode(binEzsignsignatureattachmentMD5, forKey: .binEzsignsignatureattachmentMD5)
        try container.encode(sEzsignsignatureattachmentName, forKey: .sEzsignsignatureattachmentName)
        try container.encode(sDownloadUrl, forKey: .sDownloadUrl)
    }
}

