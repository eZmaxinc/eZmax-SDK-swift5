//
// EzsigntemplateResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsigntemplate Object */
public struct EzsigntemplateResponse: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Ezsigntemplate */
    public var pkiEzsigntemplateID: Int
    /** The unique ID of the Ezsigntemplatedocument */
    public var fkiEzsigntemplatedocumentID: Int?
    /** The unique ID of the Ezsignfoldertype. */
    public var fkiEzsignfoldertypeID: Int
    /** The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| */
    public var fkiLanguageID: Int
    /** The Name of the Language in the language of the requester */
    public var sLanguageNameX: String
    /** The description of the Ezsigntemplate */
    public var sEzsigntemplateDescription: String
    /** Whether the Ezsigntemplate can be accessed by admin users only (eUserType=Normal) */
    public var bEzsigntemplateAdminonly: Bool
    /** The name of the Ezsignfoldertype in the language of the requester */
    public var sEzsignfoldertypeNameX: String

    public init(pkiEzsigntemplateID: Int, fkiEzsigntemplatedocumentID: Int? = nil, fkiEzsignfoldertypeID: Int, fkiLanguageID: Int, sLanguageNameX: String, sEzsigntemplateDescription: String, bEzsigntemplateAdminonly: Bool, sEzsignfoldertypeNameX: String) {
        self.pkiEzsigntemplateID = pkiEzsigntemplateID
        self.fkiEzsigntemplatedocumentID = fkiEzsigntemplatedocumentID
        self.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID
        self.fkiLanguageID = fkiLanguageID
        self.sLanguageNameX = sLanguageNameX
        self.sEzsigntemplateDescription = sEzsigntemplateDescription
        self.bEzsigntemplateAdminonly = bEzsigntemplateAdminonly
        self.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsigntemplateID
        case fkiEzsigntemplatedocumentID
        case fkiEzsignfoldertypeID
        case fkiLanguageID
        case sLanguageNameX
        case sEzsigntemplateDescription
        case bEzsigntemplateAdminonly
        case sEzsignfoldertypeNameX
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsigntemplateID, forKey: .pkiEzsigntemplateID)
        try container.encodeIfPresent(fkiEzsigntemplatedocumentID, forKey: .fkiEzsigntemplatedocumentID)
        try container.encode(fkiEzsignfoldertypeID, forKey: .fkiEzsignfoldertypeID)
        try container.encode(fkiLanguageID, forKey: .fkiLanguageID)
        try container.encode(sLanguageNameX, forKey: .sLanguageNameX)
        try container.encode(sEzsigntemplateDescription, forKey: .sEzsigntemplateDescription)
        try container.encode(bEzsigntemplateAdminonly, forKey: .bEzsigntemplateAdminonly)
        try container.encode(sEzsignfoldertypeNameX, forKey: .sEzsignfoldertypeNameX)
    }
}

