//
// AuthenticateAuthenticateV2Request.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request for the /2/module/authenticate/authenticate API Request */
public struct AuthenticateAuthenticateV2Request: Codable, JSONEncodable, Hashable {

    /** The customer code assigned to your account */
    public var pksCustomerCode: String
    /** The email address. */
    public var sEmailAddress: String?
    /** The Login name of the User. */
    public var sUserLoginname: String?
    /** A Password.  Must meet complexity requirements */
    public var sPassword: String?
    /** A Password encrypted and encoded in Base64  Must meet complexity requirements */
    public var sPasswordEncrypted: String?

    public init(pksCustomerCode: String, sEmailAddress: String? = nil, sUserLoginname: String? = nil, sPassword: String? = nil, sPasswordEncrypted: String? = nil) {
        self.pksCustomerCode = pksCustomerCode
        self.sEmailAddress = sEmailAddress
        self.sUserLoginname = sUserLoginname
        self.sPassword = sPassword
        self.sPasswordEncrypted = sPasswordEncrypted
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pksCustomerCode
        case sEmailAddress
        case sUserLoginname
        case sPassword
        case sPasswordEncrypted
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pksCustomerCode, forKey: .pksCustomerCode)
        try container.encodeIfPresent(sEmailAddress, forKey: .sEmailAddress)
        try container.encodeIfPresent(sUserLoginname, forKey: .sUserLoginname)
        try container.encodeIfPresent(sPassword, forKey: .sPassword)
        try container.encodeIfPresent(sPasswordEncrypted, forKey: .sPasswordEncrypted)
    }
}

