//
// EzsignbulksenddocumentmappingRequestCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsignbulksenddocumentmapping Object and children */
public struct EzsignbulksenddocumentmappingRequestCompound: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Ezsignbulksenddocumentmapping. */
    public var pkiEzsignbulksenddocumentmappingID: Int?
    /** The unique ID of the Ezsignbulksend */
    public var fkiEzsignbulksendID: Int
    /** The unique ID of the Ezsigntemplatepackage */
    public var fkiEzsigntemplatepackageID: Int?
    /** The unique ID of the Ezsigntemplate */
    public var fkiEzsigntemplateID: Int?

    public init(pkiEzsignbulksenddocumentmappingID: Int? = nil, fkiEzsignbulksendID: Int, fkiEzsigntemplatepackageID: Int? = nil, fkiEzsigntemplateID: Int? = nil) {
        self.pkiEzsignbulksenddocumentmappingID = pkiEzsignbulksenddocumentmappingID
        self.fkiEzsignbulksendID = fkiEzsignbulksendID
        self.fkiEzsigntemplatepackageID = fkiEzsigntemplatepackageID
        self.fkiEzsigntemplateID = fkiEzsigntemplateID
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsignbulksenddocumentmappingID
        case fkiEzsignbulksendID
        case fkiEzsigntemplatepackageID
        case fkiEzsigntemplateID
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiEzsignbulksenddocumentmappingID, forKey: .pkiEzsignbulksenddocumentmappingID)
        try container.encode(fkiEzsignbulksendID, forKey: .fkiEzsignbulksendID)
        try container.encodeIfPresent(fkiEzsigntemplatepackageID, forKey: .fkiEzsigntemplatepackageID)
        try container.encodeIfPresent(fkiEzsigntemplateID, forKey: .fkiEzsigntemplateID)
    }
}

