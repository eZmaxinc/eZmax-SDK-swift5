//
// SecretquestionAutocompleteElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Secretquestion AutocompleteElement Response */
public struct SecretquestionAutocompleteElementResponse: Codable, JSONEncodable, Hashable {

    static let pkiSecretquestionIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The text of the Secretquestion in the language of the requester */
    public var sSecretquestionTextX: String
    /** The unique ID of the Secretquestion.  Valid values:  |Value|Description| |-|-| |1|The name of the hospital in which you were born| |2|The name of your grade school| |3|The last name of your favorite teacher| |4|Your favorite sports team| |5|Your favorite TV show| |6|Your favorite movie| |7|The name of the street on which you grew up| |8|The name of your first employer| |9|Your first car| |10|Your favorite food| |11|The name of your first pet| |12|Favorite musician/band| |13|What instrument you play| |14|Your father's middle name| |15|Your mother's maiden name| |16|Name of your eldest child| |17|Your spouse's middle name| |18|Favorite restaurant| |19|Childhood nickname| |20|Favorite vacation destination| |21|Your boat's name| |22|Date of Birth (YYYY-MM-DD)| */
    public var pkiSecretquestionID: Int
    /** Whether the Secretquestion is active or not */
    public var bSecretquestionIsactive: Bool

    public init(sSecretquestionTextX: String, pkiSecretquestionID: Int, bSecretquestionIsactive: Bool) {
        self.sSecretquestionTextX = sSecretquestionTextX
        self.pkiSecretquestionID = pkiSecretquestionID
        self.bSecretquestionIsactive = bSecretquestionIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sSecretquestionTextX
        case pkiSecretquestionID
        case bSecretquestionIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(sSecretquestionTextX, forKey: .sSecretquestionTextX)
        try container.encode(pkiSecretquestionID, forKey: .pkiSecretquestionID)
        try container.encode(bSecretquestionIsactive, forKey: .bSecretquestionIsactive)
    }
}

