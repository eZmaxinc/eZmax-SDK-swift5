//
// CustomEzmaxinvoicingEzsigndocumentResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An EzmaxinvoicingEzsigndocument object containing information about the Ezmaxinvoicing for an Ezsigndocument */
public struct CustomEzmaxinvoicingEzsigndocumentResponse: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Ezsignfolder */
    public var fkiEzsignfolderID: Int
    public var sName: String
    /** The description of the Ezsignfolder */
    public var sEzsignfolderDescription: String
    /** The name of the document that will be presented to Ezsignfoldersignerassociations */
    public var sEzsigndocumentName: String
    /** Whether you have access to the Ezsignfolder or not */
    public var bEzsignfolderAllowed: Bool

    public init(fkiEzsignfolderID: Int, sName: String, sEzsignfolderDescription: String, sEzsigndocumentName: String, bEzsignfolderAllowed: Bool) {
        self.fkiEzsignfolderID = fkiEzsignfolderID
        self.sName = sName
        self.sEzsignfolderDescription = sEzsignfolderDescription
        self.sEzsigndocumentName = sEzsigndocumentName
        self.bEzsignfolderAllowed = bEzsignfolderAllowed
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fkiEzsignfolderID
        case sName
        case sEzsignfolderDescription
        case sEzsigndocumentName
        case bEzsignfolderAllowed
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(fkiEzsignfolderID, forKey: .fkiEzsignfolderID)
        try container.encode(sName, forKey: .sName)
        try container.encode(sEzsignfolderDescription, forKey: .sEzsignfolderDescription)
        try container.encode(sEzsigndocumentName, forKey: .sEzsigndocumentName)
        try container.encode(bEzsignfolderAllowed, forKey: .bEzsignfolderAllowed)
    }
}

