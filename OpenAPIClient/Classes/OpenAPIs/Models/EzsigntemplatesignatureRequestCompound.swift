//
// EzsigntemplatesignatureRequestCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsigntemplatesignature Object and children */
public struct EzsigntemplatesignatureRequestCompound: Codable, JSONEncodable, Hashable {

    static let pkiEzsigntemplatesignatureIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsigntemplatedocumentIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsigntemplatesignerIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzsigntemplatesignerIDValidationRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let iEzsigntemplatedocumentpagePagenumberRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let iEzsigntemplatesignatureXRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let iEzsigntemplatesignatureYRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let iEzsigntemplatesignatureWidthRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let iEzsigntemplatesignatureHeightRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let iEzsigntemplatesignatureStepRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let iEzsigntemplatesignatureMaxlengthRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    /** The unique ID of the Ezsigntemplatesignature */
    public var pkiEzsigntemplatesignatureID: Int?
    /** The unique ID of the Ezsigntemplatedocument */
    public var fkiEzsigntemplatedocumentID: Int
    /** The unique ID of the Ezsigntemplatesigner */
    public var fkiEzsigntemplatesignerID: Int
    /** The unique ID of the Ezsigntemplatesigner */
    public var fkiEzsigntemplatesignerIDValidation: Int?
    /** The page number in the Ezsigntemplatedocument */
    public var iEzsigntemplatedocumentpagePagenumber: Int
    /** The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate. */
    public var iEzsigntemplatesignatureX: Int
    /** The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate. */
    public var iEzsigntemplatesignatureY: Int
    /** The width of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have a width of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureWidth. */
    public var iEzsigntemplatesignatureWidth: Int?
    /** The height of the Ezsigntemplatesignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsigntemplatesignature to have an height of 2 inches, you would use \"200\" for the iEzsigntemplatesignatureHeight. */
    public var iEzsigntemplatesignatureHeight: Int?
    /** The step when the Ezsigntemplatesigner will be invited to sign */
    public var iEzsigntemplatesignatureStep: Int
    public var eEzsigntemplatesignatureType: FieldEEzsigntemplatesignatureType
    /** A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature */
    public var tEzsigntemplatesignatureTooltip: String?
    public var eEzsigntemplatesignatureTooltipposition: FieldEEzsigntemplatesignatureTooltipposition?
    public var eEzsigntemplatesignatureFont: FieldEEzsigntemplatesignatureFont?
    /** Whether the Ezsigntemplatesignature is required or not. This field is relevant only with Ezsigntemplatesignature with eEzsigntemplatesignatureType = Attachments. */
    public var bEzsigntemplatesignatureRequired: Bool?
    public var eEzsigntemplatesignatureAttachmentnamesource: FieldEEzsigntemplatesignatureAttachmentnamesource?
    /** The description attached to the attachment name added in Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments */
    public var sEzsigntemplatesignatureAttachmentdescription: String?
    /** The step when the Ezsigntemplatesigner will be invited to validate the Ezsigntemplatesignature of eEzsigntemplatesignatureType Attachments */
    public var iEzsigntemplatesignatureValidationstep: Int?
    /** The maximum length for the value in the Ezsigntemplatesignature  This can only be set if eEzsigntemplatesignatureType is **FieldText** or **FieldTextarea** */
    public var iEzsigntemplatesignatureMaxlength: Int?
    /** A regular expression to indicate what values are acceptable for the Ezsigntemplatesignature.  This can only be set if eEzsigntemplatesignatureType is **Text** or **Textarea** */
    public var sEzsigntemplatesignatureRegexp: String?
    public var eEzsigntemplatesignatureTextvalidation: EnumTextvalidation?
    /** Whether the Ezsigntemplatesignature has a custom date format or not. (Only possible when eEzsigntemplatesignatureType is **Name** or **Handwritten**) */
    public var bEzsigntemplatesignatureCustomdate: Bool?
    /** An array of custom date blocks that will be filled at the time of signature.  Can only be used if bEzsigntemplatesignatureCustomdate is true.  Use an empty array if you don't want to have a date at all. */
    public var aObjEzsigntemplatesignaturecustomdate: [EzsigntemplatesignaturecustomdateRequestCompound]?

    public init(pkiEzsigntemplatesignatureID: Int? = nil, fkiEzsigntemplatedocumentID: Int, fkiEzsigntemplatesignerID: Int, fkiEzsigntemplatesignerIDValidation: Int? = nil, iEzsigntemplatedocumentpagePagenumber: Int, iEzsigntemplatesignatureX: Int, iEzsigntemplatesignatureY: Int, iEzsigntemplatesignatureWidth: Int? = nil, iEzsigntemplatesignatureHeight: Int? = nil, iEzsigntemplatesignatureStep: Int, eEzsigntemplatesignatureType: FieldEEzsigntemplatesignatureType, tEzsigntemplatesignatureTooltip: String? = nil, eEzsigntemplatesignatureTooltipposition: FieldEEzsigntemplatesignatureTooltipposition? = nil, eEzsigntemplatesignatureFont: FieldEEzsigntemplatesignatureFont? = nil, bEzsigntemplatesignatureRequired: Bool? = nil, eEzsigntemplatesignatureAttachmentnamesource: FieldEEzsigntemplatesignatureAttachmentnamesource? = nil, sEzsigntemplatesignatureAttachmentdescription: String? = nil, iEzsigntemplatesignatureValidationstep: Int? = nil, iEzsigntemplatesignatureMaxlength: Int? = nil, sEzsigntemplatesignatureRegexp: String? = nil, eEzsigntemplatesignatureTextvalidation: EnumTextvalidation? = nil, bEzsigntemplatesignatureCustomdate: Bool? = nil, aObjEzsigntemplatesignaturecustomdate: [EzsigntemplatesignaturecustomdateRequestCompound]? = nil) {
        self.pkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID
        self.fkiEzsigntemplatedocumentID = fkiEzsigntemplatedocumentID
        self.fkiEzsigntemplatesignerID = fkiEzsigntemplatesignerID
        self.fkiEzsigntemplatesignerIDValidation = fkiEzsigntemplatesignerIDValidation
        self.iEzsigntemplatedocumentpagePagenumber = iEzsigntemplatedocumentpagePagenumber
        self.iEzsigntemplatesignatureX = iEzsigntemplatesignatureX
        self.iEzsigntemplatesignatureY = iEzsigntemplatesignatureY
        self.iEzsigntemplatesignatureWidth = iEzsigntemplatesignatureWidth
        self.iEzsigntemplatesignatureHeight = iEzsigntemplatesignatureHeight
        self.iEzsigntemplatesignatureStep = iEzsigntemplatesignatureStep
        self.eEzsigntemplatesignatureType = eEzsigntemplatesignatureType
        self.tEzsigntemplatesignatureTooltip = tEzsigntemplatesignatureTooltip
        self.eEzsigntemplatesignatureTooltipposition = eEzsigntemplatesignatureTooltipposition
        self.eEzsigntemplatesignatureFont = eEzsigntemplatesignatureFont
        self.bEzsigntemplatesignatureRequired = bEzsigntemplatesignatureRequired
        self.eEzsigntemplatesignatureAttachmentnamesource = eEzsigntemplatesignatureAttachmentnamesource
        self.sEzsigntemplatesignatureAttachmentdescription = sEzsigntemplatesignatureAttachmentdescription
        self.iEzsigntemplatesignatureValidationstep = iEzsigntemplatesignatureValidationstep
        self.iEzsigntemplatesignatureMaxlength = iEzsigntemplatesignatureMaxlength
        self.sEzsigntemplatesignatureRegexp = sEzsigntemplatesignatureRegexp
        self.eEzsigntemplatesignatureTextvalidation = eEzsigntemplatesignatureTextvalidation
        self.bEzsigntemplatesignatureCustomdate = bEzsigntemplatesignatureCustomdate
        self.aObjEzsigntemplatesignaturecustomdate = aObjEzsigntemplatesignaturecustomdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsigntemplatesignatureID
        case fkiEzsigntemplatedocumentID
        case fkiEzsigntemplatesignerID
        case fkiEzsigntemplatesignerIDValidation
        case iEzsigntemplatedocumentpagePagenumber
        case iEzsigntemplatesignatureX
        case iEzsigntemplatesignatureY
        case iEzsigntemplatesignatureWidth
        case iEzsigntemplatesignatureHeight
        case iEzsigntemplatesignatureStep
        case eEzsigntemplatesignatureType
        case tEzsigntemplatesignatureTooltip
        case eEzsigntemplatesignatureTooltipposition
        case eEzsigntemplatesignatureFont
        case bEzsigntemplatesignatureRequired
        case eEzsigntemplatesignatureAttachmentnamesource
        case sEzsigntemplatesignatureAttachmentdescription
        case iEzsigntemplatesignatureValidationstep
        case iEzsigntemplatesignatureMaxlength
        case sEzsigntemplatesignatureRegexp
        case eEzsigntemplatesignatureTextvalidation
        case bEzsigntemplatesignatureCustomdate
        case aObjEzsigntemplatesignaturecustomdate = "a_objEzsigntemplatesignaturecustomdate"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiEzsigntemplatesignatureID, forKey: .pkiEzsigntemplatesignatureID)
        try container.encode(fkiEzsigntemplatedocumentID, forKey: .fkiEzsigntemplatedocumentID)
        try container.encode(fkiEzsigntemplatesignerID, forKey: .fkiEzsigntemplatesignerID)
        try container.encodeIfPresent(fkiEzsigntemplatesignerIDValidation, forKey: .fkiEzsigntemplatesignerIDValidation)
        try container.encode(iEzsigntemplatedocumentpagePagenumber, forKey: .iEzsigntemplatedocumentpagePagenumber)
        try container.encode(iEzsigntemplatesignatureX, forKey: .iEzsigntemplatesignatureX)
        try container.encode(iEzsigntemplatesignatureY, forKey: .iEzsigntemplatesignatureY)
        try container.encodeIfPresent(iEzsigntemplatesignatureWidth, forKey: .iEzsigntemplatesignatureWidth)
        try container.encodeIfPresent(iEzsigntemplatesignatureHeight, forKey: .iEzsigntemplatesignatureHeight)
        try container.encode(iEzsigntemplatesignatureStep, forKey: .iEzsigntemplatesignatureStep)
        try container.encode(eEzsigntemplatesignatureType, forKey: .eEzsigntemplatesignatureType)
        try container.encodeIfPresent(tEzsigntemplatesignatureTooltip, forKey: .tEzsigntemplatesignatureTooltip)
        try container.encodeIfPresent(eEzsigntemplatesignatureTooltipposition, forKey: .eEzsigntemplatesignatureTooltipposition)
        try container.encodeIfPresent(eEzsigntemplatesignatureFont, forKey: .eEzsigntemplatesignatureFont)
        try container.encodeIfPresent(bEzsigntemplatesignatureRequired, forKey: .bEzsigntemplatesignatureRequired)
        try container.encodeIfPresent(eEzsigntemplatesignatureAttachmentnamesource, forKey: .eEzsigntemplatesignatureAttachmentnamesource)
        try container.encodeIfPresent(sEzsigntemplatesignatureAttachmentdescription, forKey: .sEzsigntemplatesignatureAttachmentdescription)
        try container.encodeIfPresent(iEzsigntemplatesignatureValidationstep, forKey: .iEzsigntemplatesignatureValidationstep)
        try container.encodeIfPresent(iEzsigntemplatesignatureMaxlength, forKey: .iEzsigntemplatesignatureMaxlength)
        try container.encodeIfPresent(sEzsigntemplatesignatureRegexp, forKey: .sEzsigntemplatesignatureRegexp)
        try container.encodeIfPresent(eEzsigntemplatesignatureTextvalidation, forKey: .eEzsigntemplatesignatureTextvalidation)
        try container.encodeIfPresent(bEzsigntemplatesignatureCustomdate, forKey: .bEzsigntemplatesignatureCustomdate)
        try container.encodeIfPresent(aObjEzsigntemplatesignaturecustomdate, forKey: .aObjEzsigntemplatesignaturecustomdate)
    }
}

