//
// EzsigntemplatedocumentGetObjectV1ResponseMPayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Payload for GET /1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID} */
public struct EzsigntemplatedocumentGetObjectV1ResponseMPayload: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Ezsigntemplatedocument */
    public var pkiEzsigntemplatedocumentID: Int
    /** The unique ID of the Ezsigntemplate */
    public var fkiEzsigntemplateID: Int
    /** The name of the Ezsigntemplatedocument. */
    public var sEzsigntemplatedocumentName: String
    /** The number of pages in the Ezsigntemplatedocument. */
    public var iEzsigntemplatedocumentPagetotal: Int
    /** The number of total signatures in the Ezsigntemplate. */
    public var iEzsigntemplatedocumentSignaturetotal: Int

    public init(pkiEzsigntemplatedocumentID: Int, fkiEzsigntemplateID: Int, sEzsigntemplatedocumentName: String, iEzsigntemplatedocumentPagetotal: Int, iEzsigntemplatedocumentSignaturetotal: Int) {
        self.pkiEzsigntemplatedocumentID = pkiEzsigntemplatedocumentID
        self.fkiEzsigntemplateID = fkiEzsigntemplateID
        self.sEzsigntemplatedocumentName = sEzsigntemplatedocumentName
        self.iEzsigntemplatedocumentPagetotal = iEzsigntemplatedocumentPagetotal
        self.iEzsigntemplatedocumentSignaturetotal = iEzsigntemplatedocumentSignaturetotal
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsigntemplatedocumentID
        case fkiEzsigntemplateID
        case sEzsigntemplatedocumentName
        case iEzsigntemplatedocumentPagetotal
        case iEzsigntemplatedocumentSignaturetotal
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsigntemplatedocumentID, forKey: .pkiEzsigntemplatedocumentID)
        try container.encode(fkiEzsigntemplateID, forKey: .fkiEzsigntemplateID)
        try container.encode(sEzsigntemplatedocumentName, forKey: .sEzsigntemplatedocumentName)
        try container.encode(iEzsigntemplatedocumentPagetotal, forKey: .iEzsigntemplatedocumentPagetotal)
        try container.encode(iEzsigntemplatedocumentSignaturetotal, forKey: .iEzsigntemplatedocumentSignaturetotal)
    }
}

