//
// EzsignpageResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An Ezsignpage Object */
public struct EzsignpageResponse: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Ezsignpage */
    public var pkiEzsignpageID: Int
    /** The Width of the page's image in pixels calculated at 100 DPI */
    public var iEzsignpageWidthimage: Int
    /** The Height of the page's image in pixels calculated at 100 DPI */
    public var iEzsignpageHeightimage: Int
    /** The Width of the page in points calculated at 72 DPI */
    public var iEzsignpageWidthpdf: Int
    /** The Height of the page in points calculated at 72 DPI */
    public var iEzsignpageHeightpdf: Int
    /** The page number in the Ezsigndocument */
    public var iEzsignpagePagenumber: Int
    /** The Url to the Ezsignpage's rasterized image.  Url will expire after 5 minutes. */
    public var sComputedImageurl: String

    public init(pkiEzsignpageID: Int, iEzsignpageWidthimage: Int, iEzsignpageHeightimage: Int, iEzsignpageWidthpdf: Int, iEzsignpageHeightpdf: Int, iEzsignpagePagenumber: Int, sComputedImageurl: String) {
        self.pkiEzsignpageID = pkiEzsignpageID
        self.iEzsignpageWidthimage = iEzsignpageWidthimage
        self.iEzsignpageHeightimage = iEzsignpageHeightimage
        self.iEzsignpageWidthpdf = iEzsignpageWidthpdf
        self.iEzsignpageHeightpdf = iEzsignpageHeightpdf
        self.iEzsignpagePagenumber = iEzsignpagePagenumber
        self.sComputedImageurl = sComputedImageurl
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsignpageID
        case iEzsignpageWidthimage
        case iEzsignpageHeightimage
        case iEzsignpageWidthpdf
        case iEzsignpageHeightpdf
        case iEzsignpagePagenumber
        case sComputedImageurl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsignpageID, forKey: .pkiEzsignpageID)
        try container.encode(iEzsignpageWidthimage, forKey: .iEzsignpageWidthimage)
        try container.encode(iEzsignpageHeightimage, forKey: .iEzsignpageHeightimage)
        try container.encode(iEzsignpageWidthpdf, forKey: .iEzsignpageWidthpdf)
        try container.encode(iEzsignpageHeightpdf, forKey: .iEzsignpageHeightpdf)
        try container.encode(iEzsignpagePagenumber, forKey: .iEzsignpagePagenumber)
        try container.encode(sComputedImageurl, forKey: .sComputedImageurl)
    }
}

