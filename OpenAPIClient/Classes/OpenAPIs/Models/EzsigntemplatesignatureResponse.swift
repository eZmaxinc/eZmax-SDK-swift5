//
// EzsigntemplatesignatureResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsigntemplatesignature Object */
public struct EzsigntemplatesignatureResponse: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Ezsigntemplatesignature */
    public var pkiEzsigntemplatesignatureID: Int
    /** The unique ID of the Ezsigntemplatedocument */
    public var fkiEzsigntemplatedocumentID: Int
    /** The unique ID of the Ezsigntemplatesigner */
    public var fkiEzsigntemplatesignerID: Int
    /** The page number in the Ezsigntemplatedocument */
    public var iEzsigntemplatedocumentpagePagenumber: Int
    /** The X coordinate (Horizontal) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate. */
    public var iEzsigntemplatesignatureX: Int
    /** The Y coordinate (Vertical) where to put the Ezsigntemplatesignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsigntemplatesignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate. */
    public var iEzsigntemplatesignatureY: Int
    /** The step when the Ezsigntemplatesigner will be invited to sign */
    public var iEzsigntemplatesignatureStep: Int
    public var eEzsigntemplatesignatureType: FieldEEzsigntemplatesignatureType
    /** A tooltip that will be presented to Ezsigntemplatesigner about the Ezsigntemplatesignature */
    public var tEzsigntemplatesignatureTooltip: String?
    public var eEzsigntemplatesignatureTooltipposition: FieldEEzsigntemplatesignatureTooltipposition?
    public var eEzsigntemplatesignatureFont: FieldEEzsigntemplatesignatureFont?

    public init(pkiEzsigntemplatesignatureID: Int, fkiEzsigntemplatedocumentID: Int, fkiEzsigntemplatesignerID: Int, iEzsigntemplatedocumentpagePagenumber: Int, iEzsigntemplatesignatureX: Int, iEzsigntemplatesignatureY: Int, iEzsigntemplatesignatureStep: Int, eEzsigntemplatesignatureType: FieldEEzsigntemplatesignatureType, tEzsigntemplatesignatureTooltip: String? = nil, eEzsigntemplatesignatureTooltipposition: FieldEEzsigntemplatesignatureTooltipposition? = nil, eEzsigntemplatesignatureFont: FieldEEzsigntemplatesignatureFont? = nil) {
        self.pkiEzsigntemplatesignatureID = pkiEzsigntemplatesignatureID
        self.fkiEzsigntemplatedocumentID = fkiEzsigntemplatedocumentID
        self.fkiEzsigntemplatesignerID = fkiEzsigntemplatesignerID
        self.iEzsigntemplatedocumentpagePagenumber = iEzsigntemplatedocumentpagePagenumber
        self.iEzsigntemplatesignatureX = iEzsigntemplatesignatureX
        self.iEzsigntemplatesignatureY = iEzsigntemplatesignatureY
        self.iEzsigntemplatesignatureStep = iEzsigntemplatesignatureStep
        self.eEzsigntemplatesignatureType = eEzsigntemplatesignatureType
        self.tEzsigntemplatesignatureTooltip = tEzsigntemplatesignatureTooltip
        self.eEzsigntemplatesignatureTooltipposition = eEzsigntemplatesignatureTooltipposition
        self.eEzsigntemplatesignatureFont = eEzsigntemplatesignatureFont
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsigntemplatesignatureID
        case fkiEzsigntemplatedocumentID
        case fkiEzsigntemplatesignerID
        case iEzsigntemplatedocumentpagePagenumber
        case iEzsigntemplatesignatureX
        case iEzsigntemplatesignatureY
        case iEzsigntemplatesignatureStep
        case eEzsigntemplatesignatureType
        case tEzsigntemplatesignatureTooltip
        case eEzsigntemplatesignatureTooltipposition
        case eEzsigntemplatesignatureFont
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsigntemplatesignatureID, forKey: .pkiEzsigntemplatesignatureID)
        try container.encode(fkiEzsigntemplatedocumentID, forKey: .fkiEzsigntemplatedocumentID)
        try container.encode(fkiEzsigntemplatesignerID, forKey: .fkiEzsigntemplatesignerID)
        try container.encode(iEzsigntemplatedocumentpagePagenumber, forKey: .iEzsigntemplatedocumentpagePagenumber)
        try container.encode(iEzsigntemplatesignatureX, forKey: .iEzsigntemplatesignatureX)
        try container.encode(iEzsigntemplatesignatureY, forKey: .iEzsigntemplatesignatureY)
        try container.encode(iEzsigntemplatesignatureStep, forKey: .iEzsigntemplatesignatureStep)
        try container.encode(eEzsigntemplatesignatureType, forKey: .eEzsigntemplatesignatureType)
        try container.encodeIfPresent(tEzsigntemplatesignatureTooltip, forKey: .tEzsigntemplatesignatureTooltip)
        try container.encodeIfPresent(eEzsigntemplatesignatureTooltipposition, forKey: .eEzsigntemplatesignatureTooltipposition)
        try container.encodeIfPresent(eEzsigntemplatesignatureFont, forKey: .eEzsigntemplatesignatureFont)
    }
}

