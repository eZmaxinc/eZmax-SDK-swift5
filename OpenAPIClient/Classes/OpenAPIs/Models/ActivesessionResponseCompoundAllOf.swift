//
// ActivesessionResponseCompoundAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ActivesessionResponseCompoundAllOf: Codable, JSONEncodable, Hashable {

    /** An array of permissions granted to the user or api key */
    public var aPkiPermissionID: [Int]
    public var objUserReal: ActivesessionResponseCompoundUser
    public var objUserCloned: ActivesessionResponseCompoundUser?
    public var objApikey: ActivesessionResponseCompoundApikey?
    /** An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key. */
    public var aEModuleInternalname: [String]

    public init(aPkiPermissionID: [Int], objUserReal: ActivesessionResponseCompoundUser, objUserCloned: ActivesessionResponseCompoundUser? = nil, objApikey: ActivesessionResponseCompoundApikey? = nil, aEModuleInternalname: [String]) {
        self.aPkiPermissionID = aPkiPermissionID
        self.objUserReal = objUserReal
        self.objUserCloned = objUserCloned
        self.objApikey = objApikey
        self.aEModuleInternalname = aEModuleInternalname
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case aPkiPermissionID = "a_pkiPermissionID"
        case objUserReal
        case objUserCloned
        case objApikey
        case aEModuleInternalname = "a_eModuleInternalname"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(aPkiPermissionID, forKey: .aPkiPermissionID)
        try container.encode(objUserReal, forKey: .objUserReal)
        try container.encodeIfPresent(objUserCloned, forKey: .objUserCloned)
        try container.encodeIfPresent(objApikey, forKey: .objApikey)
        try container.encode(aEModuleInternalname, forKey: .aEModuleInternalname)
    }
}

