//
// CommunicationrecipientResponseCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Communicationreciient Object */
public struct CommunicationrecipientResponseCompound: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Communicationrecipient. */
    public var pkiCommunicationrecipientID: Int
    public var eCommunicationrecipientObjecttype: FieldECommunicationrecipientObjecttype?
    /** The unique ID of the Agent. */
    public var fkiAgentID: Int?
    /** The unique ID of the Broker. */
    public var fkiBrokerID: Int?
    /** The unique ID of the Contact */
    public var fkiContactID: Int?
    /** The unique ID of the Customer. */
    public var fkiCustomerID: Int?
    /** The unique ID of the Employee. */
    public var fkiEmployeeID: Int?
    /** The unique ID of the Ezsignsigner */
    public var fkiEzsignsignerID: Int?
    /** The unique ID of the Franchisereoffice */
    public var fkiFranchiseofficeID: Int?
    /** The unique ID of the User */
    public var fkiUserID: Int?
    /** The unique ID of the Agentincorporation. */
    public var fkiAgentincorporationID: Int?
    /** The unique ID of the Assistant. */
    public var fkiAssistantID: Int?
    /** The unique ID of the Externalbroker. */
    public var fkiExternalbrokerID: Int?
    /** The unique ID of the Ezcomagent. */
    public var fkiEzcomagentID: Int?
    /** The unique ID of the Notary. */
    public var fkiNotaryID: Int?
    /** The unique ID of the Rewardmember. */
    public var fkiRewardmemberID: Int?
    /** The unique ID of the Supplier. */
    public var fkiSupplierID: Int?
    public var eCommunicationrecipientType: FieldECommunicationrecipientType
    public var objDescriptionstatic: DescriptionstaticResponseCompound
    public var objEmailstatic: EmailstaticResponseCompound?
    public var objPhonestatic: PhonestaticResponseCompound?

    public init(pkiCommunicationrecipientID: Int, eCommunicationrecipientObjecttype: FieldECommunicationrecipientObjecttype? = nil, fkiAgentID: Int? = nil, fkiBrokerID: Int? = nil, fkiContactID: Int? = nil, fkiCustomerID: Int? = nil, fkiEmployeeID: Int? = nil, fkiEzsignsignerID: Int? = nil, fkiFranchiseofficeID: Int? = nil, fkiUserID: Int? = nil, fkiAgentincorporationID: Int? = nil, fkiAssistantID: Int? = nil, fkiExternalbrokerID: Int? = nil, fkiEzcomagentID: Int? = nil, fkiNotaryID: Int? = nil, fkiRewardmemberID: Int? = nil, fkiSupplierID: Int? = nil, eCommunicationrecipientType: FieldECommunicationrecipientType, objDescriptionstatic: DescriptionstaticResponseCompound, objEmailstatic: EmailstaticResponseCompound? = nil, objPhonestatic: PhonestaticResponseCompound? = nil) {
        self.pkiCommunicationrecipientID = pkiCommunicationrecipientID
        self.eCommunicationrecipientObjecttype = eCommunicationrecipientObjecttype
        self.fkiAgentID = fkiAgentID
        self.fkiBrokerID = fkiBrokerID
        self.fkiContactID = fkiContactID
        self.fkiCustomerID = fkiCustomerID
        self.fkiEmployeeID = fkiEmployeeID
        self.fkiEzsignsignerID = fkiEzsignsignerID
        self.fkiFranchiseofficeID = fkiFranchiseofficeID
        self.fkiUserID = fkiUserID
        self.fkiAgentincorporationID = fkiAgentincorporationID
        self.fkiAssistantID = fkiAssistantID
        self.fkiExternalbrokerID = fkiExternalbrokerID
        self.fkiEzcomagentID = fkiEzcomagentID
        self.fkiNotaryID = fkiNotaryID
        self.fkiRewardmemberID = fkiRewardmemberID
        self.fkiSupplierID = fkiSupplierID
        self.eCommunicationrecipientType = eCommunicationrecipientType
        self.objDescriptionstatic = objDescriptionstatic
        self.objEmailstatic = objEmailstatic
        self.objPhonestatic = objPhonestatic
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCommunicationrecipientID
        case eCommunicationrecipientObjecttype
        case fkiAgentID
        case fkiBrokerID
        case fkiContactID
        case fkiCustomerID
        case fkiEmployeeID
        case fkiEzsignsignerID
        case fkiFranchiseofficeID
        case fkiUserID
        case fkiAgentincorporationID
        case fkiAssistantID
        case fkiExternalbrokerID
        case fkiEzcomagentID
        case fkiNotaryID
        case fkiRewardmemberID
        case fkiSupplierID
        case eCommunicationrecipientType
        case objDescriptionstatic
        case objEmailstatic
        case objPhonestatic
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiCommunicationrecipientID, forKey: .pkiCommunicationrecipientID)
        try container.encodeIfPresent(eCommunicationrecipientObjecttype, forKey: .eCommunicationrecipientObjecttype)
        try container.encodeIfPresent(fkiAgentID, forKey: .fkiAgentID)
        try container.encodeIfPresent(fkiBrokerID, forKey: .fkiBrokerID)
        try container.encodeIfPresent(fkiContactID, forKey: .fkiContactID)
        try container.encodeIfPresent(fkiCustomerID, forKey: .fkiCustomerID)
        try container.encodeIfPresent(fkiEmployeeID, forKey: .fkiEmployeeID)
        try container.encodeIfPresent(fkiEzsignsignerID, forKey: .fkiEzsignsignerID)
        try container.encodeIfPresent(fkiFranchiseofficeID, forKey: .fkiFranchiseofficeID)
        try container.encodeIfPresent(fkiUserID, forKey: .fkiUserID)
        try container.encodeIfPresent(fkiAgentincorporationID, forKey: .fkiAgentincorporationID)
        try container.encodeIfPresent(fkiAssistantID, forKey: .fkiAssistantID)
        try container.encodeIfPresent(fkiExternalbrokerID, forKey: .fkiExternalbrokerID)
        try container.encodeIfPresent(fkiEzcomagentID, forKey: .fkiEzcomagentID)
        try container.encodeIfPresent(fkiNotaryID, forKey: .fkiNotaryID)
        try container.encodeIfPresent(fkiRewardmemberID, forKey: .fkiRewardmemberID)
        try container.encodeIfPresent(fkiSupplierID, forKey: .fkiSupplierID)
        try container.encode(eCommunicationrecipientType, forKey: .eCommunicationrecipientType)
        try container.encode(objDescriptionstatic, forKey: .objDescriptionstatic)
        try container.encodeIfPresent(objEmailstatic, forKey: .objEmailstatic)
        try container.encodeIfPresent(objPhonestatic, forKey: .objPhonestatic)
    }
}

