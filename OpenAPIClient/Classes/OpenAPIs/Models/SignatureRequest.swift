//
// SignatureRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Signature Object */
public struct SignatureRequest: Codable, JSONEncodable, Hashable {

    static let pkiSignatureIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 16777215, exclusiveMaximum: false, multipleOf: nil)
    static let tSignatureSvgRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,32767}$/")
    /** The unique ID of the Signature */
    public var pkiSignatureID: Int?
    /** The svg of the Signature */
    public var tSignatureSvg: String

    public init(pkiSignatureID: Int? = nil, tSignatureSvg: String) {
        self.pkiSignatureID = pkiSignatureID
        self.tSignatureSvg = tSignatureSvg
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiSignatureID
        case tSignatureSvg
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiSignatureID, forKey: .pkiSignatureID)
        try container.encode(tSignatureSvg, forKey: .tSignatureSvg)
    }
}

