//
// CommunicationResponseCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Communication Object */
public struct CommunicationResponseCompound: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Communication. */
    public var pkiCommunicationID: Int
    public var eCommunicationImportance: FieldECommunicationImportance
    public var eCommunicationType: FieldECommunicationType
    /** The subject of the Communication */
    public var sCommunicationSubject: String
    public var eCommunicationDirection: ComputedECommunicationDirection
    /** The count of Communicationrecipient */
    public var iCommunicationrecipientCount: Int
    public var objContactFrom: CustomContactNameResponse
    public var objAudit: CommonAudit
    public var aObjCommunicationattachment: [CommunicationattachmentResponseCompound]
    public var aObjCommunicationrecipient: [CommunicationrecipientResponseCompound]
    public var aObjCommunicationexternalrecipient: [CommunicationexternalrecipientResponseCompound]

    public init(pkiCommunicationID: Int, eCommunicationImportance: FieldECommunicationImportance, eCommunicationType: FieldECommunicationType, sCommunicationSubject: String, eCommunicationDirection: ComputedECommunicationDirection, iCommunicationrecipientCount: Int, objContactFrom: CustomContactNameResponse, objAudit: CommonAudit, aObjCommunicationattachment: [CommunicationattachmentResponseCompound], aObjCommunicationrecipient: [CommunicationrecipientResponseCompound], aObjCommunicationexternalrecipient: [CommunicationexternalrecipientResponseCompound]) {
        self.pkiCommunicationID = pkiCommunicationID
        self.eCommunicationImportance = eCommunicationImportance
        self.eCommunicationType = eCommunicationType
        self.sCommunicationSubject = sCommunicationSubject
        self.eCommunicationDirection = eCommunicationDirection
        self.iCommunicationrecipientCount = iCommunicationrecipientCount
        self.objContactFrom = objContactFrom
        self.objAudit = objAudit
        self.aObjCommunicationattachment = aObjCommunicationattachment
        self.aObjCommunicationrecipient = aObjCommunicationrecipient
        self.aObjCommunicationexternalrecipient = aObjCommunicationexternalrecipient
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCommunicationID
        case eCommunicationImportance
        case eCommunicationType
        case sCommunicationSubject
        case eCommunicationDirection
        case iCommunicationrecipientCount
        case objContactFrom
        case objAudit
        case aObjCommunicationattachment = "a_objCommunicationattachment"
        case aObjCommunicationrecipient = "a_objCommunicationrecipient"
        case aObjCommunicationexternalrecipient = "a_objCommunicationexternalrecipient"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiCommunicationID, forKey: .pkiCommunicationID)
        try container.encode(eCommunicationImportance, forKey: .eCommunicationImportance)
        try container.encode(eCommunicationType, forKey: .eCommunicationType)
        try container.encode(sCommunicationSubject, forKey: .sCommunicationSubject)
        try container.encode(eCommunicationDirection, forKey: .eCommunicationDirection)
        try container.encode(iCommunicationrecipientCount, forKey: .iCommunicationrecipientCount)
        try container.encode(objContactFrom, forKey: .objContactFrom)
        try container.encode(objAudit, forKey: .objAudit)
        try container.encode(aObjCommunicationattachment, forKey: .aObjCommunicationattachment)
        try container.encode(aObjCommunicationrecipient, forKey: .aObjCommunicationrecipient)
        try container.encode(aObjCommunicationexternalrecipient, forKey: .aObjCommunicationexternalrecipient)
    }
}

