//
// EzsigntemplatepackageAutocompleteElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsigntemplatepackage AutocompleteElement Response */
public struct EzsigntemplatepackageAutocompleteElementResponse: Codable, JSONEncodable, Hashable {

    public var eEzsignfoldertypePrivacylevel: FieldEEzsignfoldertypePrivacylevel
    /** The description of the Ezsigntemplatepackage */
    public var sEzsigntemplatepackageDescription: String
    /** The unique ID of the Ezsigntemplatepackage */
    public var pkiEzsigntemplatepackageID: Int
    /** Whether the Ezsigntemplatepackage is active or not */
    public var bEzsigntemplatepackageIsactive: Bool
    /** Indicates if the element is disabled in the context */
    public var bDisabled: Bool

    public init(eEzsignfoldertypePrivacylevel: FieldEEzsignfoldertypePrivacylevel, sEzsigntemplatepackageDescription: String, pkiEzsigntemplatepackageID: Int, bEzsigntemplatepackageIsactive: Bool, bDisabled: Bool) {
        self.eEzsignfoldertypePrivacylevel = eEzsignfoldertypePrivacylevel
        self.sEzsigntemplatepackageDescription = sEzsigntemplatepackageDescription
        self.pkiEzsigntemplatepackageID = pkiEzsigntemplatepackageID
        self.bEzsigntemplatepackageIsactive = bEzsigntemplatepackageIsactive
        self.bDisabled = bDisabled
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eEzsignfoldertypePrivacylevel
        case sEzsigntemplatepackageDescription
        case pkiEzsigntemplatepackageID
        case bEzsigntemplatepackageIsactive
        case bDisabled
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eEzsignfoldertypePrivacylevel, forKey: .eEzsignfoldertypePrivacylevel)
        try container.encode(sEzsigntemplatepackageDescription, forKey: .sEzsigntemplatepackageDescription)
        try container.encode(pkiEzsigntemplatepackageID, forKey: .pkiEzsigntemplatepackageID)
        try container.encode(bEzsigntemplatepackageIsactive, forKey: .bEzsigntemplatepackageIsactive)
        try container.encode(bDisabled, forKey: .bDisabled)
    }
}

