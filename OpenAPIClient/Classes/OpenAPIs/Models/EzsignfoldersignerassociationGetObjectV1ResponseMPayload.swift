//
// EzsignfoldersignerassociationGetObjectV1ResponseMPayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Payload for the /1/object/ezsignfoldersignerassociation/getObject API Request */
public struct EzsignfoldersignerassociationGetObjectV1ResponseMPayload: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Ezsignfoldersignerassociation */
    public var pkiEzsignfoldersignerassociationID: Int
    /** The unique ID of the Ezsignfolder */
    public var fkiEzsignfolderID: Int
    /** If this flag is true. The signatory will receive a copy of every signed Ezsigndocument even if it ain't required to sign the document. */
    public var bEzsignfoldersignerassociationReceivecopy: Bool

    public init(pkiEzsignfoldersignerassociationID: Int, fkiEzsignfolderID: Int, bEzsignfoldersignerassociationReceivecopy: Bool) {
        self.pkiEzsignfoldersignerassociationID = pkiEzsignfoldersignerassociationID
        self.fkiEzsignfolderID = fkiEzsignfolderID
        self.bEzsignfoldersignerassociationReceivecopy = bEzsignfoldersignerassociationReceivecopy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsignfoldersignerassociationID
        case fkiEzsignfolderID
        case bEzsignfoldersignerassociationReceivecopy
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsignfoldersignerassociationID, forKey: .pkiEzsignfoldersignerassociationID)
        try container.encode(fkiEzsignfolderID, forKey: .fkiEzsignfolderID)
        try container.encode(bEzsignfoldersignerassociationReceivecopy, forKey: .bEzsignfoldersignerassociationReceivecopy)
    }
}

