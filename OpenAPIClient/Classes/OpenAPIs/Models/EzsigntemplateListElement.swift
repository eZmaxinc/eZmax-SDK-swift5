//
// EzsigntemplateListElement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezsigntemplate List Element */
public struct EzsigntemplateListElement: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Ezsigntemplate */
    public var pkiEzsigntemplateID: Int
    /** The unique ID of the Ezsignfoldertype. */
    public var fkiEzsignfoldertypeID: Int
    /** The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English| */
    public var fkiLanguageID: Int
    /** The description of the Ezsigntemplate */
    public var sEzsigntemplateDescription: String
    /** The number of pages in the Ezsigntemplatedocument. */
    public var iEzsigntemplatedocumentPagetotal: Int
    /** The number of total signatures in the Ezsigntemplate. */
    public var iEzsigntemplateSignaturetotal: Int
    /** Indicate the Ezsigntemplate is incomplete and cannot be used */
    public var bEzsigntemplateIncomplete: Bool
    /** The name of the Ezsignfoldertype in the language of the requester */
    public var sEzsignfoldertypeNameX: String

    public init(pkiEzsigntemplateID: Int, fkiEzsignfoldertypeID: Int, fkiLanguageID: Int, sEzsigntemplateDescription: String, iEzsigntemplatedocumentPagetotal: Int, iEzsigntemplateSignaturetotal: Int, bEzsigntemplateIncomplete: Bool, sEzsignfoldertypeNameX: String) {
        self.pkiEzsigntemplateID = pkiEzsigntemplateID
        self.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID
        self.fkiLanguageID = fkiLanguageID
        self.sEzsigntemplateDescription = sEzsigntemplateDescription
        self.iEzsigntemplatedocumentPagetotal = iEzsigntemplatedocumentPagetotal
        self.iEzsigntemplateSignaturetotal = iEzsigntemplateSignaturetotal
        self.bEzsigntemplateIncomplete = bEzsigntemplateIncomplete
        self.sEzsignfoldertypeNameX = sEzsignfoldertypeNameX
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzsigntemplateID
        case fkiEzsignfoldertypeID
        case fkiLanguageID
        case sEzsigntemplateDescription
        case iEzsigntemplatedocumentPagetotal
        case iEzsigntemplateSignaturetotal
        case bEzsigntemplateIncomplete
        case sEzsignfoldertypeNameX
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiEzsigntemplateID, forKey: .pkiEzsigntemplateID)
        try container.encode(fkiEzsignfoldertypeID, forKey: .fkiEzsignfoldertypeID)
        try container.encode(fkiLanguageID, forKey: .fkiLanguageID)
        try container.encode(sEzsigntemplateDescription, forKey: .sEzsigntemplateDescription)
        try container.encode(iEzsigntemplatedocumentPagetotal, forKey: .iEzsigntemplatedocumentPagetotal)
        try container.encode(iEzsigntemplateSignaturetotal, forKey: .iEzsigntemplateSignaturetotal)
        try container.encode(bEzsigntemplateIncomplete, forKey: .bEzsigntemplateIncomplete)
        try container.encode(sEzsignfoldertypeNameX, forKey: .sEzsignfoldertypeNameX)
    }
}

