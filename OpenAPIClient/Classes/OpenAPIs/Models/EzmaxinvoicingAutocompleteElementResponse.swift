//
// EzmaxinvoicingAutocompleteElementResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezmaxinvoicing AutocompleteElement Response */
public struct EzmaxinvoicingAutocompleteElementResponse: Codable, JSONEncodable, Hashable {

    static let yyyymmEzmaxinvoicingRule = StringRule(minLength: nil, maxLength: 7, pattern: nil)
    static let pkiEzmaxinvoicingIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    /** The YYYYMM period of the Ezmaxinvoicing */
    public var yyyymmEzmaxinvoicing: String
    /** The unique ID of the Ezmaxinvoicing */
    public var pkiEzmaxinvoicingID: Int
    /** Whether the Ezmaxinvoicing is active or not */
    public var bEzmaxinvoicingIsactive: Bool

    public init(yyyymmEzmaxinvoicing: String, pkiEzmaxinvoicingID: Int, bEzmaxinvoicingIsactive: Bool) {
        self.yyyymmEzmaxinvoicing = yyyymmEzmaxinvoicing
        self.pkiEzmaxinvoicingID = pkiEzmaxinvoicingID
        self.bEzmaxinvoicingIsactive = bEzmaxinvoicingIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case yyyymmEzmaxinvoicing
        case pkiEzmaxinvoicingID
        case bEzmaxinvoicingIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(yyyymmEzmaxinvoicing, forKey: .yyyymmEzmaxinvoicing)
        try container.encode(pkiEzmaxinvoicingID, forKey: .pkiEzmaxinvoicingID)
        try container.encode(bEzmaxinvoicingIsactive, forKey: .bEzmaxinvoicingIsactive)
    }
}

