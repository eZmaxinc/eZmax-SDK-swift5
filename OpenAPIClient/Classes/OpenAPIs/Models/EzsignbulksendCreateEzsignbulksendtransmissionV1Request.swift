//
// EzsignbulksendCreateEzsignbulksendtransmissionV1Request.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Request for POST /1/object/ezsignbulksend/{pkiEzsignbulksendID}/createEzsignbulksendtransmission */
public struct EzsignbulksendCreateEzsignbulksendtransmissionV1Request: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \"In-Person\" and there won't be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| */
    public var fkiUserlogintypeID: Int
    /** The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**| */
    public var fkiEzsigntsarequirementID: Int?
    /** The description of the Ezsignbulksendtransmission */
    public var sEzsignbulksendtransmissionDescription: String
    /** The maximum date and time at which the Ezsigndocument can be signed. */
    public var dtEzsigndocumentDuedate: String
    public var eEzsignfolderSendreminderfrequency: FieldEEzsignfolderSendreminderfrequency
    /** A custom text message that will be added to the email sent. */
    public var tExtraMessage: String
    /** The Base64 encoded binary content of the CSV file. */
    public var sCsvBase64: Data

    public init(fkiUserlogintypeID: Int, fkiEzsigntsarequirementID: Int? = nil, sEzsignbulksendtransmissionDescription: String, dtEzsigndocumentDuedate: String, eEzsignfolderSendreminderfrequency: FieldEEzsignfolderSendreminderfrequency, tExtraMessage: String, sCsvBase64: Data) {
        self.fkiUserlogintypeID = fkiUserlogintypeID
        self.fkiEzsigntsarequirementID = fkiEzsigntsarequirementID
        self.sEzsignbulksendtransmissionDescription = sEzsignbulksendtransmissionDescription
        self.dtEzsigndocumentDuedate = dtEzsigndocumentDuedate
        self.eEzsignfolderSendreminderfrequency = eEzsignfolderSendreminderfrequency
        self.tExtraMessage = tExtraMessage
        self.sCsvBase64 = sCsvBase64
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fkiUserlogintypeID
        case fkiEzsigntsarequirementID
        case sEzsignbulksendtransmissionDescription
        case dtEzsigndocumentDuedate
        case eEzsignfolderSendreminderfrequency
        case tExtraMessage
        case sCsvBase64
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(fkiUserlogintypeID, forKey: .fkiUserlogintypeID)
        try container.encodeIfPresent(fkiEzsigntsarequirementID, forKey: .fkiEzsigntsarequirementID)
        try container.encode(sEzsignbulksendtransmissionDescription, forKey: .sEzsignbulksendtransmissionDescription)
        try container.encode(dtEzsigndocumentDuedate, forKey: .dtEzsigndocumentDuedate)
        try container.encode(eEzsignfolderSendreminderfrequency, forKey: .eEzsignfolderSendreminderfrequency)
        try container.encode(tExtraMessage, forKey: .tExtraMessage)
        try container.encode(sCsvBase64, forKey: .sCsvBase64)
    }
}

