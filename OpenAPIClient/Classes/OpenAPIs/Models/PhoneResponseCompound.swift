//
// PhoneResponseCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Phone Object and children to create a complete structure */
public struct PhoneResponseCompound: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Phone. */
    public var pkiPhoneID: Int
    /** The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free| */
    public var fkiPhonetypeID: Int
    public var ePhoneType: FieldEPhoneType?
    /** The region of the phone number. (For a North America Number only)  The region is the \"514\" section in this sample phone number: (514) 990-1516 x123 */
    public var sPhoneRegion: String?
    /** The exchange of the phone number. (For a North America Number only)  The exchange is the \"990\" section in this sample phone number: (514) 990-1516 x123 */
    public var sPhoneExchange: String?
    /** The number of the phone number. (For a North America Number only)  The number is the \"1516\" section in this sample phone number: (514) 990-1516 x123 */
    public var iPhoneNumber: String?
    /** The extension of the phone number.  The extension is the \"123\" section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers */
    public var sPhoneExtension: String?
    /** The international phone number. */
    public var sPhoneInternational: String?

    public init(pkiPhoneID: Int, fkiPhonetypeID: Int, ePhoneType: FieldEPhoneType? = nil, sPhoneRegion: String? = nil, sPhoneExchange: String? = nil, iPhoneNumber: String? = nil, sPhoneExtension: String? = nil, sPhoneInternational: String? = nil) {
        self.pkiPhoneID = pkiPhoneID
        self.fkiPhonetypeID = fkiPhonetypeID
        self.ePhoneType = ePhoneType
        self.sPhoneRegion = sPhoneRegion
        self.sPhoneExchange = sPhoneExchange
        self.iPhoneNumber = iPhoneNumber
        self.sPhoneExtension = sPhoneExtension
        self.sPhoneInternational = sPhoneInternational
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiPhoneID
        case fkiPhonetypeID
        case ePhoneType
        case sPhoneRegion
        case sPhoneExchange
        case iPhoneNumber
        case sPhoneExtension
        case sPhoneInternational
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiPhoneID, forKey: .pkiPhoneID)
        try container.encode(fkiPhonetypeID, forKey: .fkiPhonetypeID)
        try container.encodeIfPresent(ePhoneType, forKey: .ePhoneType)
        try container.encodeIfPresent(sPhoneRegion, forKey: .sPhoneRegion)
        try container.encodeIfPresent(sPhoneExchange, forKey: .sPhoneExchange)
        try container.encodeIfPresent(iPhoneNumber, forKey: .iPhoneNumber)
        try container.encodeIfPresent(sPhoneExtension, forKey: .sPhoneExtension)
        try container.encodeIfPresent(sPhoneInternational, forKey: .sPhoneInternational)
    }
}

