//
// ApikeyResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** An Apikey Object */
public struct ApikeyResponse: Codable, JSONEncodable, Hashable {

    static let pkiApikeyIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    public var objApikeyDescription: MultilingualApikeyDescription
    /** The secret token for the API key.  This will be returned only on creation. */
    public var sComputedToken: String?
    /** The unique ID of the Apikey */
    public var pkiApikeyID: Int
    public var objAudit: CommonAudit

    public init(objApikeyDescription: MultilingualApikeyDescription, sComputedToken: String? = nil, pkiApikeyID: Int, objAudit: CommonAudit) {
        self.objApikeyDescription = objApikeyDescription
        self.sComputedToken = sComputedToken
        self.pkiApikeyID = pkiApikeyID
        self.objAudit = objAudit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case objApikeyDescription
        case sComputedToken
        case pkiApikeyID
        case objAudit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(objApikeyDescription, forKey: .objApikeyDescription)
        try container.encodeIfPresent(sComputedToken, forKey: .sComputedToken)
        try container.encode(pkiApikeyID, forKey: .pkiApikeyID)
        try container.encode(objAudit, forKey: .objAudit)
    }
}

