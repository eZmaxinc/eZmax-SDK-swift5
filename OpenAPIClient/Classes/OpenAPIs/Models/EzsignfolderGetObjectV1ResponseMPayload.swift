//
// EzsignfolderGetObjectV1ResponseMPayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Payload for the /1/object/ezsignfolder/getObject API Request */
public struct EzsignfolderGetObjectV1ResponseMPayload: Codable, Hashable {

    /** The unique ID of the Ezsignfoldertype. */
    public var fkiEzsignfoldertypeID: Int
    /** The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**| */
    public var fkiEzsigntsarequirementID: Int
    /** The description of the Ezsignfolder */
    public var sEzsignfolderDescription: String
    /** Somes extra notes about the eZsign Folder */
    public var tEzsignfolderNote: String
    public var eEzsignfolderSendreminderfrequency: FieldEEzsignfolderSendreminderfrequency
    /** The unique ID of the Ezsignfolder */
    public var pkiEzsignfolderID: Int
    /** The date and time at which the Ezsign folder was sent the last time. */
    public var dtEzsignfolderSentdate: String?
    public var eEzsignfolderStep: FieldEEzsignfolderStep
    /** The date and time at which the folder was closed. Either by applying the last signature or by completing it prematurely. */
    public var dtEzsignfolderClose: String
    public var objAudit: CommonAudit

    public init(fkiEzsignfoldertypeID: Int, fkiEzsigntsarequirementID: Int, sEzsignfolderDescription: String, tEzsignfolderNote: String, eEzsignfolderSendreminderfrequency: FieldEEzsignfolderSendreminderfrequency, pkiEzsignfolderID: Int, dtEzsignfolderSentdate: String?, eEzsignfolderStep: FieldEEzsignfolderStep, dtEzsignfolderClose: String, objAudit: CommonAudit) {
        self.fkiEzsignfoldertypeID = fkiEzsignfoldertypeID
        self.fkiEzsigntsarequirementID = fkiEzsigntsarequirementID
        self.sEzsignfolderDescription = sEzsignfolderDescription
        self.tEzsignfolderNote = tEzsignfolderNote
        self.eEzsignfolderSendreminderfrequency = eEzsignfolderSendreminderfrequency
        self.pkiEzsignfolderID = pkiEzsignfolderID
        self.dtEzsignfolderSentdate = dtEzsignfolderSentdate
        self.eEzsignfolderStep = eEzsignfolderStep
        self.dtEzsignfolderClose = dtEzsignfolderClose
        self.objAudit = objAudit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fkiEzsignfoldertypeID
        case fkiEzsigntsarequirementID
        case sEzsignfolderDescription
        case tEzsignfolderNote
        case eEzsignfolderSendreminderfrequency
        case pkiEzsignfolderID
        case dtEzsignfolderSentdate
        case eEzsignfolderStep
        case dtEzsignfolderClose
        case objAudit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(fkiEzsignfoldertypeID, forKey: .fkiEzsignfoldertypeID)
        try container.encode(fkiEzsigntsarequirementID, forKey: .fkiEzsigntsarequirementID)
        try container.encode(sEzsignfolderDescription, forKey: .sEzsignfolderDescription)
        try container.encode(tEzsignfolderNote, forKey: .tEzsignfolderNote)
        try container.encode(eEzsignfolderSendreminderfrequency, forKey: .eEzsignfolderSendreminderfrequency)
        try container.encode(pkiEzsignfolderID, forKey: .pkiEzsignfolderID)
        try container.encode(dtEzsignfolderSentdate, forKey: .dtEzsignfolderSentdate)
        try container.encode(eEzsignfolderStep, forKey: .eEzsignfolderStep)
        try container.encode(dtEzsignfolderClose, forKey: .dtEzsignfolderClose)
        try container.encode(objAudit, forKey: .objAudit)
    }
}

