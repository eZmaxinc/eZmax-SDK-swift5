//
// ActivesessionListElement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Activesession List Element */
public struct ActivesessionListElement: Codable, JSONEncodable, Hashable {

    static let fkiUserIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiComputerIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 65535, exclusiveMaximum: false, multipleOf: nil)
    static let fkiCompanyIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: 255, exclusiveMaximum: false, multipleOf: nil)
    static let fkiDepartmentIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let sActivesessionLoginnameRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,32}$/")
    static let sComputerDescriptionRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^.{0,50}$/")
    static let dtActivesessionFirsthitRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
    static let dtActivesessionLasthitRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/")
    /** The unique ID of the Activesession */
    public var pkiActivesessionID: Int
    /** The unique ID of the User */
    public var fkiUserID: Int
    /** The unique ID of the Computer */
    public var fkiComputerID: Int
    /** The unique ID of the Company */
    public var fkiCompanyID: Int
    /** The unique ID of the Department */
    public var fkiDepartmentID: Int
    /** The Name of the Company in the language of the requester */
    public var sCompanyNameX: String
    /** The Name of the Department in the language of the requester */
    public var sDepartmentNameX: String
    /** The loginname of the Activesession */
    public var sActivesessionLoginname: String
    /** The description of the Computer */
    public var sComputerDescription: String
    /** The first hit of the Activesession */
    public var dtActivesessionFirsthit: String
    /** The last hit of the Activesession */
    public var dtActivesessionLasthit: String
    /** Represent an IP address. */
    public var sActivesessionIP: String

    public init(pkiActivesessionID: Int, fkiUserID: Int, fkiComputerID: Int, fkiCompanyID: Int, fkiDepartmentID: Int, sCompanyNameX: String, sDepartmentNameX: String, sActivesessionLoginname: String, sComputerDescription: String, dtActivesessionFirsthit: String, dtActivesessionLasthit: String, sActivesessionIP: String) {
        self.pkiActivesessionID = pkiActivesessionID
        self.fkiUserID = fkiUserID
        self.fkiComputerID = fkiComputerID
        self.fkiCompanyID = fkiCompanyID
        self.fkiDepartmentID = fkiDepartmentID
        self.sCompanyNameX = sCompanyNameX
        self.sDepartmentNameX = sDepartmentNameX
        self.sActivesessionLoginname = sActivesessionLoginname
        self.sComputerDescription = sComputerDescription
        self.dtActivesessionFirsthit = dtActivesessionFirsthit
        self.dtActivesessionLasthit = dtActivesessionLasthit
        self.sActivesessionIP = sActivesessionIP
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiActivesessionID
        case fkiUserID
        case fkiComputerID
        case fkiCompanyID
        case fkiDepartmentID
        case sCompanyNameX
        case sDepartmentNameX
        case sActivesessionLoginname
        case sComputerDescription
        case dtActivesessionFirsthit
        case dtActivesessionLasthit
        case sActivesessionIP
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiActivesessionID, forKey: .pkiActivesessionID)
        try container.encode(fkiUserID, forKey: .fkiUserID)
        try container.encode(fkiComputerID, forKey: .fkiComputerID)
        try container.encode(fkiCompanyID, forKey: .fkiCompanyID)
        try container.encode(fkiDepartmentID, forKey: .fkiDepartmentID)
        try container.encode(sCompanyNameX, forKey: .sCompanyNameX)
        try container.encode(sDepartmentNameX, forKey: .sDepartmentNameX)
        try container.encode(sActivesessionLoginname, forKey: .sActivesessionLoginname)
        try container.encode(sComputerDescription, forKey: .sComputerDescription)
        try container.encode(dtActivesessionFirsthit, forKey: .dtActivesessionFirsthit)
        try container.encode(dtActivesessionLasthit, forKey: .dtActivesessionLasthit)
        try container.encode(sActivesessionIP, forKey: .sActivesessionIP)
    }
}

