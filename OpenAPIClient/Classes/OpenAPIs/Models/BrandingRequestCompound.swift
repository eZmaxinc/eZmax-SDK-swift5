//
// BrandingRequestCompound.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Branding Object and children */
public struct BrandingRequestCompound: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Branding */
    public var pkiBrandingID: Int?
    public var objBrandingDescription: MultilingualBrandingDescription
    public var eBrandingLogo: FieldEBrandingLogo
    /** The Base64 encoded binary content of the branding logo. This need to match image type selected in eBrandingLogo if you supply an image. If you select 'Default', the logo will be deleted and the default one will be used. */
    public var sBrandingBase64: Data?
    /** The color of the text. This is a RGB color converted into integer */
    public var iBrandingColortext: Int
    /** The color of the text in the link box. This is a RGB color converted into integer */
    public var iBrandingColortextlinkbox: Int
    /** The color of the text in the button. This is a RGB color converted into integer */
    public var iBrandingColortextbutton: Int
    /** The color of the background. This is a RGB color converted into integer */
    public var iBrandingColorbackground: Int
    /** The color of the background of the button. This is a RGB color converted into integer */
    public var iBrandingColorbackgroundbutton: Int
    /** The color of the background of the small box. This is a RGB color converted into integer */
    public var iBrandingColorbackgroundsmallbox: Int
    /** Whether the Branding is active or not */
    public var bBrandingIsactive: Bool

    public init(pkiBrandingID: Int? = nil, objBrandingDescription: MultilingualBrandingDescription, eBrandingLogo: FieldEBrandingLogo, sBrandingBase64: Data? = nil, iBrandingColortext: Int, iBrandingColortextlinkbox: Int, iBrandingColortextbutton: Int, iBrandingColorbackground: Int, iBrandingColorbackgroundbutton: Int, iBrandingColorbackgroundsmallbox: Int, bBrandingIsactive: Bool) {
        self.pkiBrandingID = pkiBrandingID
        self.objBrandingDescription = objBrandingDescription
        self.eBrandingLogo = eBrandingLogo
        self.sBrandingBase64 = sBrandingBase64
        self.iBrandingColortext = iBrandingColortext
        self.iBrandingColortextlinkbox = iBrandingColortextlinkbox
        self.iBrandingColortextbutton = iBrandingColortextbutton
        self.iBrandingColorbackground = iBrandingColorbackground
        self.iBrandingColorbackgroundbutton = iBrandingColorbackgroundbutton
        self.iBrandingColorbackgroundsmallbox = iBrandingColorbackgroundsmallbox
        self.bBrandingIsactive = bBrandingIsactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiBrandingID
        case objBrandingDescription
        case eBrandingLogo
        case sBrandingBase64
        case iBrandingColortext
        case iBrandingColortextlinkbox
        case iBrandingColortextbutton
        case iBrandingColorbackground
        case iBrandingColorbackgroundbutton
        case iBrandingColorbackgroundsmallbox
        case bBrandingIsactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiBrandingID, forKey: .pkiBrandingID)
        try container.encode(objBrandingDescription, forKey: .objBrandingDescription)
        try container.encode(eBrandingLogo, forKey: .eBrandingLogo)
        try container.encodeIfPresent(sBrandingBase64, forKey: .sBrandingBase64)
        try container.encode(iBrandingColortext, forKey: .iBrandingColortext)
        try container.encode(iBrandingColortextlinkbox, forKey: .iBrandingColortextlinkbox)
        try container.encode(iBrandingColortextbutton, forKey: .iBrandingColortextbutton)
        try container.encode(iBrandingColorbackground, forKey: .iBrandingColorbackground)
        try container.encode(iBrandingColorbackgroundbutton, forKey: .iBrandingColorbackgroundbutton)
        try container.encode(iBrandingColorbackgroundsmallbox, forKey: .iBrandingColorbackgroundsmallbox)
        try container.encode(bBrandingIsactive, forKey: .bBrandingIsactive)
    }
}

