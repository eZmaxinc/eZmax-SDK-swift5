//
// EzmaxinvoicingResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Ezmaxinvoicing Object */
public struct EzmaxinvoicingResponse: Codable, JSONEncodable, Hashable {

    static let pkiEzmaxinvoicingIDRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzmaxinvoicingcontractIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiEzmaxpricingIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let fkiSystemconfigurationtypeIDRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let yyyymmEzmaxinvoicingRule = StringRule(minLength: nil, maxLength: 7, pattern: nil)
    static let iEzmaxinvoicingDaysRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let dEzmaxinvoicingRebatepaymenttypeRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/")
    static let iEzmaxinvoicingContractlengthRule = NumericRule<Int>(minimum: 1, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let dEzmaxinvoicingRebatecontractlengthRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^-{0,1}[\\d]{1,3}?\\.[\\d]{2}$/")
    /** The unique ID of the Ezmaxinvoicing */
    public var pkiEzmaxinvoicingID: Int?
    /** The unique ID of the Ezmaxinvoicingcontract */
    public var fkiEzmaxinvoicingcontractID: Int
    /** The unique ID of the Ezmaxpricing */
    public var fkiEzmaxpricingID: Int
    /** The unique ID of the Systemconfigurationtype */
    public var fkiSystemconfigurationtypeID: Int
    /** The description of the Systemconfigurationtype in the language of the requester */
    public var sSystemconfigurationtypeDescriptionX: String
    /** The YYYYMM period of the Ezmaxinvoicing */
    public var yyyymmEzmaxinvoicing: String
    /** The number of days invoiced */
    public var iEzmaxinvoicingDays: Int
    public var eEzmaxinvoicingPaymenttype: FieldEEzmaxinvoicingPaymenttype
    /** The percentage of rebate depending of the payment type */
    public var dEzmaxinvoicingRebatepaymenttype: String
    /** The length of the contract in years */
    public var iEzmaxinvoicingContractlength: Int
    /** The percentage of rebate depending of the contract length */
    public var dEzmaxinvoicingRebatecontractlength: String
    /** Whether the rebate for eZsign is for all agents */
    public var bEzmaxinvoicingRebateEzsignallagents: Bool
    public var objAudit: CommonAudit?

    public init(pkiEzmaxinvoicingID: Int? = nil, fkiEzmaxinvoicingcontractID: Int, fkiEzmaxpricingID: Int, fkiSystemconfigurationtypeID: Int, sSystemconfigurationtypeDescriptionX: String, yyyymmEzmaxinvoicing: String, iEzmaxinvoicingDays: Int, eEzmaxinvoicingPaymenttype: FieldEEzmaxinvoicingPaymenttype, dEzmaxinvoicingRebatepaymenttype: String, iEzmaxinvoicingContractlength: Int, dEzmaxinvoicingRebatecontractlength: String, bEzmaxinvoicingRebateEzsignallagents: Bool, objAudit: CommonAudit? = nil) {
        self.pkiEzmaxinvoicingID = pkiEzmaxinvoicingID
        self.fkiEzmaxinvoicingcontractID = fkiEzmaxinvoicingcontractID
        self.fkiEzmaxpricingID = fkiEzmaxpricingID
        self.fkiSystemconfigurationtypeID = fkiSystemconfigurationtypeID
        self.sSystemconfigurationtypeDescriptionX = sSystemconfigurationtypeDescriptionX
        self.yyyymmEzmaxinvoicing = yyyymmEzmaxinvoicing
        self.iEzmaxinvoicingDays = iEzmaxinvoicingDays
        self.eEzmaxinvoicingPaymenttype = eEzmaxinvoicingPaymenttype
        self.dEzmaxinvoicingRebatepaymenttype = dEzmaxinvoicingRebatepaymenttype
        self.iEzmaxinvoicingContractlength = iEzmaxinvoicingContractlength
        self.dEzmaxinvoicingRebatecontractlength = dEzmaxinvoicingRebatecontractlength
        self.bEzmaxinvoicingRebateEzsignallagents = bEzmaxinvoicingRebateEzsignallagents
        self.objAudit = objAudit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiEzmaxinvoicingID
        case fkiEzmaxinvoicingcontractID
        case fkiEzmaxpricingID
        case fkiSystemconfigurationtypeID
        case sSystemconfigurationtypeDescriptionX
        case yyyymmEzmaxinvoicing
        case iEzmaxinvoicingDays
        case eEzmaxinvoicingPaymenttype
        case dEzmaxinvoicingRebatepaymenttype
        case iEzmaxinvoicingContractlength
        case dEzmaxinvoicingRebatecontractlength
        case bEzmaxinvoicingRebateEzsignallagents
        case objAudit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(pkiEzmaxinvoicingID, forKey: .pkiEzmaxinvoicingID)
        try container.encode(fkiEzmaxinvoicingcontractID, forKey: .fkiEzmaxinvoicingcontractID)
        try container.encode(fkiEzmaxpricingID, forKey: .fkiEzmaxpricingID)
        try container.encode(fkiSystemconfigurationtypeID, forKey: .fkiSystemconfigurationtypeID)
        try container.encode(sSystemconfigurationtypeDescriptionX, forKey: .sSystemconfigurationtypeDescriptionX)
        try container.encode(yyyymmEzmaxinvoicing, forKey: .yyyymmEzmaxinvoicing)
        try container.encode(iEzmaxinvoicingDays, forKey: .iEzmaxinvoicingDays)
        try container.encode(eEzmaxinvoicingPaymenttype, forKey: .eEzmaxinvoicingPaymenttype)
        try container.encode(dEzmaxinvoicingRebatepaymenttype, forKey: .dEzmaxinvoicingRebatepaymenttype)
        try container.encode(iEzmaxinvoicingContractlength, forKey: .iEzmaxinvoicingContractlength)
        try container.encode(dEzmaxinvoicingRebatecontractlength, forKey: .dEzmaxinvoicingRebatecontractlength)
        try container.encode(bEzmaxinvoicingRebateEzsignallagents, forKey: .bEzmaxinvoicingRebateEzsignallagents)
        try container.encodeIfPresent(objAudit, forKey: .objAudit)
    }
}

