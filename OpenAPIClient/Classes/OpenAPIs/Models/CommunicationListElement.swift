//
// CommunicationListElement.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** A Communication List Element */
public struct CommunicationListElement: Codable, JSONEncodable, Hashable {

    /** The unique ID of the Communication. */
    public var pkiCommunicationID: Int
    public var eCommunicationEmailimportance: FieldECommunicationEmailimportance?
    public var eCommunicationType: FieldECommunicationType
    /** The Subject of the Communication */
    public var sCommunicationSubject: String
    /** The send date and time at which the Communication was sent. */
    public var dtCommunicationSentdate: String
    public var objContactFrom: CustomContactNameResponse

    public init(pkiCommunicationID: Int, eCommunicationEmailimportance: FieldECommunicationEmailimportance? = nil, eCommunicationType: FieldECommunicationType, sCommunicationSubject: String, dtCommunicationSentdate: String, objContactFrom: CustomContactNameResponse) {
        self.pkiCommunicationID = pkiCommunicationID
        self.eCommunicationEmailimportance = eCommunicationEmailimportance
        self.eCommunicationType = eCommunicationType
        self.sCommunicationSubject = sCommunicationSubject
        self.dtCommunicationSentdate = dtCommunicationSentdate
        self.objContactFrom = objContactFrom
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case pkiCommunicationID
        case eCommunicationEmailimportance
        case eCommunicationType
        case sCommunicationSubject
        case dtCommunicationSentdate
        case objContactFrom
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(pkiCommunicationID, forKey: .pkiCommunicationID)
        try container.encodeIfPresent(eCommunicationEmailimportance, forKey: .eCommunicationEmailimportance)
        try container.encode(eCommunicationType, forKey: .eCommunicationType)
        try container.encode(sCommunicationSubject, forKey: .sCommunicationSubject)
        try container.encode(dtCommunicationSentdate, forKey: .dtCommunicationSentdate)
        try container.encode(objContactFrom, forKey: .objContactFrom)
    }
}

