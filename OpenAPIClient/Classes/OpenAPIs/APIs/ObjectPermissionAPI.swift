//
// ObjectPermissionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectPermissionAPI {

    /**
     Create a new Permission
     
     - parameter permissionCreateObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func permissionCreateObjectV1(permissionCreateObjectV1Request: PermissionCreateObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PermissionCreateObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return permissionCreateObjectV1WithRequestBuilder(permissionCreateObjectV1Request: permissionCreateObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Permission
     - POST /1/object/permission
     - The endpoint allows to create one or many elements at once.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter permissionCreateObjectV1Request: (body)  
     - returns: RequestBuilder<PermissionCreateObjectV1Response> 
     */
    open class func permissionCreateObjectV1WithRequestBuilder(permissionCreateObjectV1Request: PermissionCreateObjectV1Request) -> RequestBuilder<PermissionCreateObjectV1Response> {
        let localVariablePath = "/1/object/permission"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: permissionCreateObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PermissionCreateObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete an existing Permission
     
     - parameter pkiPermissionID: (path) The unique ID of the Permission 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func permissionDeleteObjectV1(pkiPermissionID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PermissionDeleteObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return permissionDeleteObjectV1WithRequestBuilder(pkiPermissionID: pkiPermissionID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete an existing Permission
     - DELETE /1/object/permission/{pkiPermissionID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiPermissionID: (path) The unique ID of the Permission 
     - returns: RequestBuilder<PermissionDeleteObjectV1Response> 
     */
    open class func permissionDeleteObjectV1WithRequestBuilder(pkiPermissionID: Int) -> RequestBuilder<PermissionDeleteObjectV1Response> {
        var localVariablePath = "/1/object/permission/{pkiPermissionID}"
        let pkiPermissionIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiPermissionID))"
        let pkiPermissionIDPostEscape = pkiPermissionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiPermissionID}", with: pkiPermissionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PermissionDeleteObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit an existing Permission
     
     - parameter pkiPermissionID: (path) The unique ID of the Permission 
     - parameter permissionEditObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func permissionEditObjectV1(pkiPermissionID: Int, permissionEditObjectV1Request: PermissionEditObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PermissionEditObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return permissionEditObjectV1WithRequestBuilder(pkiPermissionID: pkiPermissionID, permissionEditObjectV1Request: permissionEditObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit an existing Permission
     - PUT /1/object/permission/{pkiPermissionID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiPermissionID: (path) The unique ID of the Permission 
     - parameter permissionEditObjectV1Request: (body)  
     - returns: RequestBuilder<PermissionEditObjectV1Response> 
     */
    open class func permissionEditObjectV1WithRequestBuilder(pkiPermissionID: Int, permissionEditObjectV1Request: PermissionEditObjectV1Request) -> RequestBuilder<PermissionEditObjectV1Response> {
        var localVariablePath = "/1/object/permission/{pkiPermissionID}"
        let pkiPermissionIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiPermissionID))"
        let pkiPermissionIDPostEscape = pkiPermissionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiPermissionID}", with: pkiPermissionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: permissionEditObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PermissionEditObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Permission
     
     - parameter pkiPermissionID: (path) The unique ID of the Permission 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func permissionGetObjectV2(pkiPermissionID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PermissionGetObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return permissionGetObjectV2WithRequestBuilder(pkiPermissionID: pkiPermissionID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Permission
     - GET /2/object/permission/{pkiPermissionID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiPermissionID: (path) The unique ID of the Permission 
     - returns: RequestBuilder<PermissionGetObjectV2Response> 
     */
    open class func permissionGetObjectV2WithRequestBuilder(pkiPermissionID: Int) -> RequestBuilder<PermissionGetObjectV2Response> {
        var localVariablePath = "/2/object/permission/{pkiPermissionID}"
        let pkiPermissionIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiPermissionID))"
        let pkiPermissionIDPostEscape = pkiPermissionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiPermissionID}", with: pkiPermissionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PermissionGetObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
