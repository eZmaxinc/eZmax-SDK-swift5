//
// ObjectUsergroupAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectUsergroupAPI {

    /**
     Create a new Usergroup
     
     - parameter usergroupCreateObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupCreateObjectV1(usergroupCreateObjectV1Request: UsergroupCreateObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupCreateObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupCreateObjectV1WithRequestBuilder(usergroupCreateObjectV1Request: usergroupCreateObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new Usergroup
     - POST /1/object/usergroup
     - The endpoint allows to create one or many elements at once.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter usergroupCreateObjectV1Request: (body)  
     - returns: RequestBuilder<UsergroupCreateObjectV1Response> 
     */
    open class func usergroupCreateObjectV1WithRequestBuilder(usergroupCreateObjectV1Request: UsergroupCreateObjectV1Request) -> RequestBuilder<UsergroupCreateObjectV1Response> {
        let localVariablePath = "/1/object/usergroup"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usergroupCreateObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupCreateObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit an existing Usergroup
     
     - parameter pkiUsergroupID: (path)  
     - parameter usergroupEditObjectV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupEditObjectV1(pkiUsergroupID: Int, usergroupEditObjectV1Request: UsergroupEditObjectV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupEditObjectV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupEditObjectV1WithRequestBuilder(pkiUsergroupID: pkiUsergroupID, usergroupEditObjectV1Request: usergroupEditObjectV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit an existing Usergroup
     - PUT /1/object/usergroup/{pkiUsergroupID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupID: (path)  
     - parameter usergroupEditObjectV1Request: (body)  
     - returns: RequestBuilder<UsergroupEditObjectV1Response> 
     */
    open class func usergroupEditObjectV1WithRequestBuilder(pkiUsergroupID: Int, usergroupEditObjectV1Request: UsergroupEditObjectV1Request) -> RequestBuilder<UsergroupEditObjectV1Response> {
        var localVariablePath = "/1/object/usergroup/{pkiUsergroupID}"
        let pkiUsergroupIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupID))"
        let pkiUsergroupIDPostEscape = pkiUsergroupIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupID}", with: pkiUsergroupIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usergroupEditObjectV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupEditObjectV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit multiple Permissions
     
     - parameter pkiUsergroupID: (path)  
     - parameter usergroupEditPermissionsV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupEditPermissionsV1(pkiUsergroupID: Int, usergroupEditPermissionsV1Request: UsergroupEditPermissionsV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupEditPermissionsV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupEditPermissionsV1WithRequestBuilder(pkiUsergroupID: pkiUsergroupID, usergroupEditPermissionsV1Request: usergroupEditPermissionsV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit multiple Permissions
     - PUT /1/object/usergroup/{pkiUsergroupID}/editPermissions
     - Using this endpoint, you can edit multiple Permissions at the same time.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupID: (path)  
     - parameter usergroupEditPermissionsV1Request: (body)  
     - returns: RequestBuilder<UsergroupEditPermissionsV1Response> 
     */
    open class func usergroupEditPermissionsV1WithRequestBuilder(pkiUsergroupID: Int, usergroupEditPermissionsV1Request: UsergroupEditPermissionsV1Request) -> RequestBuilder<UsergroupEditPermissionsV1Response> {
        var localVariablePath = "/1/object/usergroup/{pkiUsergroupID}/editPermissions"
        let pkiUsergroupIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupID))"
        let pkiUsergroupIDPostEscape = pkiUsergroupIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupID}", with: pkiUsergroupIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usergroupEditPermissionsV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupEditPermissionsV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit multiple Usergroupdelegations
     
     - parameter pkiUsergroupID: (path)  
     - parameter usergroupEditUsergroupdelegationsV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupEditUsergroupdelegationsV1(pkiUsergroupID: Int, usergroupEditUsergroupdelegationsV1Request: UsergroupEditUsergroupdelegationsV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupEditUsergroupdelegationsV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupEditUsergroupdelegationsV1WithRequestBuilder(pkiUsergroupID: pkiUsergroupID, usergroupEditUsergroupdelegationsV1Request: usergroupEditUsergroupdelegationsV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit multiple Usergroupdelegations
     - PUT /1/object/usergroup/{pkiUsergroupID}/editUsergroupdelegations
     - Edit multiple Usergroupdelegations
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupID: (path)  
     - parameter usergroupEditUsergroupdelegationsV1Request: (body)  
     - returns: RequestBuilder<UsergroupEditUsergroupdelegationsV1Response> 
     */
    open class func usergroupEditUsergroupdelegationsV1WithRequestBuilder(pkiUsergroupID: Int, usergroupEditUsergroupdelegationsV1Request: UsergroupEditUsergroupdelegationsV1Request) -> RequestBuilder<UsergroupEditUsergroupdelegationsV1Response> {
        var localVariablePath = "/1/object/usergroup/{pkiUsergroupID}/editUsergroupdelegations"
        let pkiUsergroupIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupID))"
        let pkiUsergroupIDPostEscape = pkiUsergroupIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupID}", with: pkiUsergroupIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usergroupEditUsergroupdelegationsV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupEditUsergroupdelegationsV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit multiple Usergroupmemberships
     
     - parameter pkiUsergroupID: (path)  
     - parameter usergroupEditUsergroupmembershipsV1Request: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupEditUsergroupmembershipsV1(pkiUsergroupID: Int, usergroupEditUsergroupmembershipsV1Request: UsergroupEditUsergroupmembershipsV1Request, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupEditUsergroupmembershipsV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupEditUsergroupmembershipsV1WithRequestBuilder(pkiUsergroupID: pkiUsergroupID, usergroupEditUsergroupmembershipsV1Request: usergroupEditUsergroupmembershipsV1Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit multiple Usergroupmemberships
     - PUT /1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships
     - Using this endpoint, you can edit multiple Usergroupmemberships at the same time.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupID: (path)  
     - parameter usergroupEditUsergroupmembershipsV1Request: (body)  
     - returns: RequestBuilder<UsergroupEditUsergroupmembershipsV1Response> 
     */
    open class func usergroupEditUsergroupmembershipsV1WithRequestBuilder(pkiUsergroupID: Int, usergroupEditUsergroupmembershipsV1Request: UsergroupEditUsergroupmembershipsV1Request) -> RequestBuilder<UsergroupEditUsergroupmembershipsV1Response> {
        var localVariablePath = "/1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships"
        let pkiUsergroupIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupID))"
        let pkiUsergroupIDPostEscape = pkiUsergroupIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupID}", with: pkiUsergroupIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usergroupEditUsergroupmembershipsV1Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupEditUsergroupmembershipsV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sSelector
     */
    public enum SSelector_usergroupGetAutocompleteV2: String, CaseIterable {
        case all = "All"
    }

    /**
     * enum for parameter eFilterActive
     */
    public enum EFilterActive_usergroupGetAutocompleteV2: String, CaseIterable {
        case all = "All"
        case active = "Active"
        case inactive = "Inactive"
    }

    /**
     Retrieve Usergroups and IDs
     
     - parameter sSelector: (path) The type of Usergroups to return 
     - parameter eFilterActive: (query) Specify which results we want to display. (optional, default to .active)
     - parameter sQuery: (query) Allow to filter the returned results (optional)
     - parameter acceptLanguage: (header)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupGetAutocompleteV2(sSelector: SSelector_usergroupGetAutocompleteV2, eFilterActive: EFilterActive_usergroupGetAutocompleteV2? = nil, sQuery: String? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupGetAutocompleteV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupGetAutocompleteV2WithRequestBuilder(sSelector: sSelector, eFilterActive: eFilterActive, sQuery: sQuery, acceptLanguage: acceptLanguage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Usergroups and IDs
     - GET /2/object/usergroup/getAutocomplete/{sSelector}
     - Get the list of Usergroup to be used in a dropdown or autocomplete control.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter sSelector: (path) The type of Usergroups to return 
     - parameter eFilterActive: (query) Specify which results we want to display. (optional, default to .active)
     - parameter sQuery: (query) Allow to filter the returned results (optional)
     - parameter acceptLanguage: (header)  (optional)
     - returns: RequestBuilder<UsergroupGetAutocompleteV2Response> 
     */
    open class func usergroupGetAutocompleteV2WithRequestBuilder(sSelector: SSelector_usergroupGetAutocompleteV2, eFilterActive: EFilterActive_usergroupGetAutocompleteV2? = nil, sQuery: String? = nil, acceptLanguage: HeaderAcceptLanguage? = nil) -> RequestBuilder<UsergroupGetAutocompleteV2Response> {
        var localVariablePath = "/2/object/usergroup/getAutocomplete/{sSelector}"
        let sSelectorPreEscape = "\(sSelector.rawValue)"
        let sSelectorPostEscape = sSelectorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sSelector}", with: sSelectorPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eFilterActive": (wrappedValue: eFilterActive?.encodeToJSON(), isExplode: true),
            "sQuery": (wrappedValue: sQuery?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupGetAutocompleteV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter eOrderBy
     */
    public enum EOrderBy_usergroupGetListV1: String, CaseIterable {
        case pkiusergroupidAsc = "pkiUsergroupID_ASC"
        case pkiusergroupidDesc = "pkiUsergroupID_DESC"
        case susergroupnamexAsc = "sUsergroupNameX_ASC"
        case susergroupnamexDesc = "sUsergroupNameX_DESC"
        case icountuserAsc = "iCountUser_ASC"
        case icountuserDesc = "iCountUser_DESC"
    }

    /**
     Retrieve Usergroup list
     
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional, default to 10000)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupGetListV1(eOrderBy: EOrderBy_usergroupGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupGetListV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupGetListV1WithRequestBuilder(eOrderBy: eOrderBy, iRowMax: iRowMax, iRowOffset: iRowOffset, acceptLanguage: acceptLanguage, sFilter: sFilter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Usergroup list
     - GET /1/object/usergroup/getList
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional, default to 10000)
     - parameter iRowOffset: (query)  (optional, default to 0)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - returns: RequestBuilder<UsergroupGetListV1Response> 
     */
    open class func usergroupGetListV1WithRequestBuilder(eOrderBy: EOrderBy_usergroupGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil) -> RequestBuilder<UsergroupGetListV1Response> {
        let localVariablePath = "/1/object/usergroup/getList"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eOrderBy": (wrappedValue: eOrderBy?.encodeToJSON(), isExplode: true),
            "iRowMax": (wrappedValue: iRowMax?.encodeToJSON(), isExplode: true),
            "iRowOffset": (wrappedValue: iRowOffset?.encodeToJSON(), isExplode: true),
            "sFilter": (wrappedValue: sFilter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupGetListV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Usergroup
     
     - parameter pkiUsergroupID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupGetObjectV2(pkiUsergroupID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupGetObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupGetObjectV2WithRequestBuilder(pkiUsergroupID: pkiUsergroupID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Usergroup
     - GET /2/object/usergroup/{pkiUsergroupID}
     - 
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupID: (path)  
     - returns: RequestBuilder<UsergroupGetObjectV2Response> 
     */
    open class func usergroupGetObjectV2WithRequestBuilder(pkiUsergroupID: Int) -> RequestBuilder<UsergroupGetObjectV2Response> {
        var localVariablePath = "/2/object/usergroup/{pkiUsergroupID}"
        let pkiUsergroupIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupID))"
        let pkiUsergroupIDPostEscape = pkiUsergroupIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupID}", with: pkiUsergroupIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupGetObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Usergroup's Permissions
     
     - parameter pkiUsergroupID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupGetPermissionsV1(pkiUsergroupID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupGetPermissionsV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupGetPermissionsV1WithRequestBuilder(pkiUsergroupID: pkiUsergroupID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Usergroup's Permissions
     - GET /1/object/usergroup/{pkiUsergroupID}/getPermissions
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupID: (path)  
     - returns: RequestBuilder<UsergroupGetPermissionsV1Response> 
     */
    open class func usergroupGetPermissionsV1WithRequestBuilder(pkiUsergroupID: Int) -> RequestBuilder<UsergroupGetPermissionsV1Response> {
        var localVariablePath = "/1/object/usergroup/{pkiUsergroupID}/getPermissions"
        let pkiUsergroupIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupID))"
        let pkiUsergroupIDPostEscape = pkiUsergroupIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupID}", with: pkiUsergroupIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupGetPermissionsV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Usergroup's Usergroupdelegations
     
     - parameter pkiUsergroupID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupGetUsergroupdelegationsV1(pkiUsergroupID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupGetUsergroupdelegationsV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupGetUsergroupdelegationsV1WithRequestBuilder(pkiUsergroupID: pkiUsergroupID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Usergroup's Usergroupdelegations
     - GET /1/object/usergroup/{pkiUsergroupID}/getUsergroupdelegations
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupID: (path)  
     - returns: RequestBuilder<UsergroupGetUsergroupdelegationsV1Response> 
     */
    open class func usergroupGetUsergroupdelegationsV1WithRequestBuilder(pkiUsergroupID: Int) -> RequestBuilder<UsergroupGetUsergroupdelegationsV1Response> {
        var localVariablePath = "/1/object/usergroup/{pkiUsergroupID}/getUsergroupdelegations"
        let pkiUsergroupIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupID))"
        let pkiUsergroupIDPostEscape = pkiUsergroupIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupID}", with: pkiUsergroupIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupGetUsergroupdelegationsV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Usergroup's Usergroupmemberships
     
     - parameter pkiUsergroupID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func usergroupGetUsergroupmembershipsV1(pkiUsergroupID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UsergroupGetUsergroupmembershipsV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return usergroupGetUsergroupmembershipsV1WithRequestBuilder(pkiUsergroupID: pkiUsergroupID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Usergroup's Usergroupmemberships
     - GET /1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: Authorization
     - parameter pkiUsergroupID: (path)  
     - returns: RequestBuilder<UsergroupGetUsergroupmembershipsV1Response> 
     */
    open class func usergroupGetUsergroupmembershipsV1WithRequestBuilder(pkiUsergroupID: Int) -> RequestBuilder<UsergroupGetUsergroupmembershipsV1Response> {
        var localVariablePath = "/1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships"
        let pkiUsergroupIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiUsergroupID))"
        let pkiUsergroupIDPostEscape = pkiUsergroupIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiUsergroupID}", with: pkiUsergroupIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsergroupGetUsergroupmembershipsV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
