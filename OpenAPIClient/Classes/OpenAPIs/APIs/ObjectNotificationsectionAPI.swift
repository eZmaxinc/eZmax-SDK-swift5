//
// ObjectNotificationsectionAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectNotificationsectionAPI {

    /**
     Retrieve an existing Notificationsection's Notificationtests
     
     - parameter pkiNotificationsectionID: (path)  
     - parameter bShowHidden: (query) Whether or not to return the hidden Notificationtests 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func notificationsectionGetNotificationtestsV1(pkiNotificationsectionID: Int, bShowHidden: Bool, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NotificationsectionGetNotificationtestsV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return notificationsectionGetNotificationtestsV1WithRequestBuilder(pkiNotificationsectionID: pkiNotificationsectionID, bShowHidden: bShowHidden).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Notificationsection's Notificationtests
     - GET /1/object/notificationsection/{pkiNotificationsectionID}/getNotificationtests
     - 
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter pkiNotificationsectionID: (path)  
     - parameter bShowHidden: (query) Whether or not to return the hidden Notificationtests 
     - returns: RequestBuilder<NotificationsectionGetNotificationtestsV1Response> 
     */
    open class func notificationsectionGetNotificationtestsV1WithRequestBuilder(pkiNotificationsectionID: Int, bShowHidden: Bool) -> RequestBuilder<NotificationsectionGetNotificationtestsV1Response> {
        var localVariablePath = "/1/object/notificationsection/{pkiNotificationsectionID}/getNotificationtests"
        let pkiNotificationsectionIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiNotificationsectionID))"
        let pkiNotificationsectionIDPostEscape = pkiNotificationsectionIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiNotificationsectionID}", with: pkiNotificationsectionIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bShowHidden": (wrappedValue: bShowHidden.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<NotificationsectionGetNotificationtestsV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
