//
// ObjectCommunicationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ObjectCommunicationAPI {

    /**
     * enum for parameter eOrderBy
     */
    public enum EOrderBy_communicationGetListV1: String, CaseIterable {
        case pkicommunicationidAsc = "pkiCommunicationID_ASC"
        case pkicommunicationidDesc = "pkiCommunicationID_DESC"
        case fkiezsignfolderidAsc = "fkiEzsignfolderID_ASC"
        case fkiezsignfolderidDesc = "fkiEzsignfolderID_DESC"
        case dtcreateddateAsc = "dtCreatedDate_ASC"
        case dtcreateddateDesc = "dtCreatedDate_DESC"
        case ecommunicationdirectionAsc = "eCommunicationDirection_ASC"
        case ecommunicationdirectionDesc = "eCommunicationDirection_DESC"
        case ecommunicationimportanceAsc = "eCommunicationImportance_ASC"
        case ecommunicationimportanceDesc = "eCommunicationImportance_DESC"
        case ecommunicationtypeAsc = "eCommunicationType_ASC"
        case ecommunicationtypeDesc = "eCommunicationType_DESC"
        case icommunicationrecipientcountAsc = "iCommunicationrecipientCount_ASC"
        case icommunicationrecipientcountDesc = "iCommunicationrecipientCount_DESC"
        case scommunicationsubjectAsc = "sCommunicationSubject_ASC"
        case scommunicationsubjectDesc = "sCommunicationSubject_DESC"
        case scommunicationsenderAsc = "sCommunicationSender_ASC"
        case scommunicationsenderDesc = "sCommunicationSender_DESC"
        case scommunicationrecipientAsc = "sCommunicationRecipient_ASC"
        case scommunicationrecipientDesc = "sCommunicationRecipient_DESC"
    }

    /**
     Retrieve Communication list
     
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func communicationGetListV1(eOrderBy: EOrderBy_communicationGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommunicationGetListV1Response?, _ error: Error?) -> Void)) -> RequestTask {
        return communicationGetListV1WithRequestBuilder(eOrderBy: eOrderBy, iRowMax: iRowMax, iRowOffset: iRowOffset, acceptLanguage: acceptLanguage, sFilter: sFilter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve Communication list
     - GET /1/object/communication/getList
     - Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eCommunicationImportance | High<br>Normal<br>Low | | eCommunicationType | Email<br>Fax<br>Sms | | eCommunicationDirection | Inbound<br>Outbound |
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter eOrderBy: (query) Specify how you want the results to be sorted (optional)
     - parameter iRowMax: (query)  (optional)
     - parameter iRowOffset: (query)  (optional)
     - parameter acceptLanguage: (header)  (optional)
     - parameter sFilter: (query)  (optional)
     - returns: RequestBuilder<CommunicationGetListV1Response> 
     */
    open class func communicationGetListV1WithRequestBuilder(eOrderBy: EOrderBy_communicationGetListV1? = nil, iRowMax: Int? = nil, iRowOffset: Int? = nil, acceptLanguage: HeaderAcceptLanguage? = nil, sFilter: String? = nil) -> RequestBuilder<CommunicationGetListV1Response> {
        let localVariablePath = "/1/object/communication/getList"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "eOrderBy": (wrappedValue: eOrderBy?.encodeToJSON(), isExplode: true),
            "iRowMax": (wrappedValue: iRowMax?.encodeToJSON(), isExplode: true),
            "iRowOffset": (wrappedValue: iRowOffset?.encodeToJSON(), isExplode: true),
            "sFilter": (wrappedValue: sFilter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommunicationGetListV1Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieve an existing Communication
     
     - parameter pkiCommunicationID: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func communicationGetObjectV2(pkiCommunicationID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CommunicationGetObjectV2Response?, _ error: Error?) -> Void)) -> RequestTask {
        return communicationGetObjectV2WithRequestBuilder(pkiCommunicationID: pkiCommunicationID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve an existing Communication
     - GET /2/object/communication/{pkiCommunicationID}
     - 
     - API Key:
       - type: apiKey Authorization 
       - name: Authorization
     - parameter pkiCommunicationID: (path)  
     - returns: RequestBuilder<CommunicationGetObjectV2Response> 
     */
    open class func communicationGetObjectV2WithRequestBuilder(pkiCommunicationID: Int) -> RequestBuilder<CommunicationGetObjectV2Response> {
        var localVariablePath = "/2/object/communication/{pkiCommunicationID}"
        let pkiCommunicationIDPreEscape = "\(APIHelper.mapValueToPathItem(pkiCommunicationID))"
        let pkiCommunicationIDPostEscape = pkiCommunicationIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{pkiCommunicationID}", with: pkiCommunicationIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CommunicationGetObjectV2Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
